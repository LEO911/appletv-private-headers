/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/EventKit.framework/EventKit
 */

#import <NSObject.h> // Unknown library
#import "EventKit-Structs.h"

@class NSNumber, NSTimeZone, NSArray, NSString, EKDaemonConnection, EKCalendar, NSMutableDictionary, NSMutableSet;

@interface EKEventStore : NSObject {
@private
	NSMutableDictionary *_registeredObjects;	// 4 = 0x4
	NSMutableDictionary *_publicRegisteredObjects;	// 8 = 0x8
	NSMutableSet *_insertedObjects;	// 12 = 0xc
	NSMutableSet *_deletedObjects;	// 16 = 0x10
	NSMutableSet *_updatedObjects;	// 20 = 0x14
	NSNumber *_defaultTimedAlarmOffset;	// 24 = 0x18
	NSNumber *_defaultAllDayAlarmOffset;	// 28 = 0x1c
	EKDaemonConnection *_database;	// 32 = 0x20
	unsigned long _flags;	// 36 = 0x24
	NSTimeZone *_timeZone;	// 40 = 0x28
	NSMutableDictionary *_calendars;	// 44 = 0x2c
	NSMutableDictionary *_sources;	// 48 = 0x30
	NSMutableSet *_objectsPendingCommit;	// 52 = 0x34
	dispatch_queue_s *_calendarQueue;	// 56 = 0x38
	dispatch_queue_s *_registeredQueue;	// 60 = 0x3c
	dispatch_queue_s *_unsavedChangesQueue;	// 64 = 0x40
	dispatch_queue_s *_dbChangedQueue;	// 68 = 0x44
}
@property(retain, nonatomic) NSMutableDictionary *_calendars;	// G=0x313bde41; S=0x313bde51; @synthesize
@property(retain, nonatomic) NSMutableDictionary *_sources;	// G=0x313bde75; S=0x313bde85; @synthesize
@property(assign, nonatomic) dispatch_queue_s *calendarQueue;	// G=0x313bdec9; S=0x313bded9; @synthesize=_calendarQueue
@property(readonly, assign, nonatomic) NSArray *calendars;	// G=0x31392821; 
@property(retain, nonatomic) EKDaemonConnection *database;	// G=0x313bdded; S=0x313bddfd; @synthesize=_database
@property(assign, nonatomic) dispatch_queue_s *dbChangedQueue;	// G=0x313bdf29; S=0x313bdf39; @synthesize=_dbChangedQueue
@property(retain, nonatomic) NSNumber *defaultAllDayAlarmOffset;	// G=0x31388501; S=0x313bdd09; @synthesize=_defaultAllDayAlarmOffset
@property(readonly, assign, nonatomic) EKCalendar *defaultCalendarForNewEvents;	// G=0x313893a5; 
@property(retain) id defaultCalendarForNewTasks;	// G=0x313935ad; S=0x313bac99; converted property
@property(retain, nonatomic) NSNumber *defaultTimedAlarmOffset;	// G=0x313871d1; S=0x313bdcc5; @synthesize=_defaultTimedAlarmOffset
@property(assign, nonatomic) NSMutableSet *deletedObjects;	// G=0x313bddad; S=0x313bddbd; @synthesize=_deletedObjects
@property(readonly, assign, nonatomic) NSString *eventStoreIdentifier;	// G=0x313b8cad; 
@property(assign, nonatomic) unsigned long flags;	// G=0x313bde21; S=0x313bde31; @synthesize=_flags
@property(assign, nonatomic) NSMutableSet *insertedObjects;	// G=0x313bdd8d; S=0x313bdd9d; @synthesize=_insertedObjects
@property(assign, nonatomic) NSMutableSet *objectsPendingCommit;	// G=0x313bdea9; S=0x313bdeb9; @synthesize=_objectsPendingCommit
@property(assign, nonatomic) NSMutableDictionary *publicRegisteredObjects;	// G=0x313bdd6d; S=0x313bdd7d; @synthesize=_publicRegisteredObjects
@property(assign, nonatomic) NSMutableDictionary *registeredObjects;	// G=0x313bdd4d; S=0x313bdd5d; @synthesize=_registeredObjects
@property(assign, nonatomic) dispatch_queue_s *registeredQueue;	// G=0x313bdee9; S=0x313bdef9; @synthesize=_registeredQueue
@property(readonly, retain) NSMutableDictionary *sources;	// G=0x31377161; converted property
@property(copy, nonatomic) NSTimeZone *timeZone;	// G=0x31375435; S=0x313797f1; @synthesize=_timeZone
@property(assign, nonatomic) dispatch_queue_s *unsavedChangesQueue;	// G=0x313bdf09; S=0x313bdf19; @synthesize=_unsavedChangesQueue
@property(assign, nonatomic) NSMutableSet *updatedObjects;	// G=0x313bddcd; S=0x313bdddd; @synthesize=_updatedObjects
+ (Class)classForEntityName:(id)entityName;	// 0x31377799
+ (Class)publicClassForEntityName:(id)entityName;	// 0x313809cd
+ (id)storeWithOptions:(unsigned long)options path:(id)path;	// 0x313b7fd1
- (id)init;	// 0x31374ead
- (id)initWithOptions:(unsigned long)options path:(id)path;	// 0x31374ec1
- (id)_addFetchedObjectWithID:(id)anId;	// 0x31377529
- (void)_addObjectToPendingCommits:(id)pendingCommits;	// 0x3138f141
- (id)_allCalendars;	// 0x313819c1
- (BOOL)_calendar:(id)calendar supportsEntityType:(int)type;	// 0x31381b79
// declared property getter: - (id)_calendars;	// 0x313bde41
- (void)_databaseChangedExternally;	// 0x31390b39
- (void)_deleteObject:(id)object;	// 0x313924ed
- (id)_eventWithURI:(id)uri checkValid:(BOOL)valid;	// 0x313b9ccd
- (void)_forgetRegisteredObjects;	// 0x313bb799
- (void)_insertObject:(id)object;	// 0x3138b2c9
- (void)_notifyStoreChanged;	// 0x313b8d8d
- (BOOL)_parseURI:(id)uri expectedScheme:(id)scheme identifier:(id *)identifier options:(id *)options;	// 0x313b996d
- (void)_performServerFunction:(id)function replyHandler:(id)handler;	// 0x31381de9
- (id)_predicateForRemindersWithDate:(id)date useAsCompletionDate:(BOOL)date2 calendars:(id)calendars limitToCompletedOrIncomplete:(BOOL)completedOrIncomplete completed:(BOOL)completed includeDatesBefore:(BOOL)before sortOrder:(int)order;	// 0x3138230d
- (void)_protectedDataDidBecomeAvailable;	// 0x313bdcc1
- (void)_protectedDataWillBecomeUnavailable;	// 0x313bdcbd
- (void)_refreshCalendar:(id)calendar accountsManager:(id)manager isUserRequested:(BOOL)requested;	// 0x313bb2f5
- (void)_refreshSource:(id)source accountsManager:(id)manager isUserRequested:(BOOL)requested;	// 0x313bb475
- (void)_registerObject:(id)object;	// 0x31386c01
- (void)_registerObjectImmediate:(id)immediate;	// 0x31377b99
- (void)_reregisterObject:(id)object oldID:(id)anId;	// 0x31390559
- (void)_save;	// 0x313b8d79
- (void)_saveWithNotify:(BOOL)notify;	// 0x313b8cf1
// declared property getter: - (id)_sources;	// 0x313bde75
- (void)_trackModifiedObject:(id)object;	// 0x31394d1d
- (void)_unregisterObject:(id)object;	// 0x31392741
- (void)_validateObjectIDs:(id)ids completion:(id)completion;	// 0x31390da9
- (void)alarmOccurrencesBetweenStartDate:(id)date endDate:(id)date2 completion:(id)completion;	// 0x313bd739
- (id)alarmWithUUID:(id)uuid;	// 0x313bd671
// declared property getter: - (dispatch_queue_s *)calendarQueue;	// 0x313bdec9
- (id)calendarWithExternalURI:(id)externalURI;	// 0x313bb14d
- (id)calendarWithID:(id)anId;	// 0x3137c9e5
- (id)calendarWithIdentifier:(id)identifier;	// 0x31382209
// declared property getter: - (id)calendars;	// 0x31392821
- (void)cancelFetchRequest:(id)request;	// 0x313bd651
- (id)changesSinceSequenceNumber:(int)number;	// 0x313b80a5
- (BOOL)commit:(id *)commit;	// 0x3138f1a5
- (id)connection;	// 0x31376591
- (CGColorRef)copyCGColorForNewCalendar;	// 0x313bab39
- (int)countOfRemindersMatchingPredicate:(id)remindersMatchingPredicate;	// 0x313825a1
- (void)daemonRestarted;	// 0x313b8c65
// declared property getter: - (id)database;	// 0x313bdded
// declared property getter: - (dispatch_queue_s *)dbChangedQueue;	// 0x313bdf29
- (void)dealloc;	// 0x31376d49
- (id)defaultAllDayAlarm;	// 0x3138848d
// declared property getter: - (id)defaultAllDayAlarmOffset;	// 0x31388501
// declared property getter: - (id)defaultCalendarForNewEvents;	// 0x313893a5
// converted property getter: - (id)defaultCalendarForNewTasks;	// 0x313935ad
- (id)defaultTimedAlarm;	// 0x3138715d
// declared property getter: - (id)defaultTimedAlarmOffset;	// 0x313871d1
- (BOOL)deleteCalendar:(id)calendar forEntityType:(int)entityType error:(id *)error;	// 0x313b9759
// declared property getter: - (id)deletedObjects;	// 0x313bddad
- (id)earliestExpiringUnreadEventEndDateAfterDate:(id)date timeZone:(id)zone;	// 0x31375485
- (void)enumerateEventsMatchingPredicate:(id)predicate usingBlock:(id)block;	// 0x313bd43d
- (id)eventForUID:(id)uid occurrenceDate:(id)date;	// 0x31385a79
// declared property getter: - (id)eventStoreIdentifier;	// 0x313b8cad
- (id)eventWithIdentifier:(id)identifier;	// 0x313b988d
- (id)eventWithUUID:(id)uuid;	// 0x313bb081
- (id)eventWithUniqueId:(id)uniqueId;	// 0x313b9edd
- (id)eventsMatchingPredicate:(id)predicate;	// 0x31375d7d
- (id)fetchEventsMatchingPredicate:(id)predicate resultHandler:(id)handler;	// 0x31375f3d
- (void)fetchRemindersMatchingPredicate:(id)predicate completion:(id)completion;	// 0x313979c9
// declared property getter: - (unsigned long)flags;	// 0x313bde21
- (id)importICS:(id)ics intoCalendar:(id)calendar options:(unsigned)options;	// 0x313ba365
- (id)importICSData:(id)data intoCalendar:(id)calendar options:(unsigned)options;	// 0x313ba905
- (void)importICSData:(id)data intoCalendar:(id)calendar options:(unsigned)options completion:(id)completion;	// 0x313ba459
- (id)insertNewEvent;	// 0x313bb22d
- (id)insertNewExceptionDateWithDate:(id)date;	// 0x313bb289
- (id)insertNewReminder;	// 0x313baed1
// declared property getter: - (id)insertedObjects;	// 0x313bdd8d
- (BOOL)isDataProtected;	// 0x31375431
- (id)localSource;	// 0x313b8fe9
- (void)locationBasedAlarmOccurrencesWithCompletion:(id)completion;	// 0x31381d65
- (BOOL)markEventRead:(id)read error:(id *)error;	// 0x313b9fb5
- (BOOL)markEventsRead:(id)read error:(id *)error;	// 0x313ba10d
- (id)objectWithObjectID:(id)objectID;	// 0x3137ca7d
// declared property getter: - (id)objectsPendingCommit;	// 0x313bdea9
- (id)predicateForAllRemindersDueBeforeOrOnDueDate:(id)allRemindersDueBeforeOrOnDueDate calendars:(id)calendars;	// 0x313baf91
- (id)predicateForAllRemindersWithDueDate:(id)dueDate calendars:(id)calendars;	// 0x3138340d
- (id)predicateForCompletedRemindersWithCalendars:(id)calendars;	// 0x313bb011
- (id)predicateForCompletedRemindersWithDueDate:(id)dueDate calendars:(id)calendars sortOrder:(int)order;	// 0x313822d5
- (id)predicateForCompletedRemindersWithDueDateOrCompletionDate:(id)dueDateOrCompletionDate calendars:(id)calendars sortOrder:(int)order;	// 0x31382da5
- (id)predicateForEventsWithStartDate:(id)startDate endDate:(id)date calendars:(id)calendars;	// 0x3137cc85
- (id)predicateForEventsWithStartDate:(id)startDate endDate:(id)date eventUUID:(id)uuid calendars:(id)calendars;	// 0x313bdb45
- (id)predicateForIncompleteRemindersDueBeforeOrOnDueDate:(id)incompleteRemindersDueBeforeOrOnDueDate calendars:(id)calendars;	// 0x31392c91
- (id)predicateForIncompleteRemindersWithDueDate:(id)dueDate calendars:(id)calendars;	// 0x31383441
- (id)predicateForRemindersWithSearchTerm:(id)searchTerm;	// 0x31397919
- (id)predicateForRemindersWithTitle:(id)title calendars:(id)calendars;	// 0x313bafc9
- (id)predicateForRemindersWithTitle:(id)title listTitle:(id)title2 limitToCompletedOrIncomplete:(BOOL)completedOrIncomplete completed:(BOOL)completed dueAfter:(id)after dueBefore:(id)before searchTerm:(id)term sortOrder:(int)order;	// 0x313bb035
- (id)predicateForUnacknowledgedEvents;	// 0x313bdc85
- (id)predicateForUnalertedEvents;	// 0x31375d29
- (id)predicateForUpcomingEventsWithLimit:(int)limit;	// 0x313bdca1
- (id)publicObjectWithObjectID:(id)objectID;	// 0x313bba69
- (id)publicObjectWithPersistentObject:(id)persistentObject;	// 0x313802b5
// declared property getter: - (id)publicRegisteredObjects;	// 0x313bdd6d
- (int)readWriteCalendarCountForEntityType:(int)entityType;	// 0x31387c49
- (id)readWriteCalendarsForEntityType:(int)entityType;	// 0x313818b5
- (void)refreshSourcesIfNecessary;	// 0x313bb595
- (void)refreshSourcesIfNecessary:(BOOL)necessary;	// 0x31378edd
- (id)registerFetchedObjectWithID:(id)anId;	// 0x313773c9
// declared property getter: - (id)registeredObjects;	// 0x313bdd4d
// declared property getter: - (dispatch_queue_s *)registeredQueue;	// 0x313bdee9
- (oneway void)release;	// 0x313758b9
- (id)reminderWithExternalURI:(id)externalURI;	// 0x313bacfd
- (id)reminderWithUUID:(id)uuid;	// 0x313bae09
- (id)remindersMatchingPredicate:(id)predicate;	// 0x31382ddd
- (BOOL)removeCalendar:(id)calendar commit:(BOOL)commit error:(id *)error;	// 0x313b969d
- (BOOL)removeCalendar:(id)calendar error:(id *)error;	// 0x313b95c5
- (BOOL)removeEvent:(id)event span:(int)span commit:(BOOL)commit error:(id *)error;	// 0x31391e81
- (BOOL)removeEvent:(id)event span:(int)span error:(id *)error;	// 0x31391e5d
- (BOOL)removeReminder:(id)reminder commit:(BOOL)commit error:(id *)error;	// 0x31397b99
- (BOOL)removeReminder:(id)reminder error:(id *)error;	// 0x31397b79
- (BOOL)removeSource:(id)source error:(id *)error;	// 0x313b9155
- (void)reset;	// 0x313bc3e5
- (void)rollback;	// 0x313bc0e9
- (BOOL)saveCalendar:(id)calendar commit:(BOOL)commit error:(id *)error;	// 0x313b95e5
- (BOOL)saveCalendar:(id)calendar error:(id *)error;	// 0x313b95a5
- (BOOL)saveEvent:(id)event span:(int)span commit:(BOOL)commit error:(id *)error;	// 0x3138b135
- (BOOL)saveEvent:(id)event span:(int)span error:(id *)error;	// 0x3138b111
- (BOOL)saveReminder:(id)reminder commit:(BOOL)commit error:(id *)error;	// 0x31393881
- (BOOL)saveReminder:(id)reminder error:(id *)error;	// 0x31394ce1
- (BOOL)saveSource:(id)source error:(id *)error;	// 0x313b90a9
- (int)sequenceNumber;	// 0x313b804d
- (unsigned)serverPort;	// 0x31375585
// declared property setter: - (void)setCalendarQueue:(dispatch_queue_s *)queue;	// 0x313bded9
// declared property setter: - (void)setDatabase:(id)database;	// 0x313bddfd
// declared property setter: - (void)setDbChangedQueue:(dispatch_queue_s *)queue;	// 0x313bdf39
// declared property setter: - (void)setDefaultAllDayAlarmOffset:(id)offset;	// 0x313bdd09
- (void)setDefaultCalendarForNewEvents:(id)newEvents;	// 0x313bac35
// converted property setter: - (void)setDefaultCalendarForNewTasks:(id)newTasks;	// 0x313bac99
// declared property setter: - (void)setDefaultTimedAlarmOffset:(id)offset;	// 0x313bdcc5
// declared property setter: - (void)setDeletedObjects:(id)objects;	// 0x313bddbd
- (void)setEventsAlertedAndSave:(id)save;	// 0x31376bb5
// declared property setter: - (void)setFlags:(unsigned long)flags;	// 0x313bde31
// declared property setter: - (void)setInsertedObjects:(id)objects;	// 0x313bdd9d
// declared property setter: - (void)setObjectsPendingCommit:(id)commit;	// 0x313bdeb9
// declared property setter: - (void)setPublicRegisteredObjects:(id)objects;	// 0x313bdd7d
// declared property setter: - (void)setRegisteredObjects:(id)objects;	// 0x313bdd5d
// declared property setter: - (void)setRegisteredQueue:(dispatch_queue_s *)queue;	// 0x313bdef9
// declared property setter: - (void)setTimeZone:(id)zone;	// 0x313797f1
// declared property setter: - (void)setUnsavedChangesQueue:(dispatch_queue_s *)queue;	// 0x313bdf19
// declared property setter: - (void)setUpdatedObjects:(id)objects;	// 0x313bdddd
// declared property setter: - (void)set_calendars:(id)calendars;	// 0x313bde51
// declared property setter: - (void)set_sources:(id)sources;	// 0x313bde85
- (id)sourceWithIdentifier:(id)identifier;	// 0x313808e5
// converted property getter: - (id)sources;	// 0x31377161
// declared property getter: - (id)timeZone;	// 0x31375435
- (int)unacknowledgedEventCount;	// 0x313bb2c9
- (int)unreadEventCount;	// 0x31375a29
// declared property getter: - (dispatch_queue_s *)unsavedChangesQueue;	// 0x313bdf09
// declared property getter: - (id)updatedObjects;	// 0x313bddcd
@end

