/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/DataAccess.framework/Frameworks/DAEAS.framework/DAEAS
 */

#import "ASParsingAcceptingTopLevelLeaves.h"
#import "ASEvent.h"
#import "NSCoding.h"

@class NSDate, NSNumber, ASEmailItem, NSString, NSMutableDictionary;

@interface ASMeetingRequest : ASEvent <ASParsingAcceptingTopLevelLeaves, NSCoding> {
	NSNumber *_instanceType;	// 172 = 0xac
	NSDate *_recurrenceId;	// 176 = 0xb0
	NSMutableDictionary *_placeHolder;	// 180 = 0xb4
	int _meetingClassType;	// 184 = 0xb8
	ASEmailItem *_parentEmailItem;	// 188 = 0xbc
	NSString *_cachedParentFolderId;	// 192 = 0xc0
	NSString *_cachedParentServerId;	// 196 = 0xc4
}
@property(retain) NSString *cachedParentFolderId;	// G=0x3158f359; S=0x3158f391; converted property
@property(retain) NSString *cachedParentServerId;	// G=0x3158f3d5; S=0x3158f40d; converted property
@property(retain) id exceptionDate;	// G=0x3158ee35; S=0x3158ee45; converted property
@property(retain) NSNumber *instanceType;	// G=0x3158f241; S=0x3158f279; converted property
@property(assign) int meetingClassType;	// G=0x3158f339; S=0x3158f349; converted property
@property(retain) NSDate *recurrenceId;	// G=0x3158f2bd; S=0x3158f2f5; converted property
+ (BOOL)acceptsTopLevelLeaves;	// 0x3158cf65
+ (BOOL)frontingBasicTypes;	// 0x3158d061
+ (BOOL)notifyOfUnknownTokens;	// 0x3158d0b5
+ (BOOL)parsingLeafNode;	// 0x3158cfb9
+ (BOOL)parsingWithSubItems;	// 0x3158d00d
- (id)init;	// 0x3158e929
- (id)initWithCoder:(id)coder;	// 0x3158eec1
- (BOOL)_bailIfNotNewestDataForAccount:(id)account;	// 0x3158df19
- (void)_determineSelfnessWithLocalEvent:(void *)localEvent forAccount:(id)account;	// 0x3158d631
- (void)_setReminderSecsBefore:(id)before;	// 0x3158ea15
- (void)applyPlaceHolder;	// 0x3158d109
- (id)asParseRules;	// 0x3158d1c5
- (BOOL)cachedOrganizerIsSelfWithAccount:(id)account;	// 0x3158f205
// converted property getter: - (id)cachedParentFolderId;	// 0x3158f359
// converted property getter: - (id)cachedParentServerId;	// 0x3158f3d5
- (void)clearPlaceHolder;	// 0x3158d129
- (void)dealloc;	// 0x3158e979
- (id)description;	// 0x3158e8b9
- (void)encodeWithCoder:(id)coder;	// 0x3158f08d
// converted property getter: - (id)exceptionDate;	// 0x3158ee35
// converted property getter: - (id)instanceType;	// 0x3158f241
// converted property getter: - (int)meetingClassType;	// 0x3158f339
- (void)parseASParseContext:(id)context root:(id)root parent:(id)parent callbackDict:(id)dict streamCallbackDict:(id)dict5 account:(id)account;	// 0x3158e811
- (void)postProcessApplicationData;	// 0x3158d6d5
// converted property getter: - (id)recurrenceId;	// 0x3158f2bd
- (BOOL)saveToCalendarWithExistingRecord:(void *)existingRecord intoCalendar:(void *)calendar shouldMergeProperties:(BOOL)properties outMergeDidChooseLocalProperties:(BOOL *)outMerge account:(id)account;	// 0x3158df6d
// converted property setter: - (void)setCachedParentFolderId:(id)anId;	// 0x3158f391
// converted property setter: - (void)setCachedParentServerId:(id)anId;	// 0x3158f40d
- (void)setDTStamp:(id)stamp;	// 0x3158ee55
// converted property setter: - (void)setExceptionDate:(id)date;	// 0x3158ee45
// converted property setter: - (void)setInstanceType:(id)type;	// 0x3158f279
// converted property setter: - (void)setMeetingClassType:(int)type;	// 0x3158f349
- (void)setObject:(id)object forDCCPT:(int)dccpt;	// 0x3158d155
- (void)setOrganizer:(id)organizer;	// 0x3158ed99
// converted property setter: - (void)setRecurrenceId:(id)anId;	// 0x3158f2f5
- (BOOL)shouldUseInMemoryAttendeesForAccount:(id)account numExistingAttendees:(int)attendees;	// 0x3158e4a5
- (void)takeValuesFromParentEmailForAccount:(id)account;	// 0x3158ea7d
- (BOOL)writeInviteToCalDBCreateAsRejected:(BOOL)calDBCreateAsRejected defaultCalendar:(void *)calendar account:(id)account;	// 0x3158e4dd
@end

