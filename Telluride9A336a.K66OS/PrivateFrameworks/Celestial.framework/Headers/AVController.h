/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/Celestial.framework/Celestial
 */

#import "Celestial-Structs.h"
#import <NSObject.h> // Unknown library


@interface AVController : NSObject {
@private
	AVControllerPrivate *_priv;	// 4 = 0x4
}
@property(assign) double currentTime;	// G=0x36bc8d89; S=0x36bde001; converted property
@property(assign) id delegate;	// G=0x36bdc231; S=0x36bc8835; converted property
@property(assign) BOOL muted;	// G=0x36bddee9; S=0x36bdde49; converted property
@property(retain) id outputQTESFilePath;	// G=0x36bcd399; S=0x36bdddb9; converted property
@property(retain) id queue;	// G=0x36bdc1a5; S=0x36bc5ed9; converted property
@property(retain) id queueFeeder;	// G=0x36bdc1b9; S=0x36bd09d9; converted property
@property(assign) BOOL shouldDisplayClosedCaptions;	// G=0x36bdc21d; S=0x36bc892d; converted property
@property(assign) BOOL vibrationEnabled;	// G=0x36bdc049; S=0x36bdc061; converted property
@property(retain) id vibrationPattern;	// G=0x36bdc139; S=0x36bdc0b9; converted property
@property(assign) OpaqueFigVisualContext *visualContext;	// G=0x36bdc1f5; S=0x36bddde9; converted property
@property(assign) float volume;	// G=0x36bc87d1; S=0x36bd0dad; converted property
+ (id)avController;	// 0x36bdc381
+ (id)avControllerWithQueue:(id)queue error:(id *)error;	// 0x36bdc341
+ (id)compatibleAudioRouteForRoute:(id)route;	// 0x36bdc46d
+ (id)convertFigTimeDictionaryToTimeIntervalWithKey:(id)key stringURLToNSURLWithKey:(id)key2 inDictionaries:(id)dictionaries;	// 0x36bdc245
+ (BOOL)isNetworkSupportedPath:(id)path;	// 0x36bcfb55
+ (BOOL)isSupportedFileExtension:(id)extension;	// 0x36bdc3bd
+ (BOOL)isSupportedMimeType:(id)type;	// 0x36bdc415
+ (void)setEnableNetworkMode:(BOOL)mode;	// 0x36bd0e31
- (id)init;	// 0x36bc58d9
- (id)initForStreaming;	// 0x36bdeb89
- (id)initWithError:(id *)error;	// 0x36bc5d21
- (id)initWithQueue:(id)queue error:(id *)error;	// 0x36bc58ed
- (id)initWithQueue:(id)queue fmpType:(unsigned)type error:(id *)error;	// 0x36bc5921
- (id)_figPlayerNotifications;	// 0x36bdd1f1
- (BOOL)activate:(id *)activate;	// 0x36bde07d
- (id)addNextFeederItemToQueue;	// 0x36bc90a1
- (void)applyDesiredRepeatMode;	// 0x36bdd43d
- (id)attributeForKey:(id)key;	// 0x36bc7fc5
- (void)avPlaybackQueueCurrentItemChangedNotification:(id)notification;	// 0x36bc669d
- (BOOL)beginInterruption:(id *)interruption;	// 0x36bde1b5
- (BOOL)beginRepeatGap;	// 0x36bd1269
- (id)bookmarkGroupIDForAVItem:(id)avitem;	// 0x36bcad05
- (double)bookmarkTimeForAVItem:(id)avitem;	// 0x36bcad29
- (BOOL)canBeginInterruption;	// 0x36bde141
- (void)cancelAllCGImageRequests;	// 0x36bdda95
- (void)cancelContinueAfterRepeatGap;	// 0x36bccb0d
- (void)checkQueueSpace;	// 0x36bc8ff9
- (void)continueAfterRepeatGap;	// 0x36bde455
- (long)copyImageForTime:(CVBufferRef *)time time:(const XXStruct_pwHToB *)time2;	// 0x36bdc19d
- (OpaqueFigPlaybackItem *)createItemWithURL:(id)url flags:(unsigned long)flags error:(int *)error;	// 0x36bcd23d
- (OpaqueFigPlaybackItem *)currentFPItem;	// 0x36bc8e31
- (id)currentItem;	// 0x36bc8e51
- (void)currentItemHasChanged:(id)changed;	// 0x36bcb4f1
- (void)currentItemWillChangeToItem:(id)currentItem oldItemCurrentTime:(double)time;	// 0x36bcb085
// converted property getter: - (double)currentTime;	// 0x36bc8d89
- (void)dealloc;	// 0x36bd6cd1
// converted property getter: - (id)delegate;	// 0x36bdc231
- (void)dequeueDeadItem;	// 0x36bdcd89
- (void)dequeueFirstItem;	// 0x36bcfef1
- (void)endInterruptionWithStatus:(id)status;	// 0x36bde025
- (void)ensurePlaybackQueueImmed;	// 0x36bdcea1
- (int)eqPreset;	// 0x36bdc1e1
- (id)errorWithDescription:(id)description code:(long)code;	// 0x36bde279
- (void)feederInvalidatedWithCurrentItemMoved:(id)currentItemMoved;	// 0x36bde469
- (void)feederRangeWasInserted:(id)inserted;	// 0x36bde8d1
- (void)feederRangeWasRemoved:(id)removed;	// 0x36bde625
- (void)figPlayerNotificationHandler:(id)handler;	// 0x36bdc571
- (void)fmpEffectiveVolumeDidChange;	// 0x36bdd979
- (void)fpItemNotification:(id)notification sender:(id)sender;	// 0x36bcb959
- (CGImageRef)grabCGImageAtTime:(double)time withTimeOptions:(int)timeOptions withImageOptions:(id)imageOptions actualTime:(double *)time4;	// 0x36bd67f9
- (BOOL)havePlayedCurrentItem;	// 0x36bdc1cd
- (unsigned)indexOfCurrentQueueFeederItem;	// 0x36bcfc55
- (BOOL)isCurrentItemReady;	// 0x36bdcec1
- (BOOL)isNewImageAvailableForTime:(const XXStruct_pwHToB *)time willNeverBeAvailable:(BOOL *)available;	// 0x36bdc199
- (BOOL)isValid;	// 0x36bdd34d
- (void)itemHasFinishedPlayingNotification:(id)notification;	// 0x36bd11bd
- (id)lkLayer;	// 0x36bdc209
- (void)logPerformanceDataForCurrentItem;	// 0x36bdd079
- (void)makeCurrentItemReady;	// 0x36bccb4d
- (void)makeError:(id *)error withDescription:(id)description code:(long)code;	// 0x36bd0999
// converted property getter: - (BOOL)muted;	// 0x36bddee9
- (BOOL)okToNotifyFromThisThread;	// 0x36bcb3b9
// converted property getter: - (id)outputQTESFilePath;	// 0x36bcd399
- (void)pause;	// 0x36bcfc41
- (BOOL)play:(id *)play;	// 0x36bde439
- (BOOL)playNextItem:(id *)item;	// 0x36bcfe81
- (AVControllerPrivate *)privateStorage;	// 0x36bdc189
// converted property getter: - (id)queue;	// 0x36bdc1a5
// converted property getter: - (id)queueFeeder;	// 0x36bdc1b9
- (float)rate;	// 0x36bcb651
- (void)rateDidChangeToRate:(float)rate;	// 0x36bceb11
- (void)registerTimeMarkerObserver:(id)observer forItem:(id)item times:(id)times context:(id)context;	// 0x36bdcf11
- (void)removeObserver:(id)observer fromTMOArray:(id)tmoarray;	// 0x36bd0645
- (int)repeatMode;	// 0x36bd09c5
- (void)requestAsyncCGImagesAtTimes:(id)times requestIDs:(id)ids withTimeOptions:(int)timeOptions withImageOptions:(id)imageOptions;	// 0x36bddacd
- (void)requestAsyncCGImagesAtTimes:(id)times withTimeOptions:(int)timeOptions withImageOptions:(id)imageOptions;	// 0x36bddccd
- (BOOL)resumePlayback:(double)playback error:(id *)error;	// 0x36bde311
- (void)safeSubtitleCommandPosted:(void *)posted;	// 0x36bdd3b5
- (void)scheduleQueueSpaceCheck;	// 0x36bcc939
- (void)scheduleUpdateTimeMarkerObservations;	// 0x36bcb6ad
- (void)seekToDate:(id)date;	// 0x36bddfb5
- (void)setAVItemClass:(Class)aClass;	// 0x36bdc175
- (void)setApplyVideoTrackMatrix;	// 0x36bddcf1
- (BOOL)setAttribute:(id)attribute forKey:(id)key error:(id *)error;	// 0x36bc6955
// converted property setter: - (void)setCurrentTime:(double)time;	// 0x36bde001
- (void)setCurrentTime:(double)time options:(int)options;	// 0x36bd0a91
// converted property setter: - (void)setDelegate:(id)delegate;	// 0x36bc8835
- (void)setEQPreset:(int)preset;	// 0x36bc887d
- (BOOL)setIndexOfCurrentQueueFeederItem:(unsigned)currentQueueFeederItem error:(id *)error;	// 0x36bcfcc1
- (void)setLayer:(id)layer;	// 0x36bc8a31
// converted property setter: - (void)setMuted:(BOOL)muted;	// 0x36bdde49
// converted property setter: - (void)setOutputQTESFilePath:(id)path;	// 0x36bdddb9
- (BOOL)setPickedRouteWithPassword:(id)password withPassword:(id)password2;	// 0x36bdcdb9
// converted property setter: - (void)setQueue:(id)queue;	// 0x36bc5ed9
// converted property setter: - (void)setQueueFeeder:(id)feeder;	// 0x36bd09d9
- (void)setQueueFeeder:(id)feeder withIndex:(int)index;	// 0x36bc8ad1
- (BOOL)setRate:(float)rate error:(id *)error;	// 0x36bcc9c1
- (BOOL)setRepeatMode:(int)mode;	// 0x36bc8aa1
// converted property setter: - (void)setShouldDisplayClosedCaptions:(BOOL)displayClosedCaptions;	// 0x36bc892d
- (void)setSubtitleRecipient:(id)recipient;	// 0x36bc88e9
// converted property setter: - (void)setVibrationEnabled:(BOOL)enabled;	// 0x36bdc061
// converted property setter: - (void)setVibrationPattern:(id)pattern;	// 0x36bdc0b9
// converted property setter: - (void)setVisualContext:(OpaqueFigVisualContext *)context;	// 0x36bddde9
// converted property setter: - (void)setVolume:(float)volume;	// 0x36bd0dad
- (BOOL)shouldBeginPlayingItem:(id)item error:(id *)error;	// 0x36bcde69
// converted property getter: - (BOOL)shouldDisplayClosedCaptions;	// 0x36bdc21d
- (void)stepByCount:(int)count;	// 0x36bddf85
- (void)unregisterTimeMarkerObserver:(id)observer forItem:(id)item;	// 0x36bd04c1
- (long)updateActionAtEnd;	// 0x36bc8941
- (void)updateTimeMarkerObservations;	// 0x36bce071
// converted property getter: - (BOOL)vibrationEnabled;	// 0x36bdc049
// converted property getter: - (id)vibrationPattern;	// 0x36bdc139
// converted property getter: - (OpaqueFigVisualContext *)visualContext;	// 0x36bdc1f5
// converted property getter: - (float)volume;	// 0x36bc87d1
@end

