/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/DataAccess.framework/Frameworks/DACalDAV.framework/DACalDAV
 */

#import "CoreDAVAccountInfoProvider.h"
#import "CalDAVPrincipal.h"
#import <NSObject.h> // Unknown library

@class NSString, MobileCalDAVAccount, NSSet, NSURL, NSMutableDictionary, NSDictionary, NSNumber, CalDAVRefreshContext, NSDateComponents;
@protocol CalDAVAccount, CoreDAVTaskManager;

@interface MobileCalDAVPrincipal : NSObject <CoreDAVAccountInfoProvider, CalDAVPrincipal> {
	NSString *_uid;	// 4 = 0x4
	MobileCalDAVAccount *_account;	// 8 = 0x8
	NSSet *_calendarUserAddresses;	// 12 = 0xc
	NSMutableDictionary *_calendarUserAddressesPerCalendar;	// 16 = 0x10
	NSURL *_preferredCalendarUserAddress;	// 20 = 0x14
	NSString *_fullName;	// 24 = 0x18
	NSURL *_calendarHomeURL;	// 28 = 0x1c
	NSURL *_principalURL;	// 32 = 0x20
	NSURL *_defaultCalendarURL;	// 36 = 0x24
	NSURL *_notificationCollectionURL;	// 40 = 0x28
	NSString *_notificationCollectionCTag;	// 44 = 0x2c
	NSURL *_inboxURL;	// 48 = 0x30
	NSString *_inboxCTag;	// 52 = 0x34
	NSURL *_outboxURL;	// 56 = 0x38
	NSURL *_dropBoxURL;	// 60 = 0x3c
	NSString *_notificationURLString;	// 64 = 0x40
	NSDictionary *_pushTransports;	// 68 = 0x44
	NSString *_calendarHomePushKey;	// 72 = 0x48
	NSString *_XMPPServer;	// 76 = 0x4c
	NSNumber *_quotaFreeBytes;	// 80 = 0x50
	BOOL _isDelegate;	// 84 = 0x54
	BOOL _isWritable;	// 85 = 0x55
	BOOL _isEnabled;	// 86 = 0x56
	BOOL _isExpandPropertyReportSupported;	// 87 = 0x57
	BOOL _supportsFreebusy;	// 88 = 0x58
	BOOL _shouldUpdatePushDelegate;	// 89 = 0x59
	BOOL _isDirty;	// 90 = 0x5a
	BOOL _calendarsAreDirty;	// 91 = 0x5b
	int _calendarChangeIndex;	// 92 = 0x5c
}
@property(readonly, assign) NSString *APSEnv;	// G=0x360760e9; 
@property(readonly, assign) NSURL *APSSubscriptionURL;	// G=0x36076069; 
@property(readonly, assign) NSString *APSTopic;	// G=0x36076025; 
@property(retain) NSString *XMPPServer;	// G=0x36075019; S=0x36075029; 
@property(readonly, assign) id<CalDAVAccount> account;	// G=0x3607448d; 
@property(retain) NSString *calendarHomePushKey;	// G=0x36074f95; S=0x36074fa5; 
@property(retain) NSURL *calendarHomeURL;	// G=0x360748c1; S=0x360748e1; 
@property(retain) NSSet *calendarUserAddresses;	// G=0x36074795; S=0x360747a5; 
@property(readonly, assign) NSSet *calendars;	// G=0x36075741; 
@property(assign) BOOL calendarsAreDirty;	// G=0x36075f59; S=0x36075e9d; @synthesize=_calendarsAreDirty
@property(retain) NSURL *defaultCalendarURL;	// G=0x36074a11; S=0x36074a31; 
@property(readonly, assign) NSSet *deletedCalendarURLs;	// G=0x36075761; 
@property(retain) NSURL *dropBoxURL;	// G=0x36074db9; S=0x36074dd9; 
@property(readonly, assign) NSDateComponents *eventFilterEndDate;	// G=0x3607557d; 
@property(readonly, assign) NSDateComponents *eventFilterStartDate;	// G=0x36075521; 
@property(retain) NSString *fullName;	// G=0x3607483d; S=0x3607484d; 
@property(retain) NSString *inboxCTag;	// G=0x36074c8d; S=0x36074c9d; 
@property(retain) NSURL *inboxURL;	// G=0x36074be5; S=0x36074c05; 
@property(assign) BOOL isDelegate;	// G=0x3607510d; S=0x3607511d; 
@property(assign) BOOL isDirty;	// G=0x36076cb9; S=0x36076cc9; @synthesize=_isDirty
@property(assign) BOOL isEnabled;	// G=0x3607519d; S=0x360751ad; 
@property(readonly, assign) BOOL isEnabledForEvents;	// G=0x36075209; 
@property(readonly, assign) BOOL isEnabledForTodos;	// G=0x36075265; 
@property(assign) BOOL isExpandPropertyReportSupported;	// G=0x36075691; S=0x360756a1; 
@property(readonly, assign) BOOL isMergeSync;	// G=0x360751e5; 
@property(assign) BOOL isWritable;	// G=0x36075155; S=0x36075165; 
@property(retain) NSString *notificationCollectionCTag;	// G=0x36074b61; S=0x36074b71; 
@property(retain) NSURL *notificationCollectionURL;	// G=0x36074ab9; S=0x36074ad9; 
@property(retain) NSString *notificationURLString;	// G=0x36074e61; S=0x36074e71; 
@property(retain) NSURL *outboxURL;	// G=0x36074d11; S=0x36074d31; 
@property(readonly, assign) NSURL *preferredCalendarUserAddress;	// G=0x36076459; 
@property(retain) NSURL *principalURL;	// G=0x36074969; S=0x36074989; 
@property(readonly, assign) NSSet *pushKeys;	// G=0x360761dd; 
@property(retain) NSDictionary *pushTransports;	// G=0x36074ef5; S=0x36074f05; 
@property(retain) NSNumber *quotaFreeBytes;	// G=0x3607509d; S=0x360750ad; 
@property(readonly, assign) CalDAVRefreshContext *refreshContext;	// G=0x36075721; 
@property(assign) BOOL shouldUpdatePushDelegate;	// G=0x36076c99; S=0x36076ca9; @synthesize=_shouldUpdatePushDelegate
@property(readonly, assign) BOOL supportsExtendedCalendarQuery;	// G=0x360752c1; 
@property(assign) BOOL supportsFreebusy;	// G=0x360756d9; S=0x360756e9; 
@property(readonly, assign) id<CoreDAVTaskManager> taskManager;	// G=0x360766c9; 
@property(readonly, assign) NSDateComponents *todoFilterEndDate;	// G=0x3607564d; 
@property(readonly, assign) NSDateComponents *todoFilterStartDate;	// G=0x360755f1; 
@property(readonly, assign) NSString *uid;	// G=0x36076c89; @synthesize=_uid
+ (id)_preferredCalendarUserAddressFromAddresses:(id)addresses;	// 0x360762dd
+ (BOOL)compareAddressURL:(id)url localString:(id)string;	// 0x36072cc5
- (id)init;	// 0x36072e9d
- (id)initWithConfiguration:(id)configuration account:(id)account;	// 0x36073075
// declared property getter: - (id)APSEnv;	// 0x360760e9
// declared property getter: - (id)APSSubscriptionURL;	// 0x36076069
// declared property getter: - (id)APSTopic;	// 0x36076025
// declared property getter: - (id)XMPPServer;	// 0x36075019
- (id)_addUsernameIfNeeded:(id)needed;	// 0x3607442d
- (id)_sharedSyncEndDate;	// 0x360752f5
- (id)_startDateFromDaysToSync:(int)sync;	// 0x360753f5
- (BOOL)_userAddressSet:(id)set isEqualToSet:(id)set2;	// 0x360744ad
// declared property getter: - (id)account;	// 0x3607448d
- (id)accountID;	// 0x36076879
- (id)additionalHeaderValues;	// 0x36076995
// declared property getter: - (id)calendarHomePushKey;	// 0x36074f95
// declared property getter: - (id)calendarHomeURL;	// 0x360748c1
- (id)calendarOfType:(int)type atURL:(id)url withOptions:(id)options;	// 0x36075bc9
- (BOOL)calendarUserAddressIsEquivalentToURL:(id)url;	// 0x360765e5
// declared property getter: - (id)calendarUserAddresses;	// 0x36074795
- (id)calendarUserAddressesForCalendar:(id)calendar;	// 0x36075dbd
// declared property getter: - (id)calendars;	// 0x36075741
// declared property getter: - (BOOL)calendarsAreDirty;	// 0x36075f59
- (BOOL)clearCalendarChanges;	// 0x36075b75
- (id)configuration;	// 0x36073ae9
- (void)dealloc;	// 0x36072eb1
// declared property getter: - (id)defaultCalendarURL;	// 0x36074a11
- (id)defaultEventCalendarTitle;	// 0x36075d75
- (id)defaultTodoCalendarTitle;	// 0x36075d81
// declared property getter: - (id)deletedCalendarURLs;	// 0x36075761
// declared property getter: - (id)dropBoxURL;	// 0x36074db9
// declared property getter: - (id)eventFilterEndDate;	// 0x3607557d
// declared property getter: - (id)eventFilterStartDate;	// 0x36075521
// declared property getter: - (id)fullName;	// 0x3607483d
- (BOOL)handleCertificateError:(id)error;	// 0x36076ad5
- (BOOL)handleTrustChallenge:(id)challenge;	// 0x36076aad
- (BOOL)hasCalendarUserAddress:(id)address;	// 0x360764d5
- (id)host;	// 0x36076709
- (id)identityPersist;	// 0x36076859
// declared property getter: - (id)inboxCTag;	// 0x36074c8d
// declared property getter: - (id)inboxURL;	// 0x36074be5
// declared property getter: - (BOOL)isDelegate;	// 0x3607510d
// declared property getter: - (BOOL)isDirty;	// 0x36076cb9
// declared property getter: - (BOOL)isEnabled;	// 0x3607519d
// declared property getter: - (BOOL)isEnabledForEvents;	// 0x36075209
// declared property getter: - (BOOL)isEnabledForTodos;	// 0x36075265
// declared property getter: - (BOOL)isExpandPropertyReportSupported;	// 0x36075691
// declared property getter: - (BOOL)isMergeSync;	// 0x360751e5
// declared property getter: - (BOOL)isWritable;	// 0x36075155
- (void)noteFailedNetworkRequest;	// 0x36076bd9
- (void)noteFailedProtocolRequest;	// 0x36076c11
- (void)noteHomeSetOnDifferentHost:(id)host;	// 0x36076749
- (void)noteSuccessfulRequestWithNumDownloadedElements:(int)numDownloadedElements;	// 0x36076b9d
- (void)noteTimeSpentInNetworking:(double)networking;	// 0x36076c49
// declared property getter: - (id)notificationCollectionCTag;	// 0x36074b61
// declared property getter: - (id)notificationCollectionURL;	// 0x36074ab9
// declared property getter: - (id)notificationURLString;	// 0x36074e61
// declared property getter: - (id)outboxURL;	// 0x36074d11
- (id)password;	// 0x36076839
- (int)port;	// 0x36076729
// declared property getter: - (id)preferredCalendarUserAddress;	// 0x36076459
- (void)prepareCalendarsForSyncWithCompletionBlock:(id)completionBlock;	// 0x36075879
// declared property getter: - (id)principalURL;	// 0x36074969
- (void)promptUserForNewCoreDAVPasswordWithCompletionBlock:(id)completionBlock;	// 0x36076a0d
// declared property getter: - (id)pushKeys;	// 0x360761dd
// declared property getter: - (id)pushTransports;	// 0x36074ef5
// declared property getter: - (id)quotaFreeBytes;	// 0x3607509d
// declared property getter: - (id)refreshContext;	// 0x36075721
- (void)removeCalendar:(id)calendar;	// 0x36075d8d
- (id)scheme;	// 0x360766e9
- (id)serverComplianceClasses;	// 0x36076899
- (id)serverRoot;	// 0x36076815
- (void)setAccount:(id)account;	// 0x3607449d
// declared property setter: - (void)setCalendarHomePushKey:(id)key;	// 0x36074fa5
// declared property setter: - (void)setCalendarHomeURL:(id)url;	// 0x360748e1
// declared property setter: - (void)setCalendarUserAddresses:(id)addresses;	// 0x360747a5
- (void)setCalendarUserAddresses:(id)addresses forCalendar:(id)calendar;	// 0x36075df9
// declared property setter: - (void)setCalendarsAreDirty:(BOOL)dirty;	// 0x36075e9d
// declared property setter: - (void)setDefaultCalendarURL:(id)url;	// 0x36074a31
// declared property setter: - (void)setDropBoxURL:(id)url;	// 0x36074dd9
// declared property setter: - (void)setFullName:(id)name;	// 0x3607484d
// declared property setter: - (void)setInboxCTag:(id)tag;	// 0x36074c9d
// declared property setter: - (void)setInboxURL:(id)url;	// 0x36074c05
// declared property setter: - (void)setIsDelegate:(BOOL)delegate;	// 0x3607511d
// declared property setter: - (void)setIsDirty:(BOOL)dirty;	// 0x36076cc9
// declared property setter: - (void)setIsEnabled:(BOOL)enabled;	// 0x360751ad
// declared property setter: - (void)setIsExpandPropertyReportSupported:(BOOL)supported;	// 0x360756a1
// declared property setter: - (void)setIsWritable:(BOOL)writable;	// 0x36075165
// declared property setter: - (void)setNotificationCollectionCTag:(id)tag;	// 0x36074b71
// declared property setter: - (void)setNotificationCollectionURL:(id)url;	// 0x36074ad9
// declared property setter: - (void)setNotificationURLString:(id)string;	// 0x36074e71
// declared property setter: - (void)setOutboxURL:(id)url;	// 0x36074d31
// declared property setter: - (void)setPrincipalURL:(id)url;	// 0x36074989
// declared property setter: - (void)setPushTransports:(id)transports;	// 0x36074f05
// declared property setter: - (void)setQuotaFreeBytes:(id)bytes;	// 0x360750ad
// declared property setter: - (void)setShouldUpdatePushDelegate:(BOOL)updatePushDelegate;	// 0x36076ca9
// declared property setter: - (void)setSupportsFreebusy:(BOOL)freebusy;	// 0x360756e9
// declared property setter: - (void)setXMPPServer:(id)server;	// 0x36075029
- (BOOL)shouldCompressRequests;	// 0x36076b45
- (BOOL)shouldFailAllTasks;	// 0x36076ad9
- (BOOL)shouldHandleHTTPCookiesForURL:(id)url;	// 0x36076add
- (BOOL)shouldSendClientInfoHeaderForURL:(id)url;	// 0x36076ae1
// declared property getter: - (BOOL)shouldUpdatePushDelegate;	// 0x36076c99
- (BOOL)shouldUseOpportunisticSockets;	// 0x36076b79
// declared property getter: - (BOOL)supportsExtendedCalendarQuery;	// 0x360752c1
// declared property getter: - (BOOL)supportsFreebusy;	// 0x360756d9
// declared property getter: - (id)taskManager;	// 0x360766c9
// declared property getter: - (id)todoFilterEndDate;	// 0x3607564d
// declared property getter: - (id)todoFilterStartDate;	// 0x360755f1
// declared property getter: - (id)uid;	// 0x36076c89
- (id)user;	// 0x36076819
- (id)userAgentHeader;	// 0x3607689d
@end

