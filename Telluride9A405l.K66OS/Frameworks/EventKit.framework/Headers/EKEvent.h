/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/EventKit.framework/EventKit
 */

#import "EKCalendarItem.h"
#import "EventKit-Structs.h"

@class EKRecurrenceRule, NSString, EKParticipant, NSNumber, NSDate, EKCalendarDate;

@interface EKEvent : EKCalendarItem {
@private
	EKCalendarDate *_occurrenceStartDate;	// 4 = 0x4
	EKCalendarDate *_occurrenceEndDate;	// 8 = 0x8
	BOOL _occurrenceIsAllDay;	// 12 = 0xc
	EKCalendarDate *_originalOccurrenceStartDate;	// 16 = 0x10
	EKCalendarDate *_originalOccurrenceEndDate;	// 20 = 0x14
	NSNumber *_originalOccurrenceIsAllDay;	// 24 = 0x18
}
@property(assign, nonatomic, getter=isAllDay) BOOL allDay;	// G=0x331c93f5; S=0x331d2d75; 
@property(assign, nonatomic) int availability;	// G=0x3320cbc5; S=0x3320cc19; 
@property(readonly, assign, nonatomic) int birthdayPersonID;	// G=0x3320ca9d; 
@property(copy, nonatomic) NSDate *endDate;	// G=0x331c9631; S=0x331d32e1; 
@property(readonly, assign, nonatomic) NSString *eventIdentifier;	// G=0x331d0c0d; 
@property(readonly, assign, nonatomic) BOOL isDetached;	// G=0x331d2b9d; 
@property(assign) unsigned modifiedProperties;	// G=0x3320c845; S=0x3320c879; converted property
@property(assign) BOOL needsOccurrenceCacheUpdate;	// G=0x3320c8bd; S=0x3320c8e1; converted property
@property(copy, nonatomic) EKCalendarDate *occurrenceEndDate;	// G=0x331c8c7d; S=0x331c93d1; @synthesize=_occurrenceEndDate
@property(assign, nonatomic) BOOL occurrenceIsAllDay;	// G=0x3320f265; S=0x331c8721; @synthesize=_occurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *occurrenceStartDate;	// G=0x331c93c1; S=0x331c86ad; @synthesize=_occurrenceStartDate
@property(readonly, assign, nonatomic) EKParticipant *organizer;	// G=0x331d0dcd; 
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate;	// G=0x331d3b89; S=0x331d3215; @synthesize=_originalOccurrenceEndDate
@property(copy, nonatomic) NSNumber *originalOccurrenceIsAllDay;	// G=0x331d3bb5; S=0x331d1cc1; @synthesize=_originalOccurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate;	// G=0x331d3b65; S=0x331d31f1; @synthesize=_originalOccurrenceStartDate
@property(assign) int participationStatus;	// G=0x331d1519; S=0x3320c925; converted property
@property(assign) unsigned readState;	// G=0x331d1615; S=0x3320ccb5; converted property
@property(retain, nonatomic) EKRecurrenceRule *recurrenceRule;	// G=0x3320cb15; S=0x3320cb61; 
@property(retain) id responseComment;	// G=0x3320cc7d; S=0x3320cc99; converted property
@property(copy, nonatomic) NSDate *startDate;	// G=0x331c9611; S=0x331d3035; 
@property(readonly, assign, nonatomic) int status;	// G=0x331caefd; 
+ (id)eventWithEventStore:(id)eventStore;	// 0x331d4355
- (id)init;	// 0x3320c3f5
- (id)initWithEventStore:(id)eventStore;	// 0x331d1665
- (id)initWithPersistentObject:(id)persistentObject;	// 0x3320c431
- (id)initWithPersistentObject:(id)persistentObject occurrenceDate:(id)date;	// 0x331c81c1
- (BOOL)_cancelWithSpan:(int)span error:(id *)error;	// 0x3320e569
- (BOOL)_checkStartDateConstraintAgainstDate:(XXStruct_lQVxyC)date timeZone:(id)zone error:(id *)error;	// 0x331d7295
- (BOOL)_deleteWithSpan:(int)span error:(id *)error;	// 0x331dd1f5
- (void)_detachWithStartDate:(id)startDate newStartDate:(id)date future:(BOOL)future;	// 0x3320e6ed
- (id)_effectiveTimeZone;	// 0x331d3239
- (BOOL)_isAllDay;	// 0x331c86d1
- (BOOL)_isInitialOccurrenceDate:(id)date;	// 0x331dd011
- (BOOL)_occurrenceExistsOnDate:(double)date timeZone:(id)zone;	// 0x3320e32d
- (int)_parentParticipationStatus;	// 0x3320ca5d
- (id)_persistentEvent;	// 0x331c8d39
- (void)_sendModifiedNote;	// 0x331d42c1
- (BOOL)_shouldCancelInsteadOfDeleteWithSpan:(int)span;	// 0x331dd0f5
- (BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(int)recurrenceInterval;	// 0x3320d639
- (BOOL)_validateDatesAndRecurrencesGivenSpan:(int)span error:(id *)error;	// 0x331d6e91
- (BOOL)_validateDurationConstrainedToRecurrenceInterval;	// 0x3320d479
- (int)alarmCount;	// 0x3320caed
- (BOOL)allowsAlarmModifications;	// 0x331d7391
- (BOOL)allowsCalendarModifications;	// 0x3320cffd
- (BOOL)allowsRecurrenceModifications;	// 0x331d2b19
- (id)attachments;	// 0x331d0cd9
- (int)attendeeCount;	// 0x3320cac5
- (id)attendees;	// 0x331d0e6d
// declared property getter: - (int)availability;	// 0x3320cbc5
// declared property getter: - (int)birthdayPersonID;	// 0x3320ca9d
- (id)birthdayTitleWithAddressBook:(void *)addressBook;	// 0x3320c68d
- (BOOL)canBeRespondedTo;	// 0x331d1295
- (BOOL)canDetachSingleOccurrence;	// 0x3320d099
- (BOOL)canMoveToCalendar:(id)calendar fromCalendar:(id)calendar2 error:(id *)error;	// 0x3320cdd1
- (BOOL)canSetAvailability;	// 0x3320d159
- (void)clearReadState;	// 0x3320ccf9
- (BOOL)commitWithSpan:(int)span error:(id *)error;	// 0x331d74c1
- (id)committedValueForKey:(id)key;	// 0x331d228d
- (int)compareStartDateWithEvent:(id)event;	// 0x331c9589
- (void)dealloc;	// 0x331d1e65
- (id)description;	// 0x3320d1d5
- (void)didCommit;	// 0x331db66d
- (id)dirtyPropertiesToSkip;	// 0x3320d315
- (double)duration;	// 0x331cc34d
- (id)endCalendarDate;	// 0x331c8c6d
// declared property getter: - (id)endDate;	// 0x331c9631
- (XXStruct_lQVxyC)endDateGr;	// 0x331cc2bd
- (XXStruct_lQVxyC)endDatePinnedForAllDay;	// 0x3320c7d1
// declared property getter: - (id)eventIdentifier;	// 0x331d0c0d
- (id)eventStore;	// 0x331cb15d
- (id)exportToICS;	// 0x3320c565
- (id)externalId;	// 0x3320d109
- (id)externalURL;	// 0x3320c445
- (BOOL)hasSelfAttendee;	// 0x3320d1a5
- (unsigned)hash;	// 0x331c9405
- (id)initialEndDate;	// 0x3320c6f1
- (id)initialStartDate;	// 0x3320c69d
// declared property getter: - (BOOL)isAllDay;	// 0x331c93f5
// declared property getter: - (BOOL)isDetached;	// 0x331d2b9d
- (BOOL)isDirtyIgnoringCalendar;	// 0x3320c5ed
- (BOOL)isEndDateDirty;	// 0x3320c5cd
- (BOOL)isEqual:(id)equal;	// 0x331c94b1
- (BOOL)isStartDateDirty;	// 0x3320c5ad
- (BOOL)isStatusDirty;	// 0x3320c58d
- (BOOL)isTentative;	// 0x3320cd2d
// converted property getter: - (unsigned)modifiedProperties;	// 0x3320c845
// converted property getter: - (BOOL)needsOccurrenceCacheUpdate;	// 0x3320c8bd
- (id)occurrenceDate;	// 0x331d29dd
// declared property getter: - (id)occurrenceEndDate;	// 0x331c8c7d
// declared property getter: - (BOOL)occurrenceIsAllDay;	// 0x3320f265
// declared property getter: - (id)occurrenceStartDate;	// 0x331c93c1
// declared property getter: - (id)organizer;	// 0x331d0dcd
// declared property getter: - (id)originalOccurrenceEndDate;	// 0x331d3b89
// declared property getter: - (id)originalOccurrenceIsAllDay;	// 0x331d3bb5
// declared property getter: - (id)originalOccurrenceStartDate;	// 0x331d3b65
// converted property getter: - (int)participationStatus;	// 0x331d1519
- (int)pendingParticipationStatus;	// 0x3320d0e1
// converted property getter: - (unsigned)readState;	// 0x331d1615
// declared property getter: - (id)recurrenceRule;	// 0x3320cb15
- (BOOL)refresh;	// 0x331d3c49
- (BOOL)removeWithSpan:(int)span error:(id *)error;	// 0x331dcf41
- (BOOL)requiresDetach;	// 0x331d6095
// converted property getter: - (id)responseComment;	// 0x3320cc7d
- (BOOL)responseMustApplyToAll;	// 0x3320d071
- (void)revert;	// 0x3320d371
- (void)rollback;	// 0x331d3619
// declared property setter: - (void)setAllDay:(BOOL)day;	// 0x331d2d75
// declared property setter: - (void)setAvailability:(int)availability;	// 0x3320cc19
// declared property setter: - (void)setEndDate:(id)date;	// 0x331d32e1
// converted property setter: - (void)setModifiedProperties:(unsigned)properties;	// 0x3320c879
// converted property setter: - (void)setNeedsOccurrenceCacheUpdate:(BOOL)update;	// 0x3320c8e1
// declared property setter: - (void)setOccurrenceEndDate:(id)date;	// 0x331c93d1
// declared property setter: - (void)setOccurrenceIsAllDay:(BOOL)day;	// 0x331c8721
// declared property setter: - (void)setOccurrenceStartDate:(id)date;	// 0x331c86ad
// declared property setter: - (void)setOriginalOccurrenceEndDate:(id)date;	// 0x331d3215
// declared property setter: - (void)setOriginalOccurrenceIsAllDay:(id)day;	// 0x331d1cc1
// declared property setter: - (void)setOriginalOccurrenceStartDate:(id)date;	// 0x331d31f1
// converted property setter: - (void)setParticipationStatus:(int)status;	// 0x3320c925
// converted property setter: - (void)setReadState:(unsigned)state;	// 0x3320ccb5
// declared property setter: - (void)setRecurrenceRule:(id)rule;	// 0x3320cb61
// converted property setter: - (void)setResponseComment:(id)comment;	// 0x3320cc99
// declared property setter: - (void)setStartDate:(id)date;	// 0x331d3035
- (void)setTimeZone:(id)zone;	// 0x331d1ce5
- (id)startCalendarDate;	// 0x331c8c5d
// declared property getter: - (id)startDate;	// 0x331c9611
- (XXStruct_lQVxyC)startDateGr;	// 0x331cc22d
- (XXStruct_lQVxyC)startDatePinnedForAllDay;	// 0x3320c769
// declared property getter: - (int)status;	// 0x331caefd
- (id)uniqueId;	// 0x3320d131
- (BOOL)validateWithSpan:(int)span error:(id *)error;	// 0x331d64f9
@end

