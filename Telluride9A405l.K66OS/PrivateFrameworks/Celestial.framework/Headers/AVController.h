/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/Celestial.framework/Celestial
 */

#import "Celestial-Structs.h"
#import <NSObject.h> // Unknown library


@interface AVController : NSObject {
@private
	AVControllerPrivate *_priv;	// 4 = 0x4
}
@property(assign) double currentTime;	// G=0x33901d89; S=0x33917001; converted property
@property(assign) id delegate;	// G=0x33915231; S=0x33901835; converted property
@property(assign) BOOL muted;	// G=0x33916ee9; S=0x33916e49; converted property
@property(retain) id outputQTESFilePath;	// G=0x33906399; S=0x33916db9; converted property
@property(retain) id queue;	// G=0x339151a5; S=0x338feed9; converted property
@property(retain) id queueFeeder;	// G=0x339151b9; S=0x339099d9; converted property
@property(assign) BOOL shouldDisplayClosedCaptions;	// G=0x3391521d; S=0x3390192d; converted property
@property(assign) BOOL vibrationEnabled;	// G=0x33915049; S=0x33915061; converted property
@property(retain) id vibrationPattern;	// G=0x33915139; S=0x339150b9; converted property
@property(assign) OpaqueFigVisualContext *visualContext;	// G=0x339151f5; S=0x33916de9; converted property
@property(assign) float volume;	// G=0x339017d1; S=0x33909dad; converted property
+ (id)avController;	// 0x33915381
+ (id)avControllerWithQueue:(id)queue error:(id *)error;	// 0x33915341
+ (id)compatibleAudioRouteForRoute:(id)route;	// 0x3391546d
+ (id)convertFigTimeDictionaryToTimeIntervalWithKey:(id)key stringURLToNSURLWithKey:(id)key2 inDictionaries:(id)dictionaries;	// 0x33915245
+ (BOOL)isNetworkSupportedPath:(id)path;	// 0x33908b55
+ (BOOL)isSupportedFileExtension:(id)extension;	// 0x339153bd
+ (BOOL)isSupportedMimeType:(id)type;	// 0x33915415
+ (void)setEnableNetworkMode:(BOOL)mode;	// 0x33909e31
- (id)init;	// 0x338fe8d9
- (id)initForStreaming;	// 0x33917b89
- (id)initWithError:(id *)error;	// 0x338fed21
- (id)initWithQueue:(id)queue error:(id *)error;	// 0x338fe8ed
- (id)initWithQueue:(id)queue fmpType:(unsigned)type error:(id *)error;	// 0x338fe921
- (id)_figPlayerNotifications;	// 0x339161f1
- (BOOL)activate:(id *)activate;	// 0x3391707d
- (id)addNextFeederItemToQueue;	// 0x339020a1
- (void)applyDesiredRepeatMode;	// 0x3391643d
- (id)attributeForKey:(id)key;	// 0x33900fc5
- (void)avPlaybackQueueCurrentItemChangedNotification:(id)notification;	// 0x338ff69d
- (BOOL)beginInterruption:(id *)interruption;	// 0x339171b5
- (BOOL)beginRepeatGap;	// 0x3390a269
- (id)bookmarkGroupIDForAVItem:(id)avitem;	// 0x33903d05
- (double)bookmarkTimeForAVItem:(id)avitem;	// 0x33903d29
- (BOOL)canBeginInterruption;	// 0x33917141
- (void)cancelAllCGImageRequests;	// 0x33916a95
- (void)cancelContinueAfterRepeatGap;	// 0x33905b0d
- (void)checkQueueSpace;	// 0x33901ff9
- (void)continueAfterRepeatGap;	// 0x33917455
- (long)copyImageForTime:(CVBufferRef *)time time:(const XXStruct_pwHToB *)time2;	// 0x3391519d
- (OpaqueFigPlaybackItem *)createItemWithURL:(id)url flags:(unsigned long)flags error:(int *)error;	// 0x3390623d
- (OpaqueFigPlaybackItem *)currentFPItem;	// 0x33901e31
- (id)currentItem;	// 0x33901e51
- (void)currentItemHasChanged:(id)changed;	// 0x339044f1
- (void)currentItemWillChangeToItem:(id)currentItem oldItemCurrentTime:(double)time;	// 0x33904085
// converted property getter: - (double)currentTime;	// 0x33901d89
- (void)dealloc;	// 0x3390fcd1
// converted property getter: - (id)delegate;	// 0x33915231
- (void)dequeueDeadItem;	// 0x33915d89
- (void)dequeueFirstItem;	// 0x33908ef1
- (void)endInterruptionWithStatus:(id)status;	// 0x33917025
- (void)ensurePlaybackQueueImmed;	// 0x33915ea1
- (int)eqPreset;	// 0x339151e1
- (id)errorWithDescription:(id)description code:(long)code;	// 0x33917279
- (void)feederInvalidatedWithCurrentItemMoved:(id)currentItemMoved;	// 0x33917469
- (void)feederRangeWasInserted:(id)inserted;	// 0x339178d1
- (void)feederRangeWasRemoved:(id)removed;	// 0x33917625
- (void)figPlayerNotificationHandler:(id)handler;	// 0x33915571
- (void)fmpEffectiveVolumeDidChange;	// 0x33916979
- (void)fpItemNotification:(id)notification sender:(id)sender;	// 0x33904959
- (CGImageRef)grabCGImageAtTime:(double)time withTimeOptions:(int)timeOptions withImageOptions:(id)imageOptions actualTime:(double *)time4;	// 0x3390f7f9
- (BOOL)havePlayedCurrentItem;	// 0x339151cd
- (unsigned)indexOfCurrentQueueFeederItem;	// 0x33908c55
- (BOOL)isCurrentItemReady;	// 0x33915ec1
- (BOOL)isNewImageAvailableForTime:(const XXStruct_pwHToB *)time willNeverBeAvailable:(BOOL *)available;	// 0x33915199
- (BOOL)isValid;	// 0x3391634d
- (void)itemHasFinishedPlayingNotification:(id)notification;	// 0x3390a1bd
- (id)lkLayer;	// 0x33915209
- (void)logPerformanceDataForCurrentItem;	// 0x33916079
- (void)makeCurrentItemReady;	// 0x33905b4d
- (void)makeError:(id *)error withDescription:(id)description code:(long)code;	// 0x33909999
// converted property getter: - (BOOL)muted;	// 0x33916ee9
- (BOOL)okToNotifyFromThisThread;	// 0x339043b9
// converted property getter: - (id)outputQTESFilePath;	// 0x33906399
- (void)pause;	// 0x33908c41
- (BOOL)play:(id *)play;	// 0x33917439
- (BOOL)playNextItem:(id *)item;	// 0x33908e81
- (AVControllerPrivate *)privateStorage;	// 0x33915189
// converted property getter: - (id)queue;	// 0x339151a5
// converted property getter: - (id)queueFeeder;	// 0x339151b9
- (float)rate;	// 0x33904651
- (void)rateDidChangeToRate:(float)rate;	// 0x33907b11
- (void)registerTimeMarkerObserver:(id)observer forItem:(id)item times:(id)times context:(id)context;	// 0x33915f11
- (void)removeObserver:(id)observer fromTMOArray:(id)tmoarray;	// 0x33909645
- (int)repeatMode;	// 0x339099c5
- (void)requestAsyncCGImagesAtTimes:(id)times requestIDs:(id)ids withTimeOptions:(int)timeOptions withImageOptions:(id)imageOptions;	// 0x33916acd
- (void)requestAsyncCGImagesAtTimes:(id)times withTimeOptions:(int)timeOptions withImageOptions:(id)imageOptions;	// 0x33916ccd
- (BOOL)resumePlayback:(double)playback error:(id *)error;	// 0x33917311
- (void)safeSubtitleCommandPosted:(void *)posted;	// 0x339163b5
- (void)scheduleQueueSpaceCheck;	// 0x33905939
- (void)scheduleUpdateTimeMarkerObservations;	// 0x339046ad
- (void)seekToDate:(id)date;	// 0x33916fb5
- (void)setAVItemClass:(Class)aClass;	// 0x33915175
- (void)setApplyVideoTrackMatrix;	// 0x33916cf1
- (BOOL)setAttribute:(id)attribute forKey:(id)key error:(id *)error;	// 0x338ff955
// converted property setter: - (void)setCurrentTime:(double)time;	// 0x33917001
- (void)setCurrentTime:(double)time options:(int)options;	// 0x33909a91
// converted property setter: - (void)setDelegate:(id)delegate;	// 0x33901835
- (void)setEQPreset:(int)preset;	// 0x3390187d
- (BOOL)setIndexOfCurrentQueueFeederItem:(unsigned)currentQueueFeederItem error:(id *)error;	// 0x33908cc1
- (void)setLayer:(id)layer;	// 0x33901a31
// converted property setter: - (void)setMuted:(BOOL)muted;	// 0x33916e49
// converted property setter: - (void)setOutputQTESFilePath:(id)path;	// 0x33916db9
- (BOOL)setPickedRouteWithPassword:(id)password withPassword:(id)password2;	// 0x33915db9
// converted property setter: - (void)setQueue:(id)queue;	// 0x338feed9
// converted property setter: - (void)setQueueFeeder:(id)feeder;	// 0x339099d9
- (void)setQueueFeeder:(id)feeder withIndex:(int)index;	// 0x33901ad1
- (BOOL)setRate:(float)rate error:(id *)error;	// 0x339059c1
- (BOOL)setRepeatMode:(int)mode;	// 0x33901aa1
// converted property setter: - (void)setShouldDisplayClosedCaptions:(BOOL)displayClosedCaptions;	// 0x3390192d
- (void)setSubtitleRecipient:(id)recipient;	// 0x339018e9
// converted property setter: - (void)setVibrationEnabled:(BOOL)enabled;	// 0x33915061
// converted property setter: - (void)setVibrationPattern:(id)pattern;	// 0x339150b9
// converted property setter: - (void)setVisualContext:(OpaqueFigVisualContext *)context;	// 0x33916de9
// converted property setter: - (void)setVolume:(float)volume;	// 0x33909dad
- (BOOL)shouldBeginPlayingItem:(id)item error:(id *)error;	// 0x33906e69
// converted property getter: - (BOOL)shouldDisplayClosedCaptions;	// 0x3391521d
- (void)stepByCount:(int)count;	// 0x33916f85
- (void)unregisterTimeMarkerObserver:(id)observer forItem:(id)item;	// 0x339094c1
- (long)updateActionAtEnd;	// 0x33901941
- (void)updateTimeMarkerObservations;	// 0x33907071
// converted property getter: - (BOOL)vibrationEnabled;	// 0x33915049
// converted property getter: - (id)vibrationPattern;	// 0x33915139
// converted property getter: - (OpaqueFigVisualContext *)visualContext;	// 0x339151f5
// converted property getter: - (float)volume;	// 0x339017d1
@end

