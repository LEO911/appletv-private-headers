/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/DataAccess.framework/Frameworks/DACalDAV.framework/DACalDAV
 */

#import <DAAccount.h> // Unknown library
#import "DACalDAV-Structs.h"

@class NSSet, NSURL, NSDictionary, DACoreDAVTaskManager, NSTimeZone, NSMutableDictionary, NSMutableSet, CalDAVPrincipalSearchPropertySet, CoreDAVDiscoveryTaskGroup, DACoreDAVLogger, CalDAVServerVersion, NSDate, MobileCalDAVPrincipal, MobileCalDAVAccountRefreshActor, CalDAVRefreshContext, NSString;

@interface MobileCalDAVAccount : DAAccount {
	DACoreDAVTaskManager *_taskManager;	// 64 = 0x40
	NSMutableDictionary *_principals;	// 68 = 0x44
	MobileCalDAVPrincipal *_mainPrincipal;	// 72 = 0x48
	int _preferredEventDaysToSync;	// 76 = 0x4c
	int _preferredToDoDaysToSync;	// 80 = 0x50
	NSMutableSet *_calendars;	// 84 = 0x54
	BOOL _subscribedCalendarsChanged;	// 88 = 0x58
	NSString *_collectionSetName;	// 92 = 0x5c
	CalDAVPrincipalSearchPropertySet *_searchPropertySet;	// 96 = 0x60
	CoreDAVDiscoveryTaskGroup *_checkValidityTaskGroup;	// 100 = 0x64
	MobileCalDAVAccountRefreshActor *_actor;	// 104 = 0x68
	BOOL _isRefreshing;	// 108 = 0x6c
	BOOL _isSpinning;	// 109 = 0x6d
	BOOL _needsAccountPropertyRefresh;	// 110 = 0x6e
	CalDAVRefreshContext *_refreshContext;	// 112 = 0x70
	NSMutableSet *_searchTaskSet;	// 116 = 0x74
	DACoreDAVLogger *_curLogger;	// 120 = 0x78
	CalDAVServerVersion *_serverVersion;	// 124 = 0x7c
	NSMutableDictionary *_itemIDsToMoveActions;	// 128 = 0x80
	NSMutableSet *_movedItemURLStrings;	// 132 = 0x84
@private
	BOOL _searchQueriesShouldCancel;	// 136 = 0x88
}
@property(assign) int calDAVAccountVersion;	// G=0x30222345; S=0x30222379; 
@property(readonly, assign) NSSet *calendars;	// G=0x30222e5d; 
@property(retain) NSURL *collectionSetURL;	// G=0x30222a99; S=0x30222add; 
@property(retain) id host;	// G=0x302225ed; S=0x30222629; converted property
@property(assign) BOOL isRefreshing;	// G=0x30226861; S=0x30226871; @synthesize=_isRefreshing
@property(assign) BOOL isWritable;	// G=0x30222b6d; S=0x30222bd9; 
@property(readonly, assign) NSMutableDictionary *itemIDsToMoveActions;	// G=0x302268d9; @synthesize=_itemIDsToMoveActions
@property(retain) MobileCalDAVPrincipal *mainPrincipal;	// G=0x302268f9; S=0x3022690d; @synthesize=_mainPrincipal
@property(readonly, assign) NSSet *movedItemURLStrings;	// G=0x302268e9; @synthesize=_movedItemURLStrings
@property(assign) BOOL needsAccountPropertyRefresh;	// G=0x302268b9; S=0x302268c9; @synthesize=_needsAccountPropertyRefresh
@property(readonly, assign) NSDate *ocurrenceCacheEndDate;	// G=0x30223841; 
@property(readonly, assign) NSDate *ocurrenceCacheStartDate;	// G=0x30223809; 
@property(assign) int overriddenPort;	// G=0x30222541; S=0x302224e1; 
@property(retain) NSString *overriddenScheme;	// G=0x302225d1; S=0x30222575; 
@property(retain) NSString *overriddenServer;	// G=0x302224c5; S=0x30222469; 
@property(assign) int port;	// G=0x302227b9; S=0x30222775; converted property
@property(assign) int preferredEventDaysToSync;	// G=0x30226941; S=0x30226951; @synthesize=_preferredEventDaysToSync
@property(assign) int preferredToDoDaysToSync;	// G=0x30226961; S=0x30226971; @synthesize=_preferredToDoDaysToSync
@property(retain) id principalURL;	// G=0x30222869; S=0x30222889; converted property
@property(readonly, assign) NSDictionary *principals;	// G=0x30226931; @synthesize=_principals
@property(retain) CalDAVRefreshContext *refreshContext;	// G=0x30226881; S=0x30226895; @synthesize=_refreshContext
@property(retain) id scheme;	// G=0x302226b1; S=0x302226ed; converted property
@property(retain) id searchPropertySet;	// G=0x30222b19; S=0x30222b29; 
@property(assign) BOOL searchQueriesShouldCancel;	// G=0x30226981; S=0x30226991; @synthesize=_searchQueriesShouldCancel
@property(assign) CalDAVServerVersion *serverVersion;	// G=0x30223639; S=0x302236a9; 
@property(readonly, assign) BOOL shouldFilterEventSyncTimeRange;	// G=0x30223879; 
@property(readonly, assign) BOOL shouldFilterSyncTimeRangeForInbox;	// G=0x30223911; 
@property(readonly, assign) BOOL shouldFilterTodoSyncTimeRange;	// G=0x302238c5; 
@property(retain, nonatomic) NSDictionary *subscribedCalendars;	// G=0x30222325; S=0x30222289; 
@property(readonly, assign) BOOL supportsEvents;	// G=0x302239f9; 
@property(readonly, assign) BOOL supportsReminders;	// G=0x3022397d; 
@property(readonly, retain) DACoreDAVTaskManager *taskManager;	// G=0x30223a01; converted property
@property(assign) BOOL useSSL;	// G=0x30222839; S=0x30222805; converted property
@property(retain) id username;	// G=0x302223bd; S=0x302223dd; converted property
@property(readonly, assign) NSTimeZone *viewedTimeZone;	// G=0x302237ed; 
@property(assign) BOOL wasMigrated;	// G=0x30222c1d; S=0x30222cd1; 
+ (Class)accountClass;	// 0x30221511
+ (Class)clientClass;	// 0x3022152d
+ (id)defaultProperties;	// 0x30220c61
+ (id)supportedDataclasses;	// 0x30221549
- (id)init;	// 0x30220da1
- (id)initWithProperties:(id)properties;	// 0x30220759
- (id)_calendarConstraintsPath;	// 0x30223b59
- (id)_calendarConstraintsResource;	// 0x30223a55
- (id)_collectActionsFromMoveDictionary:(CFDictionaryRef)moveDictionary forDataclass:(id)dataclass outShouldSave:(BOOL *)anOut;	// 0x3022494d
- (void)_collectMoveActions;	// 0x30224df9
- (BOOL)_needsNewAccountIDForOldVersion:(int)oldVersion;	// 0x30221d45
- (id)_oldURLsForKeychain;	// 0x30221ad9
- (id)_powerAssertionContext;	// 0x302262b9
- (id)_powerAssertionGroupIdentifier;	// 0x302262bd
- (void)_setSpinning:(BOOL)spinning;	// 0x30224215
- (void)_updateCalendarStore:(BOOL)store;	// 0x30223f05
- (BOOL)_updateCalendarStoreProperties:(void *)properties;	// 0x30223c25
- (void)_upgradeAccountToTelluride;	// 0x302215e1
- (BOOL)_upgradeSelfFromVersion:(int)version superClassUpgraded:(BOOL)upgraded;	// 0x30221d51
- (BOOL)accountNeedsUpgrade;	// 0x30222191
- (void)addCalendar:(id)calendar;	// 0x30222d99
- (void)addPrincipal:(id)principal;	// 0x302235a5
// declared property getter: - (int)calDAVAccountVersion;	// 0x30222345
// declared property getter: - (id)calendars;	// 0x30222e5d
- (void)cancelAllSearchQueries;	// 0x30225b8d
- (void)cancelRefresh;	// 0x30224279
- (void)cancelSearchQuery:(id)query;	// 0x30225a45
- (void)checkValidityWithConsumer:(id)consumer;	// 0x30226079
// declared property getter: - (id)collectionSetURL;	// 0x30222a99
- (void *)copyCalStore;	// 0x30223bd1
- (void)coreDAVLogDiagnosticMessage:(id)message atLevel:(int)level;	// 0x302267ed
- (int)coreDAVLogLevel;	// 0x302267cd
- (void)coreDAVLogTransmittedDataPartial:(id)partial;	// 0x3022683d
- (int)coreDAVOutputLevel;	// 0x302267e5
- (void)coreDAVTransmittedDataFinished;	// 0x3022685d
- (void)dealloc;	// 0x30220de1
- (void)discoveryTask:(id)task gotAccountInfo:(id)info error:(id)error;	// 0x30225ccd
- (void)dropPowerAssertions;	// 0x302263d1
// converted property getter: - (id)host;	// 0x302225ed
- (BOOL)isCalDAVAccount;	// 0x30226471
- (BOOL)isEqualToAccount:(id)account;	// 0x30226475
// declared property getter: - (BOOL)isRefreshing;	// 0x30226861
// declared property getter: - (BOOL)isWritable;	// 0x30222b6d
// declared property getter: - (id)itemIDsToMoveActions;	// 0x302268d9
- (id)localizedIdenticalAccountFailureMessage;	// 0x302266a5
- (id)localizedInvalidPasswordMessage;	// 0x3022671d
// declared property getter: - (id)mainPrincipal;	// 0x302268f9
// declared property getter: - (id)movedItemURLStrings;	// 0x302268e9
// declared property getter: - (BOOL)needsAccountPropertyRefresh;	// 0x302268b9
// declared property getter: - (id)ocurrenceCacheEndDate;	// 0x30223841
// declared property getter: - (id)ocurrenceCacheStartDate;	// 0x30223809
// declared property getter: - (int)overriddenPort;	// 0x30222541
// declared property getter: - (id)overriddenScheme;	// 0x302225d1
// declared property getter: - (id)overriddenServer;	// 0x302224c5
- (void)performSearchQuery:(id)query;	// 0x302256b1
// converted property getter: - (int)port;	// 0x302227b9
// declared property getter: - (int)preferredEventDaysToSync;	// 0x30226941
// declared property getter: - (int)preferredToDoDaysToSync;	// 0x30226961
// converted property getter: - (id)principalURL;	// 0x30222869
// declared property getter: - (id)principals;	// 0x30226931
- (id)properties;	// 0x30221061
- (void)reattainPowerAssertions;	// 0x30226421
- (void)refreshActor:(id)actor didCompleteWithError:(id)error;	// 0x30224351
// declared property getter: - (id)refreshContext;	// 0x30226881
- (void)refreshWithContext:(id)context;	// 0x302250fd
- (void)releasePowerAssertion;	// 0x30226331
- (void)reloadCalendars;	// 0x302234dd
- (void)removeCalendar:(id)calendar;	// 0x30222df1
- (void)removePrincipal:(id)principal;	// 0x302235fd
- (void)retainPowerAssertion;	// 0x302262cd
// converted property getter: - (id)scheme;	// 0x302226b1
// declared property getter: - (id)searchPropertySet;	// 0x30222b19
- (BOOL)searchQueriesRunning;	// 0x30225c99
// declared property getter: - (BOOL)searchQueriesShouldCancel;	// 0x30226981
- (id)serverBaseURL;	// 0x302229b1
// declared property getter: - (id)serverVersion;	// 0x30223639
- (void)setAccountDescription:(id)description;	// 0x30222a55
// declared property setter: - (void)setCalDAVAccountVersion:(int)version;	// 0x30222379
// declared property setter: - (void)setCollectionSetURL:(id)url;	// 0x30222add
// converted property setter: - (void)setHost:(id)host;	// 0x30222629
// declared property setter: - (void)setIsRefreshing:(BOOL)refreshing;	// 0x30226871
// declared property setter: - (void)setIsWritable:(BOOL)writable;	// 0x30222bd9
// declared property setter: - (void)setMainPrincipal:(id)principal;	// 0x3022690d
// declared property setter: - (void)setNeedsAccountPropertyRefresh:(BOOL)refresh;	// 0x302268c9
// declared property setter: - (void)setOverriddenPort:(int)port;	// 0x302224e1
// declared property setter: - (void)setOverriddenScheme:(id)scheme;	// 0x30222575
// declared property setter: - (void)setOverriddenServer:(id)server;	// 0x30222469
// converted property setter: - (void)setPort:(int)port;	// 0x30222775
// declared property setter: - (void)setPreferredEventDaysToSync:(int)sync;	// 0x30226951
// declared property setter: - (void)setPreferredToDoDaysToSync:(int)sync;	// 0x30226971
// converted property setter: - (void)setPrincipalURL:(id)url;	// 0x30222889
// declared property setter: - (void)setRefreshContext:(id)context;	// 0x30226895
// converted property setter: - (void)setScheme:(id)scheme;	// 0x302226ed
// declared property setter: - (void)setSearchPropertySet:(id)set;	// 0x30222b29
// declared property setter: - (void)setSearchQueriesShouldCancel:(BOOL)cancel;	// 0x30226991
// declared property setter: - (void)setServerVersion:(id)version;	// 0x302236a9
// declared property setter: - (void)setSubscribedCalendars:(id)calendars;	// 0x30222289
// converted property setter: - (void)setUseSSL:(BOOL)ssl;	// 0x30222805
// converted property setter: - (void)setUsername:(id)username;	// 0x302223dd
// declared property setter: - (void)setWasMigrated:(BOOL)migrated;	// 0x30222cd1
// declared property getter: - (BOOL)shouldFilterEventSyncTimeRange;	// 0x30223879
// declared property getter: - (BOOL)shouldFilterSyncTimeRangeForInbox;	// 0x30223911
// declared property getter: - (BOOL)shouldFilterTodoSyncTimeRange;	// 0x302238c5
- (BOOL)shouldLogTransmittedData;	// 0x30226831
- (void)shutdown;	// 0x30225cc9
- (id)spinnerIdentifiers;	// 0x302241b5
- (id)stateString;	// 0x30221579
// declared property getter: - (id)subscribedCalendars;	// 0x30222325
- (BOOL)supportsDADataclass:(int)dataclass;	// 0x30221569
// declared property getter: - (BOOL)supportsEvents;	// 0x302239f9
// declared property getter: - (BOOL)supportsReminders;	// 0x3022397d
- (void)task:(id)task didFinishWithError:(id)error;	// 0x30225399
// converted property getter: - (id)taskManager;	// 0x30223a01
- (BOOL)upgradeAccount;	// 0x30222109
// converted property getter: - (BOOL)useSSL;	// 0x30222839
// converted property getter: - (id)username;	// 0x302223bd
- (BOOL)usesTokenAuth;	// 0x302239fd
// declared property getter: - (id)viewedTimeZone;	// 0x302237ed
// declared property getter: - (BOOL)wasMigrated;	// 0x30222c1d
- (id)wellKnownPaths;	// 0x30225ee1
@end

