/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

#import "MediaPlayer-Structs.h"
#import "MPAudioDeviceControllerDelegate.h"
#import <NSObject.h> // Unknown library

@class MPAudioDeviceController, NSMutableArray, NSDictionary, AVQueuePlayer, NSError, AVPlayer, NSString, NSArray, AVAudioSessionMediaPlayerOnly, AVPlayerItem;
@protocol OS_dispatch_queue;

@interface MPQueuePlayer : NSObject <MPAudioDeviceControllerDelegate> {
	MPAudioDeviceController *_audioDeviceController;	// 4 = 0x4
	AVPlayerItem *_currentItem;	// 8 = 0x8
	XXStruct_pwHToB _currentTime;	// 12 = 0xc
	BOOL _isExternalPlaybackActive;	// 36 = 0x24
	BOOL _pausedForPlaybackQueueTransaction;	// 37 = 0x25
	NSDictionary *_pickedRouteDescription;	// 40 = 0x28
	id _playbackQueueCommitHandler;	// 44 = 0x2c
	int _playbackQueueTransactionCount;	// 48 = 0x30
	AVQueuePlayer *_player;	// 52 = 0x34
	NSMutableArray *_queuedOperations;	// 56 = 0x38
	NSObject<OS_dispatch_queue> *_queuedOperationsAccessQueue;	// 60 = 0x3c
	float _rate;	// 64 = 0x40
	float _rateBeforePlaybackQueueTransaction;	// 68 = 0x44
	BOOL _routeDidChangeDuringPlaybackQueueTransaction;	// 72 = 0x48
	int _status;	// 76 = 0x4c
	int _defaultItemEQPresetType;	// 80 = 0x50
	BOOL _outputObscuredDueToInsufficientExternalProtection;	// 84 = 0x54
}
@property(copy, nonatomic, setter=_setDisplaysUsedForPlayback:) NSArray *_displaysUsedForPlayback;	// G=0x35046e5d; S=0x35047bb1; 
@property(readonly, assign, nonatomic) int _externalProtectionStatus;	// G=0x35046ebd; 
@property(readonly, assign, nonatomic) AVPlayer *_player;	// G=0x35047201; 
@property(assign, nonatomic) int actionAtItemEnd;	// G=0x35046831; S=0x350478e9; 
@property(assign, nonatomic) BOOL allowsExternalPlayback;	// G=0x35046891; S=0x35047a49; 
@property(assign, nonatomic, getter=isClosedCaptionDisplayEnabled) BOOL closedCaptionDisplayEnabled;	// G=0x35046f0d; S=0x350472a1; 
@property(readonly, assign, nonatomic) AVPlayerItem *currentItem;	// G=0x35046dad; 
@property(readonly, assign) XXStruct_pwHToB currentTime;	// G=0x35046de5; converted property
@property(assign, nonatomic) int defaultItemEQPresetType;	// G=0x35048b7d; S=0x35048521; @synthesize=_defaultItemEQPresetType
@property(assign, nonatomic) BOOL disallowsAMRAudio;	// G=0x35047fe1; S=0x35048531; 
@property(readonly, assign, nonatomic) NSError *error;	// G=0x35046e9d; 
@property(readonly, assign, nonatomic, getter=isExternalPlaybackActive) BOOL externalPlaybackActive;	// G=0x35046efd; 
@property(readonly, assign, nonatomic) int externalPlaybackType;	// G=0x35046e7d; 
@property(copy, nonatomic) NSString *externalPlaybackVideoGravity;	// G=0x35048005; S=0x35048561; 
@property(readonly, assign, nonatomic) BOOL isPlaybackQueueTransactionActive;	// G=0x35046a4d; 
@property(readonly, assign, nonatomic) NSArray *items;	// G=0x35046f31; 
@property(readonly, assign, nonatomic) BOOL outputObscuredDueToInsufficientExternalProtection;	// G=0x35047fad; 
@property(copy, nonatomic) id playbackQueueCommitHandler;	// G=0x35048b59; S=0x35048b6d; @synthesize=_playbackQueueCommitHandler
@property(readonly, assign, nonatomic) AVAudioSessionMediaPlayerOnly *playerAVAudioSession;	// G=0x35047f8d; 
@property(assign, nonatomic) float rate;	// G=0x35047231; S=0x35047bd1; 
@property(readonly, assign, nonatomic) int status;	// G=0x35047f59; 
@property(assign, nonatomic) BOOL usesExternalPlaybackWhileExternalScreenIsActive;	// G=0x35047f69; S=0x35047df1; 
- (id)init;	// 0x350461c1
- (BOOL)_CALayerDestinationIsTVOut;	// 0x35047fbd
// declared property getter: - (id)_displaysUsedForPlayback;	// 0x35046e5d
// declared property getter: - (int)_externalProtectionStatus;	// 0x35046ebd
// declared property getter: - (id)_player;	// 0x35047201
- (BOOL)_resumePlayback:(double)playback error:(id *)error;	// 0x35048059
- (void)_setCALayerDestinationIsTVOut:(BOOL)anOut;	// 0x35048201
- (void)_setClientName:(id)name;	// 0x35048369
// declared property setter: - (void)_setDisplaysUsedForPlayback:(id)playback;	// 0x35047bb1
- (void)_setEQPreset:(int)preset;	// 0x35048551
- (void)_setPreferredLanguageList:(id)list;	// 0x350485b9
- (void)_setStoppingFadeOutDuration:(float)duration;	// 0x35048771
- (void)_setVolume:(float)volume;	// 0x350488e5
- (void)_setWantsVolumeChangesWhenPausedOrInactive:(BOOL)inactive;	// 0x35048905
- (float)_volume;	// 0x35048a6d
// declared property getter: - (int)actionAtItemEnd;	// 0x35046831
- (id)addBoundaryTimeObserverForTimes:(id)times queue:(id)queue usingBlock:(id)block;	// 0x35046851
- (void)advanceToNextItem;	// 0x35046871
// declared property getter: - (BOOL)allowsExternalPlayback;	// 0x35046891
- (void)audioDeviceControllerAudioRoutesChanged:(id)changed;	// 0x35048a8d
- (void)beginPlaybackQueueTransactionAndPause:(BOOL)pause;	// 0x350468b5
- (void)commitPlaybackQueueTransaction;	// 0x35046a65
// declared property getter: - (id)currentItem;	// 0x35046dad
// converted property getter: - (XXStruct_pwHToB)currentTime;	// 0x35046de5
- (void)dealloc;	// 0x3504645d
// declared property getter: - (int)defaultItemEQPresetType;	// 0x35048b7d
// declared property getter: - (BOOL)disallowsAMRAudio;	// 0x35047fe1
// declared property getter: - (id)error;	// 0x35046e9d
// declared property getter: - (int)externalPlaybackType;	// 0x35046e7d
// declared property getter: - (id)externalPlaybackVideoGravity;	// 0x35048005
- (void)insertItem:(id)item afterItem:(id)item2;	// 0x35046edd
// declared property getter: - (BOOL)isClosedCaptionDisplayEnabled;	// 0x35046f0d
// declared property getter: - (BOOL)isExternalPlaybackActive;	// 0x35046efd
// declared property getter: - (BOOL)isPlaybackQueueTransactionActive;	// 0x35046a4d
// declared property getter: - (id)items;	// 0x35046f31
- (void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void *)context;	// 0x350465f5
// declared property getter: - (BOOL)outputObscuredDueToInsufficientExternalProtection;	// 0x35047fad
- (void)pause;	// 0x35046f51
- (void)play;	// 0x350470a9
// declared property getter: - (id)playbackQueueCommitHandler;	// 0x35048b59
// declared property getter: - (id)playerAVAudioSession;	// 0x35047f8d
- (void)prepareItem:(id)item withCompletionHandler:(id)completionHandler;	// 0x35047211
// declared property getter: - (float)rate;	// 0x35047231
- (void)removeItem:(id)item;	// 0x35047261
- (void)removeTimeObserver:(id)observer;	// 0x35047281
- (void)seekToTime:(XXStruct_pwHToB)time;	// 0x3504743d
- (void)seekToTime:(XXStruct_pwHToB)time toleranceBefore:(XXStruct_pwHToB)before toleranceAfter:(XXStruct_pwHToB)after;	// 0x35047601
// declared property setter: - (void)setActionAtItemEnd:(int)itemEnd;	// 0x350478e9
// declared property setter: - (void)setAllowsExternalPlayback:(BOOL)playback;	// 0x35047a49
// declared property setter: - (void)setClosedCaptionDisplayEnabled:(BOOL)enabled;	// 0x350472a1
- (void)setCurrentPlaybackQueueTransactionDisplayTime:(XXStruct_pwHToB)time;	// 0x35047409
// declared property setter: - (void)setDefaultItemEQPresetType:(int)type;	// 0x35048521
// declared property setter: - (void)setDisallowsAMRAudio:(BOOL)audio;	// 0x35048531
// declared property setter: - (void)setExternalPlaybackVideoGravity:(id)gravity;	// 0x35048561
// declared property setter: - (void)setPlaybackQueueCommitHandler:(id)handler;	// 0x35048b6d
// declared property setter: - (void)setRate:(float)rate;	// 0x35047bd1
// declared property setter: - (void)setUsesExternalPlaybackWhileExternalScreenIsActive:(BOOL)active;	// 0x35047df1
// declared property getter: - (int)status;	// 0x35047f59
// declared property getter: - (BOOL)usesExternalPlaybackWhileExternalScreenIsActive;	// 0x35047f69
@end

