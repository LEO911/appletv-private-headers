/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/CoreMotion.framework/CoreMotion
 */

#import "CoreMotion-Structs.h"
#import <NSObject.h> // Unknown library

@class CMDeviceMotion, CMGyroData, CMAccelerometerData, CMMagnetometerData;

@interface CMMotionManager : NSObject {
	id _internal;	// 4 = 0x4
}
@property(readonly, assign, nonatomic, getter=isAccelerometerActive) BOOL accelerometerActive;	// G=0x33d78ce5; @dynamic
@property(readonly, assign, nonatomic, getter=isAccelerometerAvailable) BOOL accelerometerAvailable;	// G=0x33d78cd5; @dynamic
@property(readonly, assign) CMAccelerometerData *accelerometerData;	// G=0x33d78dcd; @dynamic
@property(assign, nonatomic) double accelerometerUpdateInterval;	// G=0x33d78da5; S=0x33d78d09; @dynamic
@property(readonly, assign, nonatomic) int attitudeReferenceFrame;	// G=0x33d79915; @dynamic
@property(readonly, assign) CMDeviceMotion *deviceMotion;	// G=0x33d79935; @dynamic
@property(readonly, assign, nonatomic, getter=isDeviceMotionActive) BOOL deviceMotionActive;	// G=0x33d7982d; @dynamic
@property(readonly, assign, nonatomic, getter=isDeviceMotionAvailable) BOOL deviceMotionAvailable;	// G=0x33d79805; @dynamic
@property(assign, nonatomic) double deviceMotionUpdateInterval;	// G=0x33d798ed; S=0x33d79851; @dynamic
@property(readonly, assign, nonatomic, getter=isGyroActive) BOOL gyroActive;	// G=0x33d7927d; @dynamic
@property(readonly, assign, nonatomic, getter=isGyroAvailable) BOOL gyroAvailable;	// G=0x33d7926d; @dynamic
@property(readonly, assign) CMGyroData *gyroData;	// G=0x33d79365; @dynamic
@property(assign, nonatomic) double gyroUpdateInterval;	// G=0x33d7933d; S=0x33d792a1; @dynamic
@property(readonly, assign, nonatomic, getter=isMagnetometerActive) BOOL magnetometerActive;	// G=0x33d7a331; 
@property(readonly, assign, nonatomic, getter=isMagnetometerAvailable) BOOL magnetometerAvailable;	// G=0x33d7a321; 
@property(readonly, assign) CMMagnetometerData *magnetometerData;	// G=0x33d7a419; 
@property(assign, nonatomic) double magnetometerUpdateInterval;	// G=0x33d7a3f1; S=0x33d7a355; 
@property(assign, nonatomic) BOOL showsDeviceMovementDisplay;	// G=0x33d7a941; S=0x33d7a8bd; 
@property(assign) BOOL useAccelerometer;	// G=0x33d783b1; S=0x33d78389; converted property
+ (unsigned)availableAttitudeReferenceFrames;	// 0x33d78485
+ (void)dummySelector:(id)selector;	// 0x33d7c229
+ (void)initialize;	// 0x33d783d5
+ (void)setAllowInBackground:(BOOL)background;	// 0x33d784a5
- (id)init;	// 0x33d784a9
- (id)initPrivate;	// 0x33d78639
- (id)initUsing6AxisSensorFusion;	// 0x33d7aa31
- (id)initUsingGyroOnlySensorFusion;	// 0x33d7aa81
// declared property getter: - (id)accelerometerData;	// 0x33d78dcd
// declared property getter: - (double)accelerometerUpdateInterval;	// 0x33d78da5
// declared property getter: - (int)attitudeReferenceFrame;	// 0x33d79915
- (void)dealloc;	// 0x33d789a9
- (void)deallocPrivate;	// 0x33d78b15
// declared property getter: - (id)deviceMotion;	// 0x33d79935
// declared property getter: - (double)deviceMotionUpdateInterval;	// 0x33d798ed
- (void)didBecomeActive:(id)active;	// 0x33d7c0d1
- (void)didBecomeActivePrivate:(id)aPrivate;	// 0x33d7c1e1
- (void)dismissDeviceMovementDisplay;	// 0x33d7a9f1
// declared property getter: - (id)gyroData;	// 0x33d79365
// declared property getter: - (double)gyroUpdateInterval;	// 0x33d7933d
- (int)gyttNumTemperatures;	// 0x33d7a30d
// declared property getter: - (BOOL)isAccelerometerActive;	// 0x33d78ce5
// declared property getter: - (BOOL)isAccelerometerAvailable;	// 0x33d78cd5
// declared property getter: - (BOOL)isDeviceMotionActive;	// 0x33d7982d
// declared property getter: - (BOOL)isDeviceMotionAvailable;	// 0x33d79805
// declared property getter: - (BOOL)isGyroActive;	// 0x33d7927d
// declared property getter: - (BOOL)isGyroAvailable;	// 0x33d7926d
// declared property getter: - (BOOL)isMagnetometerActive;	// 0x33d7a331
// declared property getter: - (BOOL)isMagnetometerAvailable;	// 0x33d7a321
// declared property getter: - (id)magnetometerData;	// 0x33d7a419
// declared property getter: - (double)magnetometerUpdateInterval;	// 0x33d7a3f1
- (void)onAccelerometer:(const Sample *)accelerometer;	// 0x33d7b1b1
- (void)onDeviceMotion:(const Sample *)motion;	// 0x33d7b861
- (void)onGeomagneticModel:(const XXStruct_01mbIB *)model;	// 0x33d7bfa9
- (void)onGyro:(const Sample *)gyro;	// 0x33d7b3e9
- (void)onMagnetometer:(const Sample *)magnetometer;	// 0x33d7b629
- (void)rebuildGytt;	// 0x33d7a191
- (void)setAccelerometerDataCallback:(/*function-pointer*/ void *)callback info:(void *)info interval:(double)interval;	// 0x33d7aacd
// declared property setter: - (void)setAccelerometerUpdateInterval:(double)interval;	// 0x33d78d09
- (void)setAccelerometerUpdateIntervalPrivate:(double)aPrivate;	// 0x33d79041
- (void)setDeviceMotionCallback:(/*function-pointer*/ void *)callback info:(void *)info interval:(double)interval fsync:(BOOL)fsync;	// 0x33d7af05
// declared property setter: - (void)setDeviceMotionUpdateInterval:(double)interval;	// 0x33d79851
- (void)setDeviceMotionUpdateIntervalPrivate:(double)aPrivate;	// 0x33d79de9
- (void)setGyroDataCallback:(/*function-pointer*/ void *)callback info:(void *)info interval:(double)interval;	// 0x33d7ace9
// declared property setter: - (void)setGyroUpdateInterval:(double)interval;	// 0x33d792a1
- (void)setGyroUpdateIntervalPrivate:(double)aPrivate;	// 0x33d795d9
// declared property setter: - (void)setMagnetometerUpdateInterval:(double)interval;	// 0x33d7a355
- (void)setMagnetometerUpdateIntervalPrivate:(double)aPrivate;	// 0x33d7a691
// declared property setter: - (void)setShowsDeviceMovementDisplay:(BOOL)display;	// 0x33d7a8bd
- (void)setShowsDeviceMovementDisplayPrivate:(BOOL)aPrivate;	// 0x33d7a965
// converted property setter: - (void)setUseAccelerometer:(BOOL)accelerometer;	// 0x33d78389
- (void)showDeviceMovementDisplay;	// 0x33d7a99d
// declared property getter: - (BOOL)showsDeviceMovementDisplay;	// 0x33d7a941
- (void)startAccelerometerUpdates;	// 0x33d78e7d
- (void)startAccelerometerUpdatesPrivateToQueue:(id)queue withHandler:(id)handler;	// 0x33d790a9
- (void)startAccelerometerUpdatesToQueue:(id)queue withHandler:(id)handler;	// 0x33d78ef9
- (void)startDeviceMotionUpdates;	// 0x33d79a6d
- (void)startDeviceMotionUpdatesPrivateUsingReferenceFrame:(int)frame toQueue:(id)queue withHandler:(id)handler;	// 0x33d79e51
- (void)startDeviceMotionUpdatesToQueue:(id)queue withHandler:(id)handler;	// 0x33d79b09
- (void)startDeviceMotionUpdatesUsingReferenceFrame:(int)frame;	// 0x33d79bf9
- (void)startDeviceMotionUpdatesUsingReferenceFrame:(int)frame toQueue:(id)queue withHandler:(id)handler;	// 0x33d79c89
- (void)startGyroUpdates;	// 0x33d79415
- (void)startGyroUpdatesPrivateToQueue:(id)queue withHandler:(id)handler;	// 0x33d79641
- (void)startGyroUpdatesToQueue:(id)queue withHandler:(id)handler;	// 0x33d79491
- (void)startMagnetometerUpdates;	// 0x33d7a4c9
- (void)startMagnetometerUpdatesPrivateToQueue:(id)queue withHandler:(id)handler;	// 0x33d7a6f9
- (void)startMagnetometerUpdatesToQueue:(id)queue withHandler:(id)handler;	// 0x33d7a545
- (void)stopAccelerometerUpdates;	// 0x33d78fc9
- (void)stopAccelerometerUpdatesPrivate;	// 0x33d791c1
- (void)stopDeviceMotionUpdates;	// 0x33d79d6d
- (void)stopDeviceMotionUpdatesPrivate;	// 0x33d7a0a5
- (void)stopGyroUpdates;	// 0x33d79561
- (void)stopGyroUpdatesPrivate;	// 0x33d79759
- (void)stopMagnetometerUpdates;	// 0x33d7a615
- (void)stopMagnetometerUpdatesPrivate;	// 0x33d7a811
// converted property getter: - (BOOL)useAccelerometer;	// 0x33d783b1
- (void)willResignActive:(id)active;	// 0x33d7c025
- (void)willResignActivePrivate:(id)aPrivate;	// 0x33d7c17d
@end

