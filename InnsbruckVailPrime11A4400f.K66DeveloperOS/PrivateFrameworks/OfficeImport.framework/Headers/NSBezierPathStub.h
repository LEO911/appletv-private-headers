/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/OfficeImport.framework/OfficeImport
 */

#import "OfficeImport-Structs.h"
#import </libobjc.A.h>
#import "NSCopying.h"


@interface NSBezierPathStub : NSObject <NSCopying> {
	int _segmentCount;	// 4 = 0x4
	int _segmentMax;	// 8 = 0x8
	PATHSEGMENT *_head;	// 12 = 0xc
	int _lastSubpathIndex;	// 16 = 0x10
	int _elementCount;	// 20 = 0x14
	float _lineWidth;	// 24 = 0x18
	CGRect _controlPointBounds;	// 28 = 0x1c
	float _miterLimit;	// 44 = 0x2c
	float _flatness;	// 48 = 0x30
	float *_dashedLinePattern;	// 52 = 0x34
	unsigned _dashedLineCount;	// 56 = 0x38
	float _dashedLinePhase;	// 60 = 0x3c
	void *_path;	// 64 = 0x40
	id _private[4];	// 68 = 0x44
	struct {
		unsigned _flags : 8;
		unsigned _pathState : 2;
		unsigned _unused : 22;
	} _bpFlags;	// 84 = 0x54
}
@property(assign) BOOL cachesBezierPath;	// G=0x3197e639; S=0x3197e63d; converted property
@property(readonly, assign) CGRect controlPointBounds;	// G=0x3197cfa1; converted property
@property(readonly, assign) int elementCount;	// G=0x3197d1d5; converted property
@property(assign) float flatness;	// G=0x3197c325; S=0x3197c335; converted property
@property(assign) unsigned lineCapStyle;	// G=0x3197c279; S=0x3197c28d; converted property
@property(assign) unsigned lineJoinStyle;	// G=0x3197c2a5; S=0x3197c2b9; converted property
@property(assign) float lineWidth;	// G=0x3197c259; S=0x3197c269; converted property
@property(assign) float miterLimit;	// G=0x3197c305; S=0x3197c315; converted property
@property(assign) unsigned windingRule;	// G=0x3197c2d5; S=0x3197c2e9; converted property
+ (id)bezierPath;	// 0x3197b4dd
+ (id)bezierPathWithOvalInRect:(CGRect)rect;	// 0x3197b555
+ (id)bezierPathWithRect:(CGRect)rect;	// 0x3197b515
+ (id)bezierPathWithRoundedRect:(CGRect)roundedRect xRadius:(float)radius yRadius:(float)radius3;	// 0x3197b595
+ (void)clipRect:(CGRect)rect;	// 0x3197b759
+ (CGContextRef)currentCGContext;	// 0x3197b48d
+ (float)defaultFlatness;	// 0x3197b8c1
+ (unsigned)defaultLineCapStyle;	// 0x3197b901
+ (unsigned)defaultLineJoinStyle;	// 0x3197b921
+ (float)defaultLineWidth;	// 0x3197b941
+ (float)defaultMiterLimit;	// 0x3197b8a1
+ (unsigned)defaultWindingRule;	// 0x3197b8e1
+ (void)drawPackedGlyphs:(const char *)glyphs atPoint:(CGPoint)point;	// 0x3197b841
+ (void)drawString:(id)string atPoint:(CGPoint)point withFontName:(id)fontName andHeight:(float)height color:(id)color alignToTop:(BOOL)top currentTransformStruct:(CGAffineTransform)aStruct;	// 0x3197b99d
+ (void)fillRect:(CGRect)rect;	// 0x3197b5e9
+ (float)flatness;	// 0x3197ea99
+ (void)initialize;	// 0x3197b3f5
+ (unsigned)lineCapStyle;	// 0x3197ead9
+ (unsigned)lineJoinStyle;	// 0x3197eaf9
+ (float)lineWidth;	// 0x3197eb19
+ (float)miterLimit;	// 0x3197ea79
+ (void)setCurrentCGContext:(CGContextRef)context;	// 0x3197b439
+ (void)setDefaultFlatness:(float)flatness;	// 0x3197b8b1
+ (void)setDefaultLineCapStyle:(unsigned)style;	// 0x3197b8f1
+ (void)setDefaultLineJoinStyle:(unsigned)style;	// 0x3197b911
+ (void)setDefaultLineWidth:(float)width;	// 0x3197b931
+ (void)setDefaultMiterLimit:(float)limit;	// 0x3197b891
+ (void)setDefaultWindingRule:(unsigned)rule;	// 0x3197b8d1
+ (void)setFlatness:(float)flatness;	// 0x3197ea89
+ (void)setLineCapStyle:(unsigned)style;	// 0x3197eac9
+ (void)setLineJoinStyle:(unsigned)style;	// 0x3197eae9
+ (void)setLineWidth:(float)width;	// 0x3197eb09
+ (void)setMiterLimit:(float)limit;	// 0x3197ea69
+ (void)setWindingRule:(unsigned)rule;	// 0x3197eaa9
+ (void)strokeLineFromPoint:(CGPoint)point toPoint:(CGPoint)point2;	// 0x3197b7b9
+ (void)strokeRect:(CGRect)rect;	// 0x3197b649
+ (unsigned)windingRule;	// 0x3197eab9
- (id)init;	// 0x3197bb5d
- (id).cxx_construct;	// 0x3197e641
- (void)_addPathSegment:(int)segment point:(CGPoint)point;	// 0x3197e645
- (void)_appendArcSegmentWithCenter:(CGPoint)center radius:(double)radius angle1:(double)a1 angle2:(double)a2;	// 0x3197d7cd
- (id)_copyFlattenedPath;	// 0x3197cbd1
- (void)_deviceClosePath;	// 0x3197e8bd
- (void)_deviceCurveToPoint:(CGPoint)point controlPoint1:(CGPoint)a1 controlPoint2:(CGPoint)a2;	// 0x3197e841
- (void)_deviceLineToPoint:(CGPoint)point;	// 0x3197e7f1
- (void)_deviceMoveToPoint:(CGPoint)point;	// 0x3197e719
- (void)_doPath;	// 0x3197c4b9
- (void)_doUserPathWithOp:(unsigned char)op inContext:(CGContextRef)context;	// 0x3197e97d
- (int)_locationOfPoint:(CGPoint)point;	// 0x3197e161
- (int)_segmentIndexForElementIndex:(int)elementIndex;	// 0x3197d24d
- (void)addClip;	// 0x3197c731
- (void)appendBezierPath:(id)path;	// 0x3197d479
- (void)appendBezierPathWithArcFromPoint:(CGPoint)point toPoint:(CGPoint)point2 radius:(float)radius;	// 0x3197dbc9
- (void)appendBezierPathWithArcWithCenter:(CGPoint)center radius:(float)radius startAngle:(float)angle endAngle:(float)angle4;	// 0x3197db89
- (void)appendBezierPathWithArcWithCenter:(CGPoint)center radius:(float)radius startAngle:(float)angle endAngle:(float)angle4 clockwise:(BOOL)clockwise;	// 0x3197d909
- (void)appendBezierPathWithOvalInRect:(CGRect)rect;	// 0x3197d675
- (void)appendBezierPathWithPoints:(CGPoint *)points count:(int)count;	// 0x3197d5f9
- (void)appendBezierPathWithRect:(CGRect)rect;	// 0x3197d56d
- (void)appendBezierPathWithRoundedRect:(CGRect)roundedRect xRadius:(float)radius yRadius:(float)radius3;	// 0x3197ded9
- (id)bezierPathByFlatteningPath;	// 0x3197cb31
- (id)bezierPathByReversingPath;	// 0x3197cc25
- (CGRect)bounds;	// 0x3197d109
// converted property getter: - (BOOL)cachesBezierPath;	// 0x3197e639
- (void)closePath;	// 0x3197c049
- (BOOL)containsPoint:(CGPoint)point;	// 0x3197e5a9
// converted property getter: - (CGRect)controlPointBounds;	// 0x3197cfa1
- (id)copyWithZone:(NSZone *)zone;	// 0x3197bdb1
- (CGPoint)currentPoint;	// 0x3197cf1d
- (void)curveToPoint:(CGPoint)point controlPoint1:(CGPoint)a1 controlPoint2:(CGPoint)a2;	// 0x3197bfb5
- (void)dealloc;	// 0x3197bca1
- (id)description;	// 0x3197eb29
- (unsigned)elementAtIndex:(int)index;	// 0x3197d239
- (unsigned)elementAtIndex:(int)index associatedPoints:(CGPoint *)points;	// 0x3197d339
// converted property getter: - (int)elementCount;	// 0x3197d1d5
- (void)fill;	// 0x3197c6b9
- (void)finalize;	// 0x3197bd29
// converted property getter: - (float)flatness;	// 0x3197c325
- (void)flattenIntoPath:(id)path;	// 0x3197ca21
- (void)getLineDash:(float *)dash count:(int *)count phase:(float *)phase;	// 0x3197c42d
- (BOOL)isEmpty;	// 0x3197cf05
- (BOOL)isHitByPath:(id)path;	// 0x3197e629
- (BOOL)isHitByPoint:(CGPoint)point;	// 0x3197e60d
- (BOOL)isHitByRect:(CGRect)rect;	// 0x3197e625
- (BOOL)isStrokeHitByPath:(id)path;	// 0x3197e635
- (BOOL)isStrokeHitByPoint:(CGPoint)point;	// 0x3197e62d
- (BOOL)isStrokeHitByRect:(CGRect)rect;	// 0x3197e631
// converted property getter: - (unsigned)lineCapStyle;	// 0x3197c279
// converted property getter: - (unsigned)lineJoinStyle;	// 0x3197c2a5
- (void)lineToPoint:(CGPoint)point;	// 0x3197bf45
// converted property getter: - (float)lineWidth;	// 0x3197c259
// converted property getter: - (float)miterLimit;	// 0x3197c305
- (void)moveToPoint:(CGPoint)point;	// 0x3197bf35
- (void)relativeCurveToPoint:(CGPoint)point controlPoint1:(CGPoint)a1 controlPoint2:(CGPoint)a2;	// 0x3197c1a5
- (void)relativeLineToPoint:(CGPoint)point;	// 0x3197c13d
- (void)relativeMoveToPoint:(CGPoint)point;	// 0x3197c0d5
- (void)removeAllPoints;	// 0x3197c059
- (void)setAssociatedPoints:(CGPoint *)points atIndex:(int)index;	// 0x3197d3c5
// converted property setter: - (void)setCachesBezierPath:(BOOL)path;	// 0x3197e63d
- (void)setClip;	// 0x3197c7b5
// converted property setter: - (void)setFlatness:(float)flatness;	// 0x3197c335
// converted property setter: - (void)setLineCapStyle:(unsigned)style;	// 0x3197c28d
- (void)setLineDash:(const float *)dash count:(int)count phase:(float)phase;	// 0x3197c345
// converted property setter: - (void)setLineJoinStyle:(unsigned)style;	// 0x3197c2b9
// converted property setter: - (void)setLineWidth:(float)width;	// 0x3197c269
// converted property setter: - (void)setMiterLimit:(float)limit;	// 0x3197c315
// converted property setter: - (void)setWindingRule:(unsigned)rule;	// 0x3197c2e9
- (void)stroke;	// 0x3197c5cd
- (void)subdivideBezierWithFlatness:(float)flatness startPoint:(CGPoint)point controlPoint1:(CGPoint)a1 controlPoint2:(CGPoint)a2 endPoint:(CGPoint)point5;	// 0x3197c809
- (void)transformUsingAffineTransform:(id)transform;	// 0x3197ce45
// converted property getter: - (unsigned)windingRule;	// 0x3197c2d5
@end

