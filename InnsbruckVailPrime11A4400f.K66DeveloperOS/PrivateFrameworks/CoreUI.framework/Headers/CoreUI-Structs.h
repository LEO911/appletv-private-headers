/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/CoreUI.framework/CoreUI
 */

typedef struct _NSZone NSZone;

typedef struct CGSize {
	float width;
	float height;
} CGSize;

typedef struct CGPoint {
	float x;
	float y;
} CGPoint;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct _rgbquad {
	unsigned _field1 : 8;
	unsigned _field2 : 8;
	unsigned _field3 : 8;
	unsigned _field4 : 8;
} rgbquad;

typedef struct _colordef {
	unsigned _field1;
	unsigned _field2;
	rgbquad _field3;
} colordef;

typedef struct _renditionkeytoken {
	unsigned short identifier;
	unsigned short value;
} renditionkeytoken;

typedef struct CGImage *CGImageRef;

typedef struct CGPattern *CGPatternRef;

typedef struct CGContext *CGContextRef;

typedef struct _csigradientdatanode {
	unsigned _field1;
	float _field2;
	double _field3;
	double _field4;
	double _field5;
	double _field6;
	double _field7;
	double _field8;
	double _field9;
	double _field10;
} csigradientdatanode;

typedef struct _csimetadata {
	unsigned _field1;
	unsigned short _field2;
	unsigned short _field3;
	BOOL _field4[128];
} csimetadata;

typedef struct _csibitmaplist {
	unsigned _field1;
	unsigned _field2[0];
} csibitmaplist;

typedef struct _csiheader {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
	unsigned _field8 : 4;
	unsigned _field9 : 28;
	csimetadata _field10;
	unsigned _field11;
	csibitmaplist _field12;
} csiheader;

typedef struct {
	CGSize _field1;
	CGSize _field2;
	CGSize _field3;
} XXStruct_uJ2nZC;

typedef struct _psdGradientColor {
	double red;
	double green;
	double blue;
	double alpha;
} psdGradientColor;

typedef struct CPSDChannelLengthInfo *CPSDChannelLengthInfoRef;

typedef struct CPSDFile CPSDFile;
typedef struct CPSDHeader {
	/*function-pointer*/ void **_field1;
	CPSDFile *_field2;
	unsigned _field3;
	unsigned short _field4;
	unsigned char _field5[6];
	unsigned short _field6;
	unsigned _field7;
	unsigned _field8;
	unsigned short _field9;
	unsigned short _field10;
} CPSDHeader;

typedef struct CPSDColorModeData {
	/*function-pointer*/ void **_field1;
	CPSDFile *_field2;
	unsigned _field3;
	char *_field4;
} CPSDColorModeData;

typedef struct CPSDImageResourceBlock *CPSDImageResourceBlockRef;

typedef struct CPSDImageResources {
	/*function-pointer*/ void **_field1;
	CPSDFile *_field2;
	unsigned _field3;
	CPSDImageResourceBlockRef _field4;
} CPSDImageResources;

typedef struct CPSDLayerRecord CPSDLayerRecord;
template<>
struct __compressed_pair<CPSDLayerRecord *, std::__1::allocator<CPSDLayerRecord> > {
	CPSDLayerRecord *_field1;
};

template<>
struct vector<CPSDLayerRecord, std::__1::allocator<CPSDLayerRecord> > {
	CPSDLayerRecord *_field1;
	CPSDLayerRecord *_field2;
	__compressed_pair<CPSDLayerRecord *, std::__1::allocator<CPSDLayerRecord> > _field3;
};

typedef struct CPSDLayerChannelGroup *CPSDLayerChannelGroupRef;

template<>
struct __compressed_pair<CPSDLayerChannelGroup **, std::__1::allocator<CPSDLayerChannelGroup *> > {
	CPSDLayerChannelGroupRef *_field1;
};

template<>
struct vector<CPSDLayerChannelGroup *, std::__1::allocator<CPSDLayerChannelGroup *> > {
	CPSDLayerChannelGroupRef *_field1;
	CPSDLayerChannelGroupRef *_field2;
	__compressed_pair<CPSDLayerChannelGroup **, std::__1::allocator<CPSDLayerChannelGroup *> > _field3;
};

typedef struct CPSDLayerInfo {
	/*function-pointer*/ void **_field1;
	CPSDFile *_field2;
	unsigned _field3;
	unsigned short _field4;
	vector<CPSDLayerRecord, std::__1::allocator<CPSDLayerRecord> > _field5;
	vector<CPSDLayerChannelGroup *, std::__1::allocator<CPSDLayerChannelGroup *> > _field6;
} CPSDLayerInfo;

typedef struct CPSDGlobalLayerMaskInfo {
	/*function-pointer*/ void **_field1;
	CPSDFile *_field2;
	unsigned _field3;
	unsigned short _field4;
	unsigned short _field5[4];
	unsigned short _field6;
	unsigned char _field7;
	unsigned _field8;
} CPSDGlobalLayerMaskInfo;

typedef struct CPSDAdditionalLayerInfoItem *CPSDAdditionalLayerInfoItemRef;

typedef struct CPSDAdditionalLayerInfo {
	/*function-pointer*/ void **_field1;
	CPSDFile *_field2;
	unsigned _field3;
	CPSDAdditionalLayerInfoItemRef _field4;
} CPSDAdditionalLayerInfo;

typedef struct CPSDLayerAndMaskInfo {
	/*function-pointer*/ void **_field1;
	CPSDFile *_field2;
	unsigned _field3;
	CPSDLayerInfo _field4;
	CPSDGlobalLayerMaskInfo _field5;
	CPSDAdditionalLayerInfo _field6;
} CPSDLayerAndMaskInfo;

struct CPSDFile {
	/*function-pointer*/ void **_field1;
	CPSDFile *_field2;
	char *_field3;
	unsigned _field4;
	unsigned _field5;
	unsigned char _field6;
	unsigned _field7;
	unsigned _field8;
	unsigned short _field9;
	unsigned _field10;
	unsigned short _field11;
	unsigned short _field12;
	char *_field13;
	CPSDChannelLengthInfoRef _field14;
	char **_field15;
	unsigned short _field16;
	void *_field17;
	unsigned char _field18;
	CPSDHeader _field19;
	CPSDColorModeData _field20;
	CPSDImageResources _field21;
	CPSDLayerAndMaskInfo _field22;
	unsigned char _field23;
};

typedef struct _PSDImageInfo {
	unsigned _field1;
	unsigned _field2;
	unsigned short _field3;
	unsigned short _field4;
	unsigned short _field5;
	int _field6;
} PSDImageInfo;

typedef struct CGColorSpace *CGColorSpaceRef;

template<>
struct __compressed_pair<CPSDChannelLengthInfo *, std::__1::allocator<CPSDChannelLengthInfo> > {
	CPSDChannelLengthInfoRef _field1;
};

template<>
struct vector<CPSDChannelLengthInfo, std::__1::allocator<CPSDChannelLengthInfo> > {
	CPSDChannelLengthInfoRef _field1;
	CPSDChannelLengthInfoRef _field2;
	__compressed_pair<CPSDChannelLengthInfo *, std::__1::allocator<CPSDChannelLengthInfo> > _field3;
};

typedef struct CPSDLayerMaskData {
	/*function-pointer*/ void **_field1;
	CPSDFile *_field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
	unsigned char _field8;
	unsigned char _field9;
	unsigned short _field10;
	unsigned _field11;
	unsigned _field12;
	unsigned _field13;
	unsigned _field14;
	unsigned char _field15;
	unsigned char _field16;
} CPSDLayerMaskData;

typedef struct CPSDChannelBlendingInfo *CPSDChannelBlendingInfoRef;

template<>
struct __compressed_pair<CPSDChannelBlendingInfo *, std::__1::allocator<CPSDChannelBlendingInfo> > {
	CPSDChannelBlendingInfoRef _field1;
};

template<>
struct vector<CPSDChannelBlendingInfo, std::__1::allocator<CPSDChannelBlendingInfo> > {
	CPSDChannelBlendingInfoRef _field1;
	CPSDChannelBlendingInfoRef _field2;
	__compressed_pair<CPSDChannelBlendingInfo *, std::__1::allocator<CPSDChannelBlendingInfo> > _field3;
};

typedef struct CPSDLayerBlendingRanges {
	/*function-pointer*/ void **_field1;
	CPSDFile *_field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	vector<CPSDChannelBlendingInfo, std::__1::allocator<CPSDChannelBlendingInfo> > _field6;
} CPSDLayerBlendingRanges;

struct CPSDLayerRecord {
	/*function-pointer*/ void **_field1;
	CPSDFile *_field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned short _field7;
	vector<CPSDChannelLengthInfo, std::__1::allocator<CPSDChannelLengthInfo> > _field8;
	unsigned _field9;
	unsigned _field10;
	unsigned char _field11;
	unsigned char _field12;
	unsigned char _field13;
	unsigned char _field14;
	unsigned _field15;
	CPSDLayerMaskData _field16;
	CPSDLayerBlendingRanges _field17;
	BOOL _field18[256];
	CPSDAdditionalLayerInfo _field19;
};

typedef struct CGPath *CGPathRef;

typedef struct CGColor *CGColorRef;

typedef struct crmFlags {
	unsigned scalesVertically : 1;
	unsigned scalesHorizontally : 1;
	unsigned reserved : 14;
} crmFlags;

typedef struct CGFunction *CGFunctionRef;

typedef struct _carheader {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	BOOL _field6[128];
	BOOL _field7[256];
	unsigned char _field8[16];
	unsigned _field9;
	unsigned _field10;
	unsigned _field11;
	unsigned _field12;
} carheader;

typedef struct _renditionkeyfmt {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4[0];
} renditionkeyfmt;

typedef struct {
	unsigned _field1;
	unsigned _field2;
} XXStruct_IwxUBC;

typedef struct FontValue {
	BOOL _field1[128];
	float _field2;
} FontValue;

typedef struct {
	float top;
	float left;
	float bottom;
	float right;
} XXStruct_Zo0bCC;

typedef struct _csibitmap {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned char _field5[0];
} csibitmap;

typedef struct _slice {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
} slice;

typedef struct _cuieffectlist {
	unsigned _field1;
	unsigned _field2[0];
} cuieffectlist;

typedef struct _cuieffectdata {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	cuieffectlist _field5;
} cuieffectdata;

typedef struct __CUIThemeGradientRenditionInitializerStruct {
	unsigned _field1;
	float _field2;
	id _field3;
} CUIThemeGradientRenditionInitializerStruct;

typedef struct _rgbcolor {
	unsigned char r;
	unsigned char g;
	unsigned char b;
} rgbcolor;

typedef union {
	float floatValue;
	unsigned intValue;
	rgbcolor colorValue;
	short angleValue;
} XXUnion_WsajKB;

typedef struct {
	unsigned effectType;
	unsigned effectParameter;
	XXUnion_WsajKB effectValue;
} XXStruct_zQJNOC;

typedef struct _themelook {
	int _field1;
	char *_field2;
} themelook;

typedef struct {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	XXStruct_zQJNOC _field5[35];
} XXStruct_0qphmD;

typedef struct {
	int _field1;
	char *_field2;
	char *_field3;
} XXStruct_2jSttD;

typedef struct {
	char *_field1;
	char *_field2;
	renditionkeytoken _field3[5];
	int _field4;
	int _field5;
	struct {
		char *_field1;
		char *_field2;
		int _field3;
		unsigned _field4;
	} _field6[12];
} XXStruct_c6U6SD;

typedef struct {
	char *_field1;
	char *_field2;
	BOOL _field3;
	int _field4;
	XXStruct_c6U6SD _field5[7];
} XXStruct_el0qVC;

typedef struct __CFData *CFDataRef;

typedef struct PSDColorRGBA {
	double _field1;
	double _field2;
	double _field3;
	double _field4;
} PSDColorRGBA;

typedef struct PSDGradientColorStop *PSDGradientColorStopRef;

template<>
struct __compressed_pair<PSDGradientColorStop *, std::__1::allocator<PSDGradientColorStop> > {
	PSDGradientColorStopRef _field1;
};

template<>
struct vector<PSDGradientColorStop, std::__1::allocator<PSDGradientColorStop> > {
	PSDGradientColorStopRef _field1;
	PSDGradientColorStopRef _field2;
	__compressed_pair<PSDGradientColorStop *, std::__1::allocator<PSDGradientColorStop> > _field3;
};

typedef struct PSDGradientOpacityStop *PSDGradientOpacityStopRef;

template<>
struct __compressed_pair<PSDGradientOpacityStop *, std::__1::allocator<PSDGradientOpacityStop> > {
	PSDGradientOpacityStopRef _field1;
};

template<>
struct vector<PSDGradientOpacityStop, std::__1::allocator<PSDGradientOpacityStop> > {
	PSDGradientOpacityStopRef _field1;
	PSDGradientOpacityStopRef _field2;
	__compressed_pair<PSDGradientOpacityStop *, std::__1::allocator<PSDGradientOpacityStop> > _field3;
};

typedef struct PSDGradient {
	double _field1;
	double _field2;
	bool _field3;
	bool _field4;
	bool _field5;
	double _field6;
	double _field7;
	double _field8;
	int _field9;
	PSDColorRGBA _field10;
	vector<PSDGradientColorStop, std::__1::allocator<PSDGradientColorStop> > _field11;
	vector<PSDGradientOpacityStop, std::__1::allocator<PSDGradientOpacityStop> > _field12;
} PSDGradient;

typedef struct PSDRect *PSDRectRef;

typedef struct {
	float shadowRed;
	float shadowGreen;
	float shadowBlue;
	float shadowBlurSize;
	float shadowOpacity;
	float shadowOffsetAmount;
	float shadowOffsetAngle;
	CGPoint shadowOffset;
} XXStruct_MsnGHB;

typedef struct __CTFont *CTFontRef;

typedef struct {
	float beginRed;
	float beginGreen;
	float beginBlue;
	float endRed;
	float endGreen;
	float endBlue;
	float gradientOpacity;
} XXStruct_pK0GxD;

typedef struct {
	float glowRed;
	float glowGreen;
	float glowBlue;
	float glowOpacity;
	float glowSize;
} XXStruct_25AlUA;


