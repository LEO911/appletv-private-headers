/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/AggregateDictionaryHistory.framework/AggregateDictionaryHistory
 */

typedef struct sqlite3 sqlite3;

template<>
struct __hash_node<std::__1::pair<unsigned long, sqlite3_stmt *>, void *>;

template<>
struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned long, sqlite3_stmt *>, void *> *> > {
	unsigned long _field1;
};

template<>
struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned long, sqlite3_stmt *>, void *> *> > {
	__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned long, sqlite3_stmt *>, void *> *> > _field1;
};

template<>
struct __compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned long, sqlite3_stmt *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned long, sqlite3_stmt *>, void *> *> > > {
	__hash_node<std::__1::pair<unsigned long, sqlite3_stmt *>, void *> **_field1;
	__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned long, sqlite3_stmt *>, void *> *> > _field2;
};

template<>
struct unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned long, sqlite3_stmt *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned long, sqlite3_stmt *>, void *> *> > > {
	__compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned long, sqlite3_stmt *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned long, sqlite3_stmt *>, void *> *> > > _field1;
};

template<>
struct __hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned long, sqlite3_stmt *>, void *> *> {
	__hash_node<std::__1::pair<unsigned long, sqlite3_stmt *>, void *> *_field1;
};

template<>
struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned long, sqlite3_stmt *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned long, sqlite3_stmt *>, void *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned long, sqlite3_stmt *>, void *> *> _field1;
};

template<>
struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, sqlite3_stmt *, std::__1::hash<unsigned long>, true> > {
	unsigned long _field1;
};

template<>
struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, sqlite3_stmt *, std::__1::equal_to<unsigned long>, true> > {
	float _field1;
};

template<>
struct __hash_table<std::__1::pair<unsigned long, sqlite3_stmt *>, std::__1::__unordered_map_hasher<unsigned long, sqlite3_stmt *, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, sqlite3_stmt *, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::pair<unsigned long, sqlite3_stmt *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned long, sqlite3_stmt *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned long, sqlite3_stmt *>, void *> *> > > _field1;
	__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned long, sqlite3_stmt *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned long, sqlite3_stmt *>, void *> > > _field2;
	__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, sqlite3_stmt *, std::__1::hash<unsigned long>, true> > _field3;
	__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, sqlite3_stmt *, std::__1::equal_to<unsigned long>, true> > _field4;
};

template<>
struct unordered_map<unsigned long, sqlite3_stmt *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, sqlite3_stmt *> > > {
	__hash_table<std::__1::pair<unsigned long, sqlite3_stmt *>, std::__1::__unordered_map_hasher<unsigned long, sqlite3_stmt *, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, sqlite3_stmt *, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::pair<unsigned long, sqlite3_stmt *> > > _field1;
};

typedef struct Database {
	sqlite3 *_field1;
	unordered_map<unsigned long, sqlite3_stmt *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, sqlite3_stmt *> > > _field2;
} Database;


