/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices
 */

typedef struct _NSZone NSZone;

typedef struct _GEOTileKey {
	unsigned z : 6;
	unsigned x : 26;
	unsigned y : 26;
	unsigned type : 6;
	unsigned pixelSize : 8;
	unsigned textScale : 8;
	unsigned provider : 8;
	unsigned expires : 1;
	unsigned reserved1 : 7;
	unsigned char reserved2[4];
} GEOTileKey;

typedef struct {
	unsigned long _field1;
	id *_field2;
	unsigned long *_field3;
	unsigned long _field4[5];
} XXStruct_kFm5bA;

typedef struct {
	unsigned long long _high;
	unsigned long long _low;
} XXStruct_t9EeIA;

typedef struct {
	double x;
	double y;
} XXStruct_gLbvpC;

template<>
struct __list_node<LoadItem, void *>;

template<>
struct __list_node_base<LoadItem, void *> {
	__list_node<LoadItem, void *> *__prev_;
	__list_node<LoadItem, void *> *__next_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<LoadItem, void *> > > {
	unsigned long __first_;
};

template<>
struct list<LoadItem, std::__1::allocator<LoadItem> > {
	__list_node_base<LoadItem, void *> __end_;
	__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<LoadItem, void *> > > __size_alloc_;
};

typedef struct _opaque_pthread_mutex_t {
	long __sig;
	BOOL __opaque[40];
} opaque_pthread_mutex_t;

typedef struct mutex {
	opaque_pthread_mutex_t __m_;
} mutex;

typedef struct DispatchTimer DispatchTimer;

template<>
struct __compressed_pair<geo::DispatchTimer *, std::__1::default_delete<geo::DispatchTimer> > {
	DispatchTimer *__first_;
};

template<>
struct unique_ptr<geo::DispatchTimer, std::__1::default_delete<geo::DispatchTimer> > {
	__compressed_pair<geo::DispatchTimer *, std::__1::default_delete<geo::DispatchTimer> > __ptr_;
};

template<>
struct __list_node<ShrinkCacheRequester, void *>;

template<>
struct __list_node_base<ShrinkCacheRequester, void *> {
	__list_node<ShrinkCacheRequester, void *> *__prev_;
	__list_node<ShrinkCacheRequester, void *> *__next_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<ShrinkCacheRequester, void *> > > {
	unsigned long __first_;
};

template<>
struct list<ShrinkCacheRequester, std::__1::allocator<ShrinkCacheRequester> > {
	__list_node_base<ShrinkCacheRequester, void *> __end_;
	__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<ShrinkCacheRequester, void *> > > __size_alloc_;
};

template<>
struct __hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *>;

template<>
struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> > {
	unsigned long __first_;
};

template<>
struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> > {
	__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> > __data_;
};

template<>
struct __compressed_pair<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> > > {
	__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> **__first_;
	__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> > __second_;
};

template<>
struct unique_ptr<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> > > {
	__compressed_pair<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> > > __ptr_;
};

template<>
struct __hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> {
	__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *__next_;
};

template<>
struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> __first_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, UsageData, std::__1::hash<GEOTileKey>, true> > {
	unsigned long __first_;
};

template<>
struct __compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, UsageData, std::__1::equal_to<GEOTileKey>, true> > {
	float __first_;
};

template<>
struct __hash_table<std::__1::pair<_GEOTileKey, UsageData>, std::__1::__unordered_map_hasher<_GEOTileKey, UsageData, std::__1::hash<GEOTileKey>, true>, std::__1::__unordered_map_equal<_GEOTileKey, UsageData, std::__1::equal_to<GEOTileKey>, true>, std::__1::allocator<std::__1::pair<_GEOTileKey, UsageData> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *> > > __bucket_list_;
	__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, UsageData>, void *> > > __p1_;
	__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, UsageData, std::__1::hash<GEOTileKey>, true> > __p2_;
	__compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, UsageData, std::__1::equal_to<GEOTileKey>, true> > __p3_;
};

template<>
struct unordered_map<_GEOTileKey, UsageData, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<std::__1::pair<const _GEOTileKey, UsageData> > > {
	__hash_table<std::__1::pair<_GEOTileKey, UsageData>, std::__1::__unordered_map_hasher<_GEOTileKey, UsageData, std::__1::hash<GEOTileKey>, true>, std::__1::__unordered_map_equal<_GEOTileKey, UsageData, std::__1::equal_to<GEOTileKey>, true>, std::__1::allocator<std::__1::pair<_GEOTileKey, UsageData> > > __table_;
};

typedef struct ErrorInfo ErrorInfo;

template<>
struct __compressed_pair<ErrorInfo **, std::__1::allocator<ErrorInfo *> > {
	ErrorInfo **__first_;
};

template<>
struct __split_buffer<ErrorInfo *, std::__1::allocator<ErrorInfo *> > {
	ErrorInfo **__first_;
	ErrorInfo **__begin_;
	ErrorInfo **__end_;
	__compressed_pair<ErrorInfo **, std::__1::allocator<ErrorInfo *> > __end_cap_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::allocator<ErrorInfo> > {
	unsigned long __first_;
};

template<>
struct deque<ErrorInfo, std::__1::allocator<ErrorInfo> > {
	__split_buffer<ErrorInfo *, std::__1::allocator<ErrorInfo *> > __map_;
	unsigned __start_;
	__compressed_pair<unsigned long, std::__1::allocator<ErrorInfo> > __size_;
};

template<>
struct __list_iterator<LoadItem, void *> {
	__list_node<LoadItem, void *> *_field1;
};

typedef struct _NSRange {
	unsigned _field1;
	unsigned _field2;
} NSRange;

template<>
struct __list_node<CacheItem, void *>;

template<>
struct __list_node_base<CacheItem, void *> {
	__list_node<CacheItem, void *> *__prev_;
	__list_node<CacheItem, void *> *__next_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CacheItem, void *> > > {
	unsigned long __first_;
};

template<>
struct list<CacheItem, std::__1::allocator<CacheItem> > {
	__list_node_base<CacheItem, void *> __end_;
	__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CacheItem, void *> > > __size_alloc_;
};

template<>
struct __hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *>;

template<>
struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> > {
	unsigned long __first_;
};

template<>
struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> > {
	__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> > __data_;
};

template<>
struct __compressed_pair<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> > > {
	__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> **__first_;
	__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> > __second_;
};

template<>
struct unique_ptr<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> > > {
	__compressed_pair<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> > > __ptr_;
};

template<>
struct __hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> {
	__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *__next_;
};

template<>
struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> __first_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, hashkey, true> > {
	unsigned long __first_;
};

template<>
struct __compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, eqkey, true> > {
	float __first_;
};

template<>
struct __hash_table<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, hashkey, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, eqkey, true>, std::__1::allocator<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *> > > __bucket_list_;
	__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, void *> > > __p1_;
	__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, hashkey, true> > __p2_;
	__compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, eqkey, true> > __p3_;
};

template<>
struct unordered_map<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, hashkey, eqkey, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::__list_iterator<CacheItem, void *> > > > {
	__hash_table<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> >, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, hashkey, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, eqkey, true>, std::__1::allocator<std::__1::pair<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *> > > > __table_;
};

typedef struct sqlite3 sqlite3;

typedef struct sqlite3_stmt sqlite3_stmt;

typedef struct {
	unsigned _field1;
	double _field2;
} XXStruct_nbUehC;

typedef struct {
	XXStruct_gLbvpC _field1;
	XXStruct_gLbvpC _field2;
} XXStruct_03F4WD;

typedef struct {
	XXStruct_gLbvpC _field1;
	double _field2;
	double _field3;
} XXStruct_SnKRpD;

typedef struct {
	unsigned formattedAddressType : 1;
} XXStruct_ec15KC;

typedef struct {
	unsigned uID : 1;
	unsigned totalNumberOfPhotos : 1;
	unsigned version : 1;
	unsigned canBeCorrectedByBusinessOwner : 1;
	unsigned isClosed : 1;
	unsigned isUnverified : 1;
} XXStruct_fHE5iB;

typedef struct {
	int *list;
	unsigned count;
	unsigned size;
} XXStruct_WmZAAA;

typedef struct {
	unsigned problemType : 1;
	unsigned protocolVersion : 1;
} XXStruct_zn8ILA;

typedef struct {
	int _field1;
	int _field2;
	XXStruct_zn8ILA _field3;
} XXStruct_hSSemD;

typedef struct {
	unsigned *list;
	unsigned count;
	unsigned size;
} XXStruct_stqouA;

typedef struct PolylineCoordinate {
	unsigned _field1;
	float _field2;
} PolylineCoordinate;

typedef struct {
	int _field1;
	unsigned _field2;
	unsigned _field3;
	int _field4;
	unsigned _field5;
	int _field6;
	XXStruct_fHE5iB _field7;
} XXStruct_TrK5YA;

typedef struct {
	unsigned historicTravelTime : 1;
	unsigned liveTravelTime : 1;
	unsigned status : 1;
} XXStruct_H_8QpB;

typedef struct {
	int _field1;
	int _field2;
	int _field3;
	XXStruct_H_8QpB _field4;
} XXStruct_DtYHXC;

typedef struct {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	struct {
		unsigned eastLng : 1;
		unsigned northLat : 1;
		unsigned southLat : 1;
		unsigned westLng : 1;
	} _field5;
} XXStruct_3azwpD;

typedef struct {
	unsigned long long *list;
	unsigned count;
	unsigned size;
} XXStruct_P234fD;

typedef struct {
	long long *list;
	unsigned count;
	unsigned size;
} XXStruct_19EQxD;

typedef struct {
	int _beginIndex;
	int _endIndex;
	int _stringType;
} XXStruct_RZ71gC;

typedef struct CGImage *CGImageRef;

typedef struct {
	PolylineCoordinate _field1;
	PolylineCoordinate _field2;
} XXStruct_jlw7uA;

typedef struct {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
} XXStruct_1aFH4A;

typedef struct {
	unsigned _field1;
	int _field2;
	XXStruct_zn8ILA _field3;
} XXStruct_2ta5gB;

typedef struct {
	int _field1;
	int _field2;
} XXStruct_K5nmsA;

typedef struct {
	double _x;
	double _y;
	int _z;
	XXStruct_ec15KC _has;
} XXStruct_jtcFHA;

typedef struct _CFURLRequest *CFURLRequestRef;

typedef struct {
	double _time;
	int _type;
	XXStruct_zn8ILA _has;
} XXStruct_DnwSnB;

typedef struct {
	unsigned _field1;
	double _field2;
	unsigned _field3;
} XXStruct_m9xU5B;

typedef struct __SCNetworkReachability *SCNetworkReachabilityRef;

typedef struct __CFDictionary *CFDictionaryRef;

typedef struct {
	double _field1;
	unsigned _field2;
	XXStruct_zn8ILA _field3;
} XXStruct_2pGsiB;

typedef struct _CFURLConnection *CFURLConnectionRef;

typedef struct _CFURLResponse *CFURLResponseRef;

typedef struct __CFURLConnectionSession *CFURLConnectionSessionRef;

typedef struct {
	id _field1;
	char *_field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
	unsigned long long _field8;
	BOOL _field9;
	unsigned long long _field10;
	float _field11;
	id _field12;
	int _field13;
} XXStruct_1vGfDB;

typedef struct GEOFeatureShield {
	XXStruct_BdOxqA _field1;
	long long _field2;
} GEOFeatureShield;

typedef struct {
	XXStruct_1vGfDB _field1;
	unsigned _field2;
	unsigned _field3;
	int _field4;
	int _field5;
	int _field6;
	unsigned _field7;
	unsigned _field8;
	struct {
		float _field1;
		float _field2;
		float _field3;
		float _field4;
	} _field9;
	GEOTileKey *_field10;
	struct {
		unsigned short _field1[2];
		unsigned short _field2[2];
	} _field11;
	unsigned char _field12;
} XXStruct_4i9X_D;

template<>
struct Vec2Imp<float> {
	float x;
	float y;
};

typedef struct {
	XXStruct_4i9X_D _field1;
	Vec2Imp<float> _field2;
	BOOL _field3;
	unsigned _field4;
	unsigned _field5;
} XXStruct_eamZgC;

typedef struct {
	XXStruct_4i9X_D _field1;
	unsigned _field2;
	unsigned _field3;
	BOOL _field4;
} XXStruct_YZ8efB;

typedef struct {
	XXStruct_1vGfDB _field1;
	char *_field2;
	unsigned _field3;
} XXStruct_5JvWtA;

typedef struct {
	BOOL _field1;
	unsigned _field2;
	id *_field3;
} XXStruct_zhstyD;

typedef struct {
	XXStruct_1vGfDB _field1;
	Vec2Imp<float> _field2;
	unsigned char _field3;
	BOOL _field4;
	BOOL _field5;
	GEOTileKey *_field6;
} XXStruct_$$xf5C;

typedef struct {
	unsigned short _field1;
} XXStruct_hvb_zB;

typedef struct {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	GEOTileKey *_field5;
} XXStruct_zzquVA;

typedef struct {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
} XXStruct_qFPbxC;

typedef struct {
	float _field1;
	float _field2;
	float _field3;
	float _field4;
	float _field5;
	float _field6;
} XXStruct_uYp3tB;

typedef struct {
	GEOTileKey *_field1;
	unsigned _field2;
	NSRange *_field3;
	unsigned _field4;
} XXStruct__qQs$B;

typedef struct {
	unsigned _field1;
	unsigned _field2;
	char *_field3;
} XXStruct_xKvFHA;

typedef struct {
	char *_field1;
	char *_field2;
	unsigned _field3;
} XXStruct_BdOxqA;

typedef struct {
	unsigned _field1;
	unsigned _field2;
	unsigned char _field3;
} XXStruct_fJSKzC;

typedef struct {
	XXStruct_qFPbxC _field1;
	struct {
		unsigned _field1;
		int _field2;
		float _field3;
		BOOL _field4;
		BOOL _field5;
		BOOL _field6;
		BOOL _field7;
		BOOL _field8;
		struct {
			unsigned char _field1;
			unsigned short _field2;
		} _field9[16];
	} _field2;
} XXStruct_Jn2zBA;

typedef struct {
	GEOTileKey *_field1;
	unsigned _field2;
	unsigned short _field3;
	unsigned _field4;
	char *_field5;
	unsigned _field6;
	struct {
		unsigned _field1;
		bool _field2;
	} _field7;
} XXStruct_tf976D;

typedef struct {
	unsigned char _field1;
	struct {
		char *_field1;
		unsigned _field2;
		unsigned _field3;
	} _field2;
	bool _field3;
	char *_field4;
	unsigned _field5;
	unsigned _field6;
} XXStruct_g8x3EB;

template<>
struct __tree_node<std::__1::pair<unsigned int, _GEOAltitudeTriggerData>, void *>;

template<>
struct __tree_node_base<void *>;

template<>
struct __tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> *__left_;
};

template<>
struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<unsigned int, _GEOAltitudeTriggerData>, void *> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, _GEOAltitudeTriggerData, std::__1::less<unsigned int>, true> > {
	unsigned long __first_;
};

template<>
struct __tree<std::__1::pair<unsigned int, _GEOAltitudeTriggerData>, std::__1::__map_value_compare<unsigned int, _GEOAltitudeTriggerData, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::pair<unsigned int, _GEOAltitudeTriggerData> > > {
	__tree_node<std::__1::pair<unsigned int, _GEOAltitudeTriggerData>, void *> *__begin_node_;
	__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<unsigned int, _GEOAltitudeTriggerData>, void *> > > __pair1_;
	__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, _GEOAltitudeTriggerData, std::__1::less<unsigned int>, true> > __pair3_;
};

template<>
struct map<unsigned int, _GEOAltitudeTriggerData, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, _GEOAltitudeTriggerData> > > {
	__tree<std::__1::pair<unsigned int, _GEOAltitudeTriggerData>, std::__1::__map_value_compare<unsigned int, _GEOAltitudeTriggerData, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::pair<unsigned int, _GEOAltitudeTriggerData> > > __tree_;
};

typedef struct {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
} XXStruct_VrsxJB;

typedef struct {
	GEOTileKey *road;
	unsigned vertexIndexA;
	unsigned vertexIndexB;
	unsigned junctionIndexA;
	unsigned junctionIndexB;
	GEOTileKey *junctionA;
	GEOTileKey *junctionB;
} XXStruct_E6zS0B;

template<>
struct __compressed_pair<GEORoadEdge **, std::__1::allocator<GEORoadEdge *> > {
	GEOTileKey **__first_;
};

template<>
struct __split_buffer<GEORoadEdge *, std::__1::allocator<GEORoadEdge *> > {
	GEOTileKey **__first_;
	GEOTileKey **__begin_;
	GEOTileKey **__end_;
	__compressed_pair<GEORoadEdge **, std::__1::allocator<GEORoadEdge *> > __end_cap_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::allocator<GEORoadEdge> > {
	unsigned long __first_;
};

template<>
struct deque<GEORoadEdge, std::__1::allocator<GEORoadEdge> > {
	__split_buffer<GEORoadEdge *, std::__1::allocator<GEORoadEdge *> > __map_;
	unsigned __start_;
	__compressed_pair<unsigned long, std::__1::allocator<GEORoadEdge> > __size_;
};

template<>
struct __hash_node<_GEOTileKey, void *>;

template<>
struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> > {
	unsigned long __first_;
};

template<>
struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> > {
	__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> > __data_;
};

template<>
struct __compressed_pair<std::__1::__hash_node<_GEOTileKey, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> > > {
	__hash_node<_GEOTileKey, void *> **__first_;
	__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> > __second_;
};

template<>
struct unique_ptr<std::__1::__hash_node<_GEOTileKey, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> > > {
	__compressed_pair<std::__1::__hash_node<_GEOTileKey, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> > > __ptr_;
};

template<>
struct __hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> {
	__hash_node<_GEOTileKey, void *> *__next_;
};

template<>
struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *>, std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> > > {
	__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> __first_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::hash<GEOTileKey> > {
	unsigned long __first_;
};

template<>
struct __compressed_pair<float, std::__1::equal_to<GEOTileKey> > {
	float __first_;
};

template<>
struct __hash_table<_GEOTileKey, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<_GEOTileKey> > {
	unique_ptr<std::__1::__hash_node<_GEOTileKey, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> > > __bucket_list_;
	__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *>, std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> > > __p1_;
	__compressed_pair<unsigned long, std::__1::hash<GEOTileKey> > __p2_;
	__compressed_pair<float, std::__1::equal_to<GEOTileKey> > __p3_;
};

template<>
struct unordered_set<_GEOTileKey, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<_GEOTileKey> > {
	__hash_table<_GEOTileKey, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<_GEOTileKey> > __table_;
};

template<>
struct __hash_node<GEORoadEdge, void *>;

template<>
struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> *> > {
	unsigned long __first_;
};

template<>
struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> *> > {
	__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> *> > __data_;
};

template<>
struct __compressed_pair<std::__1::__hash_node<GEORoadEdge, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> *> > > {
	__hash_node<GEORoadEdge, void *> **__first_;
	__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> *> > __second_;
};

template<>
struct unique_ptr<std::__1::__hash_node<GEORoadEdge, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> *> > > {
	__compressed_pair<std::__1::__hash_node<GEORoadEdge, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> *> > > __ptr_;
};

template<>
struct __hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> {
	__hash_node<GEORoadEdge, void *> *__next_;
};

template<>
struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *>, std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> > > {
	__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> __first_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::hash<GEORoadEdge> > {
	unsigned long __first_;
};

template<>
struct __compressed_pair<float, std::__1::equal_to<GEORoadEdge> > {
	float __first_;
};

template<>
struct __hash_table<GEORoadEdge, std::__1::hash<GEORoadEdge>, std::__1::equal_to<GEORoadEdge>, std::__1::allocator<GEORoadEdge> > {
	unique_ptr<std::__1::__hash_node<GEORoadEdge, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> *> > > __bucket_list_;
	__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *>, std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *> > > __p1_;
	__compressed_pair<unsigned long, std::__1::hash<GEORoadEdge> > __p2_;
	__compressed_pair<float, std::__1::equal_to<GEORoadEdge> > __p3_;
};

template<>
struct unordered_set<GEORoadEdge, std::__1::hash<GEORoadEdge>, std::__1::equal_to<GEORoadEdge>, std::__1::allocator<GEORoadEdge> > {
	__hash_table<GEORoadEdge, std::__1::hash<GEORoadEdge>, std::__1::equal_to<GEORoadEdge>, std::__1::allocator<GEORoadEdge> > __table_;
};

typedef struct Message Message;

typedef struct __shared_weak_count shared_weak_count;

template<>
struct shared_ptr<zilch::Message> {
	Message *__ptr_;
	shared_weak_count *__cntrl_;
};

typedef struct __CFRunLoop *CFRunLoopRef;

typedef struct ZilchMapModel ZilchMapModel;

template<>
struct __compressed_pair<geo::ZilchMapModel *, std::__1::default_delete<geo::ZilchMapModel> > {
	ZilchMapModel *__first_;
};

template<>
struct unique_ptr<geo::ZilchMapModel, std::__1::default_delete<geo::ZilchMapModel> > {
	__compressed_pair<geo::ZilchMapModel *, std::__1::default_delete<geo::ZilchMapModel> > __ptr_;
};

typedef struct {
	unsigned _field1;
	unsigned _field2;
	unsigned _field3;
	XXStruct_H_8QpB _field4;
} XXStruct_WOmNxD;


