/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices
 */

#import "GeoServices-Structs.h"
#import "GEOTileServerProxyDelegate.h"
#import "GEOResourceManifestTileGroupObserver.h"
#import "GEOTileLoader.h"

@class GEOTileCache, NSMutableArray, NSMutableSet, GEOTileServerProxy, GEOTileLoaderConfiguration;
@protocol OS_dispatch_queue, GEOTileLoaderInternalDelegate;

__attribute__((visibility("hidden")))
@interface GEOTileLoaderInternal : GEOTileLoader <GEOTileServerProxyDelegate, GEOResourceManifestTileGroupObserver> {
	list<LoadItem, std::__1::allocator<LoadItem> > _loadItems;	// 4 = 0x4
	mutex _lock;	// 16 = 0x10
	GEOTileCache *_cache;	// 60 = 0x3c
	GEOTileCache *_expiringCache;	// 64 = 0x40
	unique_ptr<geo::DispatchTimer, std::__1::default_delete<geo::DispatchTimer> > _timer;	// 68 = 0x44
	NSObject<OS_dispatch_queue> *_loadQ;	// 72 = 0x48
	NSMutableSet *_openers;	// 76 = 0x4c
	XXStruct_gLbvpC _sortPoint;	// 80 = 0x50
	GEOTileServerProxy *_proxy;	// 96 = 0x60
	int _memoryHits;	// 100 = 0x64
	int _diskHits;	// 104 = 0x68
	int _networkHits;	// 108 = 0x6c
	list<ShrinkCacheRequester, std::__1::allocator<ShrinkCacheRequester> > _shrinkCacheRequesters;	// 112 = 0x70
	NSMutableArray *_tileDecoders;	// 124 = 0x7c
	BOOL _networkActive;	// 128 = 0x80
	id<GEOTileLoaderInternalDelegate> _internalDelegate;	// 132 = 0x84
	NSObject<OS_dispatch_queue> *_internalDelegateQ;	// 136 = 0x88
	GEOTileLoaderConfiguration *_config;	// 140 = 0x8c
	mutex _usageLock;	// 144 = 0x90
	unordered_map<_GEOTileKey, UsageData, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<std::__1::pair<const _GEOTileKey, UsageData> > > _usageData;	// 188 = 0xbc
	unique_ptr<geo::DispatchTimer, std::__1::default_delete<geo::DispatchTimer> > _usageTimer;	// 208 = 0xd0
	BOOL _isUsageTimerScheduled;	// 212 = 0xd4
	int _rollingBatchId;	// 216 = 0xd8
	deque<ErrorInfo, std::__1::allocator<ErrorInfo> > _recentErrors;	// 220 = 0xdc
}
@property(readonly, assign) int diskHits;	// G=0x30ecc279; converted property
@property(assign) id internalDelegate;	// G=0x30ecc1d9; S=0x30ecc1c9; converted property
@property(retain) id internalDelegateQ;	// G=0x30ecc215; S=0x30ecc1e9; converted property
@property(readonly, assign) int memoryHits;	// G=0x30ecc269; converted property
@property(readonly, assign) int networkHits;	// G=0x30ecc289; converted property
@property(readonly, retain) GEOTileServerProxy *proxy;	// G=0x30ecc1b9; converted property
- (id)init;	// 0x30ec7521
- (id)initWithConfiguration:(id)configuration;	// 0x30ec6fb1
- (id).cxx_construct;	// 0x30ecc345
- (void).cxx_destruct;	// 0x30ecc299
- (void)_activeTileGroupChanged:(id)changed;	// 0x30eca491
- (void)_cancel:(__list_iterator<LoadItem, void *> *)cancel err:(id)err;	// 0x30ec842d
- (BOOL)_cancelIfNeeded:(__list_iterator<LoadItem, void *> *)needed;	// 0x30ec86e1
- (id)_findInCache:(const GEOTileKey *)cache;	// 0x30ecc225
- (void)_loadedTile:(id)tile forKey:(const GEOTileKey *)key info:(id)info;	// 0x30eca659
- (void)_requestOnlineTiles;	// 0x30ec9909
- (void)_tileEditionChanged:(id)changed;	// 0x30eca4b5
- (void)_timerFired;	// 0x30eca001
- (void)_updateNetworkActive;	// 0x30ec82f5
- (void)_usageTimerFired;	// 0x30ec95a1
- (void)beginPreloadSessionOfSize:(unsigned long long)size forClient:(id)client;	// 0x30eca3c1
- (id)cachedTileForKey:(const GEOTileKey *)key;	// 0x30ecc259
- (void)cancelAllForClient:(id)client;	// 0x30eca239
- (void)cancelKey:(const GEOTileKey *)key forClient:(id)client;	// 0x30eca101
- (void)clearAllCaches;	// 0x30eca451
- (void)closeForClient:(id)client;	// 0x30ec81d9
- (void)dealloc;	// 0x30ec7561
- (id)description;	// 0x30ec7699
// converted property getter: - (int)diskHits;	// 0x30ecc279
- (void)endPreloadSessionForClient:(id)client;	// 0x30eca3e1
- (void)expireTilesWithPredicate:(id)predicate;	// 0x30eca589
// converted property getter: - (id)internalDelegate;	// 0x30ecc1d9
// converted property getter: - (id)internalDelegateQ;	// 0x30ecc215
- (void)loadKey:(const GEOTileKey *)key priority:(unsigned)priority forClient:(id)client options:(unsigned)options callbackQ:(id)q beginNetwork:(id)network callback:(id)callback;	// 0x30ec98a5
- (void)loadKey:(const GEOTileKey *)key priority:(unsigned)priority forClient:(id)client proxyClient:(id)client4 options:(unsigned)options callbackQ:(id)q beginNetwork:(id)network callback:(id)callback;	// 0x30ec885d
// converted property getter: - (int)memoryHits;	// 0x30ecc269
// converted property getter: - (int)networkHits;	// 0x30ecc289
- (void)openForClient:(id)client;	// 0x30ec8019
// converted property getter: - (id)proxy;	// 0x30ecc1b9
- (void)proxy:(id)proxy didShrinkDiskCacheByAmount:(unsigned long long)amount;	// 0x30ecbc6d
- (void)proxy:(id)proxy failedToLoadAllPendingTilesWithError:(id)error;	// 0x30ecb98d
- (void)proxy:(id)proxy failedToLoadTiles:(id)loadTiles error:(id)error;	// 0x30ecb03d
- (void)proxy:(id)proxy loadedTile:(id)tile forKey:(const GEOTileKey *)key info:(id)info;	// 0x30ecb015
- (void)proxy:(id)proxy willGoToNetworkForTiles:(id)tiles;	// 0x30ecbd25
- (void)registerTileDecoder:(id)decoder;	// 0x30eca4c5
- (void)registerTileLoader:(Class)loader;	// 0x30eca531
- (void)reportCorruptTile:(const GEOTileKey *)tile;	// 0x30eca639
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)resourceManifestManager;	// 0x30eca4b1
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)resourceManifestManager;	// 0x30eca4a1
// converted property setter: - (void)setInternalDelegate:(id)delegate;	// 0x30ecc1c9
// converted property setter: - (void)setInternalDelegateQ:(id)q;	// 0x30ecc1e9
- (void)setSortPoint:(const XXStruct_gLbvpC *)point;	// 0x30eca0c5
- (void)shrinkDiskCacheToSize:(unsigned long long)size callbackQ:(id)q finished:(id)finished;	// 0x30eca401
@end

