/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

#import "ML3Entity.h"
#import "MusicLibrary-Structs.h"

@class NSArray, NSString, ML3Predicate;

@interface ML3Container : ML3Entity {
}
@property(readonly, assign) NSArray *cloudDisplayOrderingTerms;	// G=0x31559b85; 
@property(readonly, assign) NSArray *displayOrderingTerms;	// G=0x31559c2d; 
@property(readonly, assign) ML3Predicate *dynamicPredicate;	// G=0x31559799; 
@property(readonly, assign, getter=isLimitOrderingDescending) BOOL limitOrderingDescending;	// G=0x31559899; 
@property(readonly, assign) NSArray *limitOrderingTerms;	// G=0x31559a41; 
@property(readonly, assign) long long limitValue;	// G=0x31559abd; 
@property(readonly, assign, getter=isLimitedByCount) BOOL limitedByCount;	// G=0x3155984d; 
@property(readonly, assign) NSString *limitingProperty;	// G=0x31559939; 
@property(readonly, assign) ML3Predicate *staticPredicate;	// G=0x3155973d; 
+ (id)__mediaTypesForTracksWithDatabaseConnection:(id)databaseConnection tracksPersistentIDsEnumerationBlock:(id)block;	// 0x3155b425
+ (void)_addMediaTypesToContainerWithPersistentID:(long long)persistentID mediaTypes:(id)types connection:(id)connection;	// 0x3155bf11
+ (void)_clearContainerMediaTypeInContainerWithPersistentID:(long long)persistentID connection:(id)connection;	// 0x3155bde9
+ (void)_insertNewSmartPlaylist:(id)playlist criteriaBlob:(id)blob evaluationOrder:(unsigned long)order limited:(BOOL)limited trackOrder:(unsigned long)order5 distinguishedKind:(int)kind inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x31558975
+ (id)_mediaTypesForTracksInContainerWithPersistentID:(long long)persistentID connection:(id)connection;	// 0x3155baed
+ (id)_mediaTypesForTracksWithSwappedPersistentIDs:(const long long *)swappedPersistentIDs count:(int)count connection:(id)connection;	// 0x3155b96d
+ (id)_mediaTypesForTracksWithSwappedPersistentIDsInArray:(id)array connection:(id)connection;	// 0x3155bccd
+ (void)_reloadContainedMediaTypesForContainerWithPersistID:(long long)persistID connection:(id)connection;	// 0x3155c72d
+ (void)_removeMediaTypesFromContainerWithPersistentID:(long long)persistentID mediaTypes:(id)types connection:(id)connection;	// 0x3155c3d9
+ (void)_updateContainedMediaTypeInContainerWithPersistentID:(long long)persistentID connection:(id)connection itemUpdateBlock:(id)block;	// 0x3155b07d
+ (id)autoCreatedBuiltInSmartPlaylistsPIDs:(id)smartPlaylistsPIDs;	// 0x31559169
+ (BOOL)createMissingBuiltInSmartPlaylists:(id)smartPlaylists;	// 0x31558cf5
+ (id)databaseTable;	// 0x3151314d
+ (id)defaultFilterPredicates;	// 0x31557239
+ (id)defaultOrderingProperties;	// 0x31515329
+ (void)deleteAutoCreatedBuiltInSmartPlaylistsPIDs:(id)smartPlaylistsPIDs inLibrary:(id)library;	// 0x315593d1
+ (id)extraTablesToDelete;	// 0x3155720d
+ (id)foreignColumnForProperty:(id)property;	// 0x315571f1
+ (id)foreignDatabaseTableForProperty:(id)property;	// 0x315571d5
+ (BOOL)hasCriterionInCriteriaList:(SearchCriteriaList *)criteriaList forITDBTrackField:(int)itdbtrackField;	// 0x315585bd
+ (void)initialize;	// 0x31511559
+ (id)joinClausesForProperty:(id)property;	// 0x315130c9
+ (id)nextFilepathForPlaylistType:(int)playlistType withPersistentID:(unsigned long long)persistentID inLibrary:(id)library;	// 0x315572d9
+ (id)persistentIDColumnForTable:(id)table;	// 0x3155721d
+ (void)populateDynamicContainersInLibrary:(id)library;	// 0x3155a881
+ (void)populateDynamicContainersInLibrary:(id)library createBuiltinSmartPlaylists:(BOOL)playlists;	// 0x3155a8a5
+ (void)populateDynamicContainersWithTrackPersistentID:(id)trackPersistentID inLibrary:(id)library;	// 0x3155a8c9
+ (void)populateDynamicContainersWithTrackPersistentID:(id)trackPersistentID inLibrary:(id)library createBuiltinSmartPlaylists:(BOOL)playlists;	// 0x3155a901
+ (void)populateMediaTypesOfStaticContainersInLibrary:(id)library;	// 0x3155c7c5
+ (void)populateSortOrdersOfPropertyValues:(id)propertyValues inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x315574bd
+ (void)populateStaticItemsOfDynamicContainersInLibrary:(id)library;	// 0x3155a10d
+ (id)predicateForCriteriaList:(SearchCriteriaList *)criteriaList dynamicCriteria:(BOOL)criteria;	// 0x31558679
+ (int)revisionTrackingCode;	// 0x315571b5
+ (id)sectionPropertyForProperty:(id)property;	// 0x315571b9
+ (BOOL)smartCriteriaCanBeEvaluated:(id)evaluated;	// 0x31557419
- (id)initWithDictionary:(id)dictionary inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x315576fd
- (void)_accessCurrentSwappedPersisentIDsUsingBlock:(id)block;	// 0x3155d151
- (void)_setContainerSeedItemPersistentIDValue:(id)value;	// 0x31557e25
- (BOOL)_setSwappedItemPersistentIDs:(const long long *)ids mediaTypesToRemove:(id)remove mediaTypesToAdd:(id)add size:(int)size notify:(BOOL)notify;	// 0x3155d039
- (BOOL)_setSwappedItemPersistentIDs:(const long long *)ids reloadContainedMediaTypes:(BOOL)types mediaTypesToRemove:(id)remove mediaTypesToAdd:(id)add size:(int)size notify:(BOOL)notify;	// 0x3155cab5
- (BOOL)_setSwappedItemPersistentIDs:(const long long *)ids reloadContainedMediaTypes:(BOOL)types size:(int)size;	// 0x3155d0f1
- (BOOL)_setSwappedItemPersistentIDs:(const long long *)ids reloadContainedMediaTypes:(BOOL)types size:(int)size notify:(BOOL)notify;	// 0x3155d0b9
- (BOOL)addTrackWithPersistentID:(long long)persistentID;	// 0x3155e125
- (BOOL)addTracksWithPersistentIDs:(long long *)persistentIDs count:(unsigned)count;	// 0x3155e151
- (BOOL)addTracksWithPersistentIDs:(long long *)persistentIDs count:(unsigned)count notify:(BOOL)notify;	// 0x3155e175
// declared property getter: - (id)cloudDisplayOrderingTerms;	// 0x31559b85
// declared property getter: - (id)displayOrderingTerms;	// 0x31559c2d
// declared property getter: - (id)dynamicPredicate;	// 0x31559799
- (id)evaluationOrderingTerms;	// 0x315599c5
- (SearchCriteriaList *)importedCriteriaList;	// 0x315596a9
- (BOOL)isEvaluationOrderingDescending;	// 0x315597f5
// declared property getter: - (BOOL)isLimitOrderingDescending;	// 0x31559899
// declared property getter: - (BOOL)isLimitedByCount;	// 0x3155984d
// declared property getter: - (id)limitOrderingTerms;	// 0x31559a41
// declared property getter: - (long long)limitValue;	// 0x31559abd
// declared property getter: - (id)limitingProperty;	// 0x31559939
- (BOOL)moveTrackFromIndex:(unsigned)index toIndex:(unsigned)index2;	// 0x3155e649
- (id)populateSQLWithStaticTrackPersistentID:(id)staticTrackPersistentID;	// 0x31559e51
- (id)populateStatementParametersWithStaticTrackPersistentID:(id)staticTrackPersistentID;	// 0x3155a049
- (BOOL)removeAllTracks;	// 0x3155d129
- (BOOL)removeTracksAtIndexes:(id)indexes;	// 0x3155df8d
- (BOOL)removeTracksAtIndexes:(id)indexes notify:(BOOL)notify;	// 0x3155df69
- (BOOL)removeTracksAtIndexes:(id)indexes notify:(BOOL)notify indexesTransformBlock:(id)block;	// 0x3155d4a1
- (BOOL)removeTracksWithPersistentIDs:(const long long *)persistentIDs atFilteredIndexes:(id)filteredIndexes;	// 0x3155dfad
- (BOOL)setContainsTrack:(BOOL)track forPersistentID:(long long)persistentID notify:(BOOL)notify;	// 0x3155db95
- (BOOL)setTracksWithPersistentIDs:(const long long *)persistentIDs count:(unsigned)count;	// 0x3155eb39
- (BOOL)setTracksWithPersistentIDs:(const long long *)persistentIDs count:(unsigned)count notify:(BOOL)notify;	// 0x3155eb5d
- (BOOL)setTracksWithSwappedPersistentIDData:(id)swappedPersistentIDData;	// 0x3155ef8d
- (void)setValues:(id)values forProperties:(id)properties async:(BOOL)async withCompletionBlock:(id)completionBlock;	// 0x315580e5
// declared property getter: - (id)staticPredicate;	// 0x3155973d
@end

