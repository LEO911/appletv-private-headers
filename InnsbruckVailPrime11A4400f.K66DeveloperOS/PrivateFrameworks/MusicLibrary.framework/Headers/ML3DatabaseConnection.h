/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

#import "MusicLibrary-Structs.h"
#import </libobjc.A.h>

@class NSMutableArray, CPLRUDictionary, NSHashTable, NSFileHandle, NSString, NSUUID, ML3DatabaseConnectionPool;
@protocol ML3DatabaseConnectionDelegate, OS_dispatch_queue;

@interface ML3DatabaseConnection : NSObject {
	sqlite3 *_sqlitedb;	// 4 = 0x4
	BOOL _isOpen;	// 8 = 0x8
	CPLRUDictionary *_statementCache;	// 12 = 0xc
	NSHashTable *_statements;	// 16 = 0x10
	unsigned _statementsSinceLastCheckpoint;	// 20 = 0x14
	NSObject<OS_dispatch_queue> *_serialQueue;	// 24 = 0x18
	unsigned _transactionLevel;	// 28 = 0x1c
	BOOL _nestedTransactionWantsToRollback;	// 32 = 0x20
	NSMutableArray *_enqueuedTransactionCommitBlocks;	// 36 = 0x24
	ML3DatabaseConnectionPool *_owningPool;	// 40 = 0x28
	NSMutableArray *_registeredFunctions;	// 44 = 0x2c
	NSMutableArray *_registeredModules;	// 48 = 0x30
	int _profilingLevel;	// 52 = 0x34
	NSFileHandle *_profilingLogHandle;	// 56 = 0x38
	int _willDeleteDatabaseNotifyToken;	// 60 = 0x3c
	BOOL _shouldCacheStatements;	// 64 = 0x40
	BOOL _isReadOnly;	// 65 = 0x41
	BOOL _automaticCheckpointingEnabled;	// 66 = 0x42
	NSString *_databasePath;	// 68 = 0x44
	NSUUID *_uniqueIdentifier;	// 72 = 0x48
	id<ML3DatabaseConnectionDelegate> _connectionDelegate;	// 76 = 0x4c
	const void *_iTunesExtensions;	// 80 = 0x50
	unsigned _checkpointStatementThreshold;	// 84 = 0x54
}
@property(assign, nonatomic) BOOL automaticCheckpointingEnabled;	// G=0x315ab4f1; S=0x315ab501; @synthesize=_automaticCheckpointingEnabled
@property(assign, nonatomic) unsigned checkpointStatementThreshold;	// G=0x315ab511; S=0x315ab521; @synthesize=_checkpointStatementThreshold
@property(assign, nonatomic) __weak id<ML3DatabaseConnectionDelegate> connectionDelegate;	// G=0x315ab49d; S=0x315ab4bd; @synthesize=_connectionDelegate
@property(readonly, assign, nonatomic) NSString *databasePath;	// G=0x315ab44d; @synthesize=_databasePath
@property(assign, nonatomic) const void *iTunesExtensions;	// G=0x315ab4d1; S=0x315ab4e1; @synthesize=_iTunesExtensions
@property(readonly, assign, nonatomic) BOOL isInTransaction;	// G=0x315a81c1; 
@property(readonly, assign, nonatomic) BOOL isOpen;	// G=0x315a78ad; 
@property(assign, nonatomic, setter=setReadOnly:) BOOL isReadOnly;	// G=0x315ab47d; S=0x315a78dd; @synthesize=_isReadOnly
@property(assign, nonatomic) int profilingLevel;	// G=0x315a7955; S=0x315a7965; 
@property(assign, nonatomic) BOOL shouldCacheStatements;	// G=0x315ab45d; S=0x315ab46d; @synthesize=_shouldCacheStatements
@property(readonly, assign, nonatomic) NSUUID *uniqueIdentifier;	// G=0x315ab48d; @synthesize=_uniqueIdentifier
- (id)init;	// 0x315a7101
- (id)initWithDatabasePath:(id)databasePath;	// 0x315a7171
- (void).cxx_destruct;	// 0x315ab531
- (void)_cacheStatement:(id)statement forSQL:(id)sql;	// 0x315a95ad
- (id)_cachedStatementForSQL:(id)sql;	// 0x315a9565
- (void)_createDatabaseDirectoryIfNonexistent;	// 0x315aa045
- (void)_createDatabaseFileIfNonexistent;	// 0x315aa11d
- (BOOL)_databaseFileExists;	// 0x315a9fa9
- (void)_ensureConnectionIsOpen;	// 0x315a9f1d
- (BOOL)_executeStatement:(id)statement;	// 0x315a9b49
- (void)_executeTransactionCommitBlocks:(BOOL)blocks;	// 0x315ab2f1
- (void)_finalizeAllStatements;	// 0x315aa809
- (int)_finalizeStatement:(id)statement;	// 0x315a8f55
- (BOOL)_handleBusyLockWithNumberOfRetries:(int)retries;	// 0x315aaae1
- (BOOL)_handleDatabaseCorruption;	// 0x315aac05
- (BOOL)_internalBeginTransactionWithBehaviorType:(unsigned)behaviorType;	// 0x315a93f5
- (BOOL)_internalEndTransactionAndCommit:(BOOL)commit;	// 0x315a9489
- (id)_internalExecuteQuery:(id)query withParameters:(id)parameters limitProperty:(id)property limitValue:(long long)value;	// 0x315a90c5
- (BOOL)_internalExecuteUpdate:(id)update withParameters:(id)parameters error:(id *)error;	// 0x315a9221
- (BOOL)_isSharedMediaLibraryDatabase;	// 0x315aa769
- (void)_logCurrentError;	// 0x315aa2f5
- (void)_logCurrentErrorWhilePerformingStatementOperation:(id)operation statement:(id)statement;	// 0x315aa275
- (void)_logCurrentErrorWhilePerformingStatementOperation:(id)operation statementSQL:(id)sql;	// 0x315aa1f5
- (void)_onBackgroundQueueHandleDatabaseDeletion;	// 0x315aab15
- (int)_onQueueFinalizeStatement:(id)statement;	// 0x315aa7c1
- (BOOL)_openWithFlags:(int)flags isRetry:(BOOL)retry;	// 0x315a79bd
- (id)_owningPool;	// 0x315a9091
- (id)_prepareStatement:(id)statement error:(id *)error;	// 0x315a95f5
- (id)_registeredModuleNamed:(id)named;	// 0x315a9df9
- (void)_resetUnfinalizedStatements;	// 0x315aa9a5
- (void)_setOwningPool:(id)pool;	// 0x315a90b1
- (id)_shortDescription;	// 0x315a9539
- (sqlite3 *)_sqliteHandle;	// 0x315a8f45
- (void)_updateProfilingLevel;	// 0x315aa345
- (BOOL)_validatePreparedStatement:(id)statement error:(id *)error;	// 0x315a998d
- (void)_writeToProfilingLog:(id)profilingLog;	// 0x315aa541
// declared property getter: - (BOOL)automaticCheckpointingEnabled;	// 0x315ab4f1
- (int)checkpointDatabase;	// 0x315a8eb9
// declared property getter: - (unsigned)checkpointStatementThreshold;	// 0x315ab511
- (BOOL)close;	// 0x315a7db1
// declared property getter: - (id)connectionDelegate;	// 0x315ab49d
// declared property getter: - (id)databasePath;	// 0x315ab44d
- (BOOL)databasePathExists;	// 0x315a7fb5
- (void)dealloc;	// 0x315a7651
- (BOOL)deleteDatabase;	// 0x315a8ca9
- (id)description;	// 0x315a76bd
- (void)enqueueBlockForTransactionCommit:(id)transactionCommit;	// 0x315a8431
- (id)executeQuery:(id)query;	// 0x315a8025
- (id)executeQuery:(id)query withParameters:(id)parameters;	// 0x315a8049
- (id)executeQuery:(id)query withParameters:(id)parameters limitProperty:(id)property limitValue:(long long)value;	// 0x315a8091
- (BOOL)executeUpdate:(id)update;	// 0x315a8165
- (BOOL)executeUpdate:(id)update withParameters:(id)parameters error:(id *)error;	// 0x315a8185
- (void)flush;	// 0x315a7f85
// declared property getter: - (const void *)iTunesExtensions;	// 0x315ab4d1
- (BOOL)isEqual:(id)equal;	// 0x315a7819
// declared property getter: - (BOOL)isInTransaction;	// 0x315a81c1
// declared property getter: - (BOOL)isOpen;	// 0x315a78ad
// declared property getter: - (BOOL)isReadOnly;	// 0x315ab47d
- (long long)lastInsertionRowID;	// 0x315a8a49
- (void *)moduleContextForModuleName:(id)moduleName;	// 0x315a884d
- (BOOL)open;	// 0x315a798d
- (id)openBlobInTable:(id)table column:(id)column row:(long long)row readOnly:(BOOL)only;	// 0x315a8889
- (BOOL)performTransactionWithBlock:(id)block;	// 0x315a83c5
- (BOOL)performTransactionWithBlock:(id)block usingBehaviorType:(unsigned)type;	// 0x315a83dd
- (BOOL)popToRootTransactionAndCommit:(BOOL)rootTransactionAndCommit;	// 0x315a835d
- (BOOL)popTransactionAndCommit:(BOOL)commit;	// 0x315a8279
// declared property getter: - (int)profilingLevel;	// 0x315a7955
- (BOOL)pushTransaction;	// 0x315a81d9
- (BOOL)pushTransactionUsingBehaviorType:(unsigned)type;	// 0x315a81f1
- (BOOL)registerFunctionName:(id)name argumentCount:(int)count block:(id)block;	// 0x315a8469
- (BOOL)registerFunctionName:(id)name argumentCount:(int)count functionPointer:(/*function-pointer*/ void *)pointer;	// 0x315a8529
- (BOOL)registerFunctionName:(id)name argumentCount:(int)count functionPointer:(/*function-pointer*/ void *)pointer userData:(void *)data;	// 0x315a854d
- (BOOL)registerModuleName:(id)name moduleMethods:(const sqlite3_module *)methods;	// 0x315a8615
// declared property setter: - (void)setAutomaticCheckpointingEnabled:(BOOL)enabled;	// 0x315ab501
// declared property setter: - (void)setCheckpointStatementThreshold:(unsigned)threshold;	// 0x315ab521
// declared property setter: - (void)setConnectionDelegate:(id)delegate;	// 0x315ab4bd
// declared property setter: - (void)setITunesExtensions:(const void *)extensions;	// 0x315ab4e1
- (void)setModuleContext:(void *)context forModuleName:(id)moduleName contextReleaseBlock:(id)block;	// 0x315a87cd
// declared property setter: - (void)setProfilingLevel:(int)level;	// 0x315a7965
// declared property setter: - (void)setReadOnly:(BOOL)only;	// 0x315a78dd
// declared property setter: - (void)setShouldCacheStatements:(BOOL)cacheStatements;	// 0x315ab46d
// declared property getter: - (BOOL)shouldCacheStatements;	// 0x315ab45d
- (id)sqliteError;	// 0x315a8a5d
- (BOOL)tableExists:(id)exists;	// 0x315a80ed
// declared property getter: - (id)uniqueIdentifier;	// 0x315ab48d
@end

