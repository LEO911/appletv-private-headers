/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices
 */

#import </libobjc.A.h>

@class NSXPCConnection, NSString;
@protocol AFDictationDelegate;

@interface AFDictationConnection : NSObject {
	NSXPCConnection *_assistantConnection;	// 4 = 0x4
	NSString *_lastUsedLanguage;	// 8 = 0x8
	id<AFDictationDelegate> _delegate;	// 12 = 0xc
	float _averagePower;	// 16 = 0x10
	float _peakPower;	// 20 = 0x14
	BOOL _isCapturingSpeech;	// 24 = 0x18
	BOOL _hasActiveRequest;	// 25 = 0x19
}
@property(readonly, assign) float averagePower;	// G=0x301a4889; converted property
@property(readonly, assign, nonatomic) BOOL currentlyUsingLocalDication;	// G=0x301a45bd; 
@property(assign, nonatomic) __weak id<AFDictationDelegate> delegate;	// G=0x301a4905; S=0x301a4925; @synthesize=_delegate
@property(readonly, assign) float peakPower;	// G=0x301a4899; converted property
+ (BOOL)dictationIsEnabled;	// 0x301a4361
+ (BOOL)dictationIsSupportedForLanguageCode:(id)languageCode error:(id *)error;	// 0x301a43f9
+ (void)fetchSupportedLanguageCodes:(id)codes;	// 0x301a4531
- (void).cxx_destruct;	// 0x301a4939
- (id)_assistantConnection;	// 0x301a3fa1
- (id)_assistantDictationService;	// 0x301a4101
- (void)_availabilityChanged:(id)changed;	// 0x301a4149
- (void)_checkAndSetIsCapturingSpeech:(BOOL)speech;	// 0x301a358d
- (void)_clearConnections;	// 0x301a3d79
- (void)_registerInvalidationHandlerForXPCConnection:(id)xpcconnection;	// 0x301a3e01
- (void)_speechRecordingDidUpdateAveragePower:(float)_speechRecording peakPower:(float)power;	// 0x301a3655
- (void)_tellSpeechDelegateDidHypothesizeSpeechPhrases:(id)_tellSpeechDelegate languageModel:(id)model;	// 0x301a38d9
- (void)_tellSpeechDelegateDidRecognizeSpeechPhrases:(id)_tellSpeechDelegate languageModel:(id)model correctionIdentifier:(id)identifier;	// 0x301a3971
- (void)_tellSpeechDelegateRecognitionDidFail:(id)_tellSpeechDelegateRecognition;	// 0x301a3ce5
- (void)_tellSpeechDelegateRecordingDidBegin;	// 0x301a36e9
- (void)_tellSpeechDelegateRecordingDidCancel;	// 0x301a37d1
- (void)_tellSpeechDelegateRecordingDidEnd;	// 0x301a375d
- (void)_tellSpeechDelegateRecordingDidFail:(id)_tellSpeechDelegateRecording;	// 0x301a3845
- (void)_tellSpeechDelegateRecordingWillBegin;	// 0x301a3675
- (void)_willCancelDictation;	// 0x301a42b9
- (void)_willCompleteDictation;	// 0x301a4329
- (void)_willFailDictationWithError:(id)error;	// 0x301a42f1
- (void)_willStartDictation;	// 0x301a4289
// converted property getter: - (float)averagePower;	// 0x301a4889
- (void)beginAvailabilityMonitoring;	// 0x301a41ed
- (void)cancelAvailabilityMonitoring;	// 0x301a4241
- (void)cancelSpeech;	// 0x301a46c9
// declared property getter: - (BOOL)currentlyUsingLocalDication;	// 0x301a45bd
- (void)dealloc;	// 0x301a3539
// declared property getter: - (id)delegate;	// 0x301a4905
- (BOOL)dictationIsAvailableForLanguage:(id)language;	// 0x301a41a5
- (void)endSession;	// 0x301a48a9
// converted property getter: - (float)peakPower;	// 0x301a4899
- (void)preheat;	// 0x301a45b9
- (void)sendSpeechCorrection:(id)correction forIdentifier:(id)identifier;	// 0x301a4821
// declared property setter: - (void)setDelegate:(id)delegate;	// 0x301a4925
- (void)setRecordingAlertRoute:(int)route;	// 0x301a47a5
- (void)startDictationWithLanguageCode:(id)languageCode options:(id)options;	// 0x301a4691
- (void)startDictationWithLanguageCode:(id)languageCode options:(id)options speechOptions:(id)options3;	// 0x301a45c1
- (void)startDictationWithSpeechFileAtURL:(id)url isNarrowBand:(BOOL)band options:(id)options forLanguage:(id)language;	// 0x301a49d1
- (void)startDictationWithSpeechFileAtURL:(id)url options:(id)options forLanguage:(id)language;	// 0x301a497d
- (void)stopSpeech;	// 0x301a4791
- (void)stopSpeechWithOptions:(id)options;	// 0x301a472d
@end

