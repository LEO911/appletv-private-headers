/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/Symbolication.framework/Symbolication
 */

#import "Symbolication-Structs.h"
#import </libobjc.A.h>

@class NSMapTable, VMUTaskMemoryCache, NSConditionLock, VMUProcessDescription, NSMutableArray, NSString;

@interface VMUSampler : NSObject {
	unsigned _options;	// 4 = 0x4
	int _pid;	// 8 = 0x8
	unsigned _task;	// 12 = 0xc
	BOOL _needTaskPortDealloc;	// 16 = 0x10
	BOOL _recordThreadStates;	// 17 = 0x11
	BOOL _taskIs64Bit;	// 18 = 0x12
	NSString *_processName;	// 20 = 0x14
	VMUProcessDescription *_processDescription;	// 24 = 0x18
	CSTypeRef _symbolicator;	// 28 = 0x1c
	VMUTaskMemoryCache *_memCache;	// 36 = 0x24
	sampling_context_t *_samplingContext;	// 40 = 0x28
	unsigned _mainThread;	// 44 = 0x2c
	NSMapTable *_lastThreadBacktraceMap;	// 48 = 0x30
	unsigned _numberOfCopiedBacktraces;	// 52 = 0x34
	unsigned *_previousThreadList;	// 56 = 0x38
	unsigned _previousThreadCount;	// 60 = 0x3c
	unsigned _maxPreviousThreadCount;	// 64 = 0x40
	double _tbRate;	// 68 = 0x44
	double _tbInterval;	// 76 = 0x4c
	NSConditionLock *_stateLock;	// 84 = 0x54
	double _interval;	// 88 = 0x58
	double _timeLimit;	// 96 = 0x60
	unsigned _sampleLimit;	// 104 = 0x68
	BOOL _sampling;	// 108 = 0x6c
	unsigned _samplingThreadPort;	// 112 = 0x70
	unsigned _numberOfSamples;	// 116 = 0x74
	NSMutableArray *_samples;	// 120 = 0x78
	BOOL _stacksFixed;	// 124 = 0x7c
	void *_cfi;	// 128 = 0x80
	id _delegate;	// 132 = 0x84
	double _timeSpentSamplingWithoutCFI;	// 136 = 0x88
	double _timeSpentSamplingWithCFI;	// 144 = 0x90
	unsigned _dispatchThreadSoftLimit;	// 152 = 0x98
	unsigned _dispatchThreadSoftLimitCount;	// 156 = 0x9c
	unsigned _dispatchThreadHardLimit;	// 160 = 0xa0
	unsigned _dispatchThreadHardLimitCount;	// 164 = 0xa4
}
@property(assign) id delegate;	// G=0x32915f3d; S=0x32915f2d; converted property
@property(readonly, assign) unsigned mainThread;	// G=0x32915e25; converted property
@property(readonly, assign) int pid;	// G=0x32915d71; converted property
@property(assign) unsigned sampleLimit;	// G=0x32915d31; S=0x32915d21; converted property
@property(readonly, retain) NSMutableArray *samples;	// G=0x32915d81; converted property
@property(assign) double samplingInterval;	// G=0x32915ccd; S=0x32915ca9; converted property
@property(assign) BOOL shouldOutputSignature;	// G=0x32915d55; S=0x32915d51; converted property
@property(readonly, assign) CSTypeRef symbolicator;	// G=0x32915d59; converted property
@property(assign) double timeLimit;	// G=0x32915d09; S=0x32915ce5; converted property
+ (void)initialize;	// 0x3291513d
+ (id)sampleAllThreadsOfPID:(int)pid;	// 0x32915799
+ (id)sampleAllThreadsOfPID:(int)pid withSymbolicator:(id)symbolicator;	// 0x329157ed
+ (id)sampleAllThreadsOfTask:(unsigned)task;	// 0x329157fd
+ (id)sampleAllThreadsOfTask:(unsigned)task symbolicate:(BOOL)symbolicate;	// 0x32915861
+ (id)sampleAllThreadsOfTask:(unsigned)task withSymbolicator:(id)symbolicator;	// 0x32915851
+ (id)sampleAllThreadsOfTask:(unsigned)task withSymbolicator:(id)symbolicator symbolicate:(BOOL)symbolicate;	// 0x329158c1
- (id)initWithPID:(int)pid;	// 0x32914599
- (id)initWithPID:(int)pid options:(unsigned)options;	// 0x329145dd
- (id)initWithPID:(int)pid orTask:(unsigned)task options:(unsigned)options;	// 0x32914199
- (id)initWithTask:(unsigned)task;	// 0x329145b9
- (id)initWithTask:(unsigned)task options:(unsigned)options;	// 0x329145fd
- (void)_checkDispatchThreadLimits;	// 0x329149b1
- (void)_fixupStacks:(id)stacks;	// 0x329151d5
- (void)_makeHighPriority;	// 0x32914791
- (void)_makeTimeshare;	// 0x329148b9
- (void)_runSamplingThread;	// 0x329153a9
- (id)createOutput;	// 0x32916439
- (void)dealloc;	// 0x32914621
// converted property getter: - (id)delegate;	// 0x32915f3d
- (id)dispatchQueueNameForSerialNumber:(unsigned long long)serialNumber;	// 0x32915f05
- (id)dispatchQueueNameForSerialNumber:(unsigned long long)serialNumber returnedConcurrentFlag:(BOOL *)flag returnedThreadId:(unsigned long long *)anId;	// 0x32915e9d
- (void)finalize;	// 0x32914751
- (void)flushData;	// 0x32915db9
- (void)forceStop;	// 0x32916019
- (void)initializeSamplingContext:(BOOL)context;	// 0x329148ed
// converted property getter: - (unsigned)mainThread;	// 0x32915e25
- (id)outputString;	// 0x32916131
// converted property getter: - (int)pid;	// 0x32915d71
- (void)preloadSymbols;	// 0x32915f4d
- (unsigned)recordSampleTo:(id)to beginTime:(double)time endTime:(double)time3 thread:(unsigned)thread;	// 0x32914a1d
- (id)sampleAllThreadsOnce;	// 0x329158d9
- (unsigned)sampleCount;	// 0x32915da9
- (void)sampleForDuration:(unsigned)duration interval:(unsigned)interval;	// 0x32915f89
// converted property getter: - (unsigned)sampleLimit;	// 0x32915d31
- (id)sampleThread:(unsigned)thread;	// 0x32915969
// converted property getter: - (id)samples;	// 0x32915d81
// converted property getter: - (double)samplingInterval;	// 0x32915ccd
// converted property setter: - (void)setDelegate:(id)delegate;	// 0x32915f2d
- (void)setRecordThreadStates:(BOOL)states;	// 0x32915d41
// converted property setter: - (void)setSampleLimit:(unsigned)limit;	// 0x32915d21
// converted property setter: - (void)setSamplingInterval:(double)interval;	// 0x32915ca9
// converted property setter: - (void)setShouldOutputSignature:(BOOL)outputSignature;	// 0x32915d51
// converted property setter: - (void)setTimeLimit:(double)limit;	// 0x32915ce5
// converted property getter: - (BOOL)shouldOutputSignature;	// 0x32915d55
- (BOOL)start;	// 0x32915a59
- (BOOL)stop;	// 0x32915b8d
- (void)stopSampling;	// 0x32916009
- (id)stopSamplingAndReturnCallNode;	// 0x32916029
// converted property getter: - (CSTypeRef)symbolicator;	// 0x32915d59
- (id)threadNameForThread:(unsigned)thread;	// 0x32915e7d
- (id)threadNameForThread:(unsigned)thread returnedThreadId:(unsigned long long *)anId returnedDispatchQueueSerialNum:(unsigned long long *)num;	// 0x32915e35
// converted property getter: - (double)timeLimit;	// 0x32915d09
- (BOOL)waitUntilDone;	// 0x32915c1d
- (void)writeOutput:(id)output append:(BOOL)append;	// 0x32916449
@end

