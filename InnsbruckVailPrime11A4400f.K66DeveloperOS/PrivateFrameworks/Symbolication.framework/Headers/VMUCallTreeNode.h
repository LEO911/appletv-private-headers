/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/Symbolication.framework/Symbolication
 */

#import </libobjc.A.h>
#import "Symbolication-Structs.h"

@class VMUCallTreeNode, NSString;

@interface VMUCallTreeNode : NSObject {
	VMUCallTreeNode *_parent;	// 4 = 0x4
	NSString *_name;	// 8 = 0x8
	unsigned long long _address;	// 12 = 0xc
	unsigned _count;	// 20 = 0x14
	unsigned long long _numBytes;	// 24 = 0x18
	unsigned _numChildren;	// 32 = 0x20
	union {
		VMUCallTreeNode *theChild;
		id *theChildren;
	} _un;	// 36 = 0x24
}
@property(readonly, assign) unsigned long long address;	// G=0x329105b1; converted property
@property(readonly, assign) unsigned count;	// G=0x329105c9; converted property
@property(readonly, retain) NSString *name;	// G=0x329105f1; converted property
@property(readonly, assign) unsigned long long numBytes;	// G=0x329105d9; converted property
@property(assign) unsigned numChildren;	// G=0x32910125; S=0x32910135; converted property
@property(readonly, retain) VMUCallTreeNode *parent;	// G=0x329105a1; converted property
+ (id)makeFakeRootForNode:(id)node;	// 0x32910509
+ (id)nodeWithName:(id)name address:(unsigned long long)address count:(unsigned)count numBytes:(unsigned long long)bytes;	// 0x32910025
+ (id)rootForSamples:(id)samples symbolicator:(CSTypeRef)symbolicator;	// 0x3290fff9
+ (id)rootForSamples:(id)samples symbolicator:(CSTypeRef)symbolicator sampler:(id)sampler options:(unsigned)options;	// 0x3290fef5
+ (id)rootForTraceData:(id)traceData;	// 0x32912ec1
- (id)initWithName:(id)name address:(unsigned long long)address count:(unsigned)count numBytes:(unsigned long long)bytes;	// 0x32910081
- (void)addChild:(id)child;	// 0x329103f9
- (void)addTraceEvent:(id)event forTraceData:(id)traceData;	// 0x32912d11
// converted property getter: - (unsigned long long)address;	// 0x329105b1
- (id)allChildren;	// 0x3291017d
- (id)browserName;	// 0x32910841
- (BOOL)callTreeHasBranches;	// 0x32911f85
- (id)chargeLibrariesInSet:(id)set toCaller:(id)caller parentLibrary:(id)library;	// 0x329126f1
- (id)chargeLibrariesToCallers:(id)callers keepBoundaries:(BOOL)boundaries;	// 0x32912979
- (id)chargeSystemLibrariesToCallersAndKeepBoundaries:(BOOL)callersAndKeepBoundaries;	// 0x329129f9
- (id)childAtIndex:(unsigned)index;	// 0x32910145
- (int)compare:(id)compare;	// 0x32910eed
- (int)comparePuttingMainThreadFirst:(id)first;	// 0x32911041
- (int)compareSizeAndCount:(id)count;	// 0x32910eb1
// converted property getter: - (unsigned)count;	// 0x329105c9
- (void)countFunctionOccurrencesInTree:(id)tree;	// 0x329116bd
- (void)dealloc;	// 0x329104a9
- (id)filterOutSymbols:(id)symbols;	// 0x32912649
- (id)filterOutSymbols:(id)symbols required:(id)required;	// 0x3291236d
- (id)findOrAddChildWithName:(id)name address:(unsigned long long)address;	// 0x32910e81
- (id)findOrAddChildWithName:(id)name address:(unsigned long long)address nodeSearchType:(int)type isLeafNode:(BOOL)node;	// 0x32910d2d
- (id)fullOutputWithThreshold:(unsigned)threshold;	// 0x32911f71
- (id)fullOutputWithThreshold:(unsigned)threshold showPseudoNodes:(BOOL)nodes;	// 0x3291173d
- (void)getBrowserName:(id)name;	// 0x32910601
- (id)invertedNode;	// 0x329120b9
- (BOOL)isMallocBlockContentNode;	// 0x3291091d
- (BOOL)isPseudo;	// 0x3291089d
- (id)largestTopOfStackPath;	// 0x3291152d
// converted property getter: - (id)name;	// 0x329105f1
- (id)nameWithStringsForSymbol:(id)symbol library:(id)library loadAddress:(id)address offset:(id)offset address:(id)address5 suffix:(id)suffix;	// 0x329109d5
- (id)nameWithoutOffset;	// 0x32910971
// converted property getter: - (unsigned long long)numBytes;	// 0x329105d9
// converted property getter: - (unsigned)numChildren;	// 0x32910125
// converted property getter: - (id)parent;	// 0x329105a1
- (void)parseNameIntoSymbol:(id *)symbol library:(id *)library loadAddress:(unsigned long long *)address offset:(unsigned long long *)offset address:(unsigned long long *)address5 suffix:(id *)suffix;	// 0x32910af1
- (id)pruneCount:(unsigned)count;	// 0x329129fd
- (id)pruneMallocSize:(unsigned long long)size;	// 0x32912b6d
- (id)pseudoName;	// 0x329108a1
- (id)pseudoNodeTopOfStackChild;	// 0x32911205
- (void)setChildren:(id)children;	// 0x32910205
// converted property setter: - (void)setNumChildren:(unsigned)children;	// 0x32910135
- (id)sortedChildrenWithPseudoNode;	// 0x3291146d
- (id)sortedChildrenWithPseudoNode:(id)pseudoNode withCompare:(SEL)compare;	// 0x32911325
- (id)stringFromCallTreeIndentIfNoBranches:(BOOL)callTreeIndentIfNoBranches;	// 0x329120a5
- (id)stringFromCallTreeIndentIfNoBranches:(BOOL)callTreeIndentIfNoBranches showPseudoNodes:(BOOL)nodes;	// 0x32911fc5
- (BOOL)symbolNameIsUnknown;	// 0x329108e1
@end

