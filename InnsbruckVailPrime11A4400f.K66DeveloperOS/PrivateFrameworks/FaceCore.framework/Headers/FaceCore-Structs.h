/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/FaceCore.framework/FaceCore
 */

typedef struct CGPoint {
	float x;
	float y;
} CGPoint;

typedef struct CGSize {
	float width;
	float height;
} CGSize;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct {
	CGPoint center;
	CGRect bounds;
} XXStruct_TruFrA;

typedef struct FaceCoreAPIInternal FaceCoreAPIInternal;

typedef struct FaceCoreContext FaceCoreContext;

typedef struct FaceCoreAPI {
	/*function-pointer*/ void **_field1;
	FaceCoreAPIInternal *_field2;
	FaceCoreContext *_field3;
	void *_field4;
} FaceCoreAPI;

typedef struct coord {
	int _field1;
	int _field2;
} coord;

typedef struct _Vector_impl {
	double *_field1;
	double *_field2;
	double *_field3;
} Vector_impl;

template<>
struct vector<double, std::allocator<double> > {
	Vector_impl _field1;
};

typedef struct _Vector_impl {
	coord *_field1;
	coord *_field2;
	coord *_field3;
} Vector_impl;

template<>
struct vector<vision::lib::coord, std::allocator<vision::lib::coord> > {
	Vector_impl _field1;
};

typedef struct face {
	int _field1;
	coord _field2;
	coord _field3;
	coord _field4;
	coord _field5;
	float _field6;
	int _field7;
	int _field8;
	vector<double, std::allocator<double> > _field9;
	int _field10;
	vector<vision::lib::coord, std::allocator<vision::lib::coord> > _field11;
	int _field12;
	bool _field13;
	bool _field14;
	bool _field15;
	bool _field16;
} face;

typedef struct CGImage *CGImageRef;

typedef struct image {
	char *_field1;
	int _field2;
	int _field3;
} image;


