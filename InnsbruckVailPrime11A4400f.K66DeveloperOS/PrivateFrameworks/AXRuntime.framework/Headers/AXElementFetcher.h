/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/AXRuntime.framework/AXRuntime
 */

#import </libobjc.A.h>
#import "AXRuntime-Structs.h"

@class NSMapTable, AXElementGroup, NSMutableDictionary, AXVisualElementGrouper, AXElementGroupPruner, NSArray, AXElement;
@protocol OS_dispatch_queue, OS_dispatch_source, AXElementFetcherDelegate;

@interface AXElementFetcher : NSObject {
	NSObject<OS_dispatch_queue> *_elementFetchQueue;	// 4 = 0x4
	NSObject<OS_dispatch_queue> *_elementAccessQueue;	// 8 = 0x8
	AXObserverRef _axRuntimeNotificationObserver;	// 12 = 0xc
	unsigned _scheduledFetchEvent;	// 16 = 0x10
	NSObject<OS_dispatch_source> *_eventCoalesceTimer;	// 20 = 0x14
	BOOL _enabled;	// 24 = 0x18
	BOOL _eventManagementEnabled;	// 25 = 0x19
	BOOL _groupingEnabled;	// 26 = 0x1a
	BOOL _shouldUsePadInterfaceHeuristics;	// 27 = 0x1b
	BOOL _fetchingElements;	// 28 = 0x1c
	id<AXElementFetcherDelegate> _delegate;	// 32 = 0x20
	int _fetchPolicy;	// 36 = 0x24
	NSMapTable *_fetchObservers;	// 40 = 0x28
	unsigned _activeFetchEvents;	// 44 = 0x2c
	NSArray *_elementCache;	// 48 = 0x30
	AXElementGroup *_rootGroupCache;	// 52 = 0x34
	AXElementGroup *_keyboardGroupCache;	// 56 = 0x38
	AXElement *_currentApp;	// 60 = 0x3c
	AXVisualElementGrouper *_visualElementGrouper;	// 64 = 0x40
	AXElementGroupPruner *_elementGroupPruner;	// 68 = 0x44
	NSMutableDictionary *_postFetchFilters;	// 72 = 0x48
}
@property(assign, nonatomic) unsigned activeFetchEvents;	// G=0x2fe0a5c5; S=0x2fe0a5d5; @synthesize=_activeFetchEvents
@property(readonly, assign, nonatomic) NSArray *availableElements;	// G=0x2fe05bf9; 
@property(retain, nonatomic) AXElement *currentApp;	// G=0x2fe05aed; S=0x2fe0a685; @synthesize=_currentApp
@property(assign, nonatomic) id<AXElementFetcherDelegate> delegate;	// G=0x2fe0a565; S=0x2fe0a575; @synthesize=_delegate
@property(retain, nonatomic) NSArray *elementCache;	// G=0x2fe0a5e5; S=0x2fe0a5f5; @synthesize=_elementCache
@property(retain, nonatomic) AXElementGroupPruner *elementGroupPruner;	// G=0x2fe0a6b5; S=0x2fe0a6c5; @synthesize=_elementGroupPruner
@property(assign, nonatomic, getter=isEnabled) BOOL enabled;	// G=0x2fe0a545; S=0x2fe0a555; @synthesize=_enabled
@property(assign, nonatomic, getter=isEventManagementEnabled) BOOL eventManagementEnabled;	// G=0x2fe0a605; S=0x2fe0a615; @synthesize=_eventManagementEnabled
@property(retain, nonatomic) NSMapTable *fetchObservers;	// G=0x2fe0a5a5; S=0x2fe0a5b5; @synthesize=_fetchObservers
@property(assign, nonatomic) int fetchPolicy;	// G=0x2fe0a585; S=0x2fe0a595; @synthesize=_fetchPolicy
@property(assign, nonatomic, getter=isFetchingElements) BOOL fetchingElements;	// G=0x2fe0a6f5; S=0x2fe0a705; @synthesize=_fetchingElements
@property(readonly, assign, nonatomic) AXElementGroup *firstKeyboardRow;	// G=0x2fe060ed; 
@property(assign, nonatomic, getter=isGroupingEnabled) BOOL groupingEnabled;	// G=0x2fe0a665; S=0x2fe0a675; @synthesize=_groupingEnabled
@property(readonly, assign, nonatomic) AXElementGroup *keyboardGroup;	// G=0x2fe05f4d; 
@property(retain, nonatomic) AXElementGroup *keyboardGroupCache;	// G=0x2fe0a645; S=0x2fe0a655; @synthesize=_keyboardGroupCache
@property(readonly, assign, nonatomic) AXElementGroup *lastKeyboardRow;	// G=0x2fe06161; 
@property(retain, nonatomic) NSMutableDictionary *postFetchFilters;	// G=0x2fe0a715; S=0x2fe0a725; @synthesize=_postFetchFilters
@property(readonly, assign, nonatomic) AXElementGroup *rootGroup;	// G=0x2fe05dad; 
@property(retain, nonatomic) AXElementGroup *rootGroupCache;	// G=0x2fe0a625; S=0x2fe0a635; @synthesize=_rootGroupCache
@property(assign, nonatomic) BOOL shouldUsePadInterfaceHeuristics;	// G=0x2fe0a6d5; S=0x2fe0a6e5; @synthesize=_shouldUsePadInterfaceHeuristics
@property(retain, nonatomic) AXVisualElementGrouper *visualElementGrouper;	// G=0x2fe0a695; S=0x2fe0a6a5; @synthesize=_visualElementGrouper
@property(readonly, assign, nonatomic) BOOL willFetchElements;	// G=0x2fe05be1; 
+ (id)currentAppWithPositionHint:(CGPoint)positionHint;	// 0x2fe05685
+ (id)springBoardElement;	// 0x2fe0564d
+ (id)systemWideElement;	// 0x2fe05631
- (id)initWithDelegate:(id)delegate fetchEvents:(unsigned)events fetchPolicy:(int)policy enableEventManagement:(BOOL)management enableGrouping:(BOOL)grouping beginEnabled:(BOOL)enabled;	// 0x2fe05701
- (id)_axNotificationsForManagedEvents;	// 0x2fe06de1
- (void)_debugLogElementCache;	// 0x2fe0a3d1
- (id)_debugStringForFetchEvents:(unsigned)fetchEvents;	// 0x2fe0a29d
- (id)_debugStringForPolicy:(int)policy;	// 0x2fe0a271
- (double)_delayForFetchEvent:(unsigned)fetchEvent;	// 0x2fe06d09
- (BOOL)_fetchElements:(BOOL)elements;	// 0x2fe075c9
- (BOOL)_fetchEventCanBeManaged:(unsigned)managed;	// 0x2fe06da9
- (void)_fetchEventOccurred:(unsigned)occurred;	// 0x2fe06945
- (id)_fetchFirstElements;	// 0x2fe07875
- (BOOL)_fetchGroups:(BOOL)groups;	// 0x2fe09dc9
- (id)_fetchVisibleElements;	// 0x2fe0784d
- (id)_filterElements:(id)elements withFilter:(id)filter;	// 0x2fe07b45
- (id)_filterGroup:(id)group withFilter:(id)filter;	// 0x2fe09c2d
- (id)_findElementsMatchingBlock:(id)block internalRequest:(BOOL)request;	// 0x2fe08185
- (id)_findGroupableMatchingBlock:(id)block inElementGroup:(id)elementGroup;	// 0x2fe094ed
- (id)_findGroupableMatchingGroupable:(id)groupable inElementGroup:(id)elementGroup;	// 0x2fe09139
- (id)_groupWithDictionary:(id)dictionary;	// 0x2fe09a15
- (id)_groupWithItems:(id)items groupTraits:(int)traits;	// 0x2fe09a81
- (void)_notifyObserversDidFetchElementsForEvent:(unsigned)_notifyObservers foundNewElements:(BOOL)elements;	// 0x2fe064e9
- (void)_notifyObserversDidScheduleFetchEvent:(unsigned)_notifyObservers;	// 0x2fe066b9
- (void)_notifyObserversWillFetchElementsForEvent:(unsigned)_notifyObservers;	// 0x2fe06335
- (int)_priorityForFetchEvent:(unsigned)fetchEvent;	// 0x2fe06d51
- (void)_scheduleFetchEvent:(unsigned)event;	// 0x2fe06a51
- (void)_sendFakeScreenChangeIfNecessaryForGroup:(id)group orElements:(id)elements appDidChange:(BOOL)app;	// 0x2fe073c1
- (BOOL)_shouldConsiderCacheAsInvalid;	// 0x2fe073bd
- (id)_siblingOfGroupable:(id)groupable forDirection:(BOOL)direction didWrap:(BOOL *)wrap;	// 0x2fe09061
- (void)_tearDownEventCoalesceTimer;	// 0x2fe06a21
- (BOOL)_updateCurrentApp;	// 0x2fe05b21
// declared property getter: - (unsigned)activeFetchEvents;	// 0x2fe0a5c5
- (void)addFetchEvents:(unsigned)events;	// 0x2fe0686d
- (void)addPostFetchFilter:(id)filter withIdentifier:(id)identifier;	// 0x2fe07905
// declared property getter: - (id)availableElements;	// 0x2fe05bf9
- (id)closestElementToElement:(id)element;	// 0x2fe0843d
- (id)closestElementToPoint:(CGPoint)point;	// 0x2fe084bd
// declared property getter: - (id)currentApp;	// 0x2fe05aed
- (void)dealloc;	// 0x2fe05895
// declared property getter: - (id)delegate;	// 0x2fe0a565
- (id)description;	// 0x2fe059e1
- (void)disableEventManagement;	// 0x2fe07219
// declared property getter: - (id)elementCache;	// 0x2fe0a5e5
// declared property getter: - (id)elementGroupPruner;	// 0x2fe0a6b5
- (void)enableEventManagement;	// 0x2fe06ead
- (void)fetchEventOccurred:(unsigned)occurred;	// 0x2fe068f1
// declared property getter: - (id)fetchObservers;	// 0x2fe0a5a5
// declared property getter: - (int)fetchPolicy;	// 0x2fe0a585
- (id)findElementMatchingBlock:(id)block;	// 0x2fe07ee9
- (id)findElementMatchingElement:(id)element;	// 0x2fe07c51
- (id)findElementsMatchingBlock:(id)block;	// 0x2fe08171
- (id)findGroupableMatchingBlock:(id)block;	// 0x2fe095e9
- (id)findGroupableMatchingGroupable:(id)groupable;	// 0x2fe09245
- (id)firstElement;	// 0x2fe08795
// declared property getter: - (id)firstKeyboardRow;	// 0x2fe060ed
// declared property getter: - (BOOL)isEnabled;	// 0x2fe0a545
// declared property getter: - (BOOL)isEventManagementEnabled;	// 0x2fe0a605
// declared property getter: - (BOOL)isFetchingElements;	// 0x2fe0a6f5
// declared property getter: - (BOOL)isGroupingEnabled;	// 0x2fe0a665
// declared property getter: - (id)keyboardGroup;	// 0x2fe05f4d
// declared property getter: - (id)keyboardGroupCache;	// 0x2fe0a645
- (id)lastElement;	// 0x2fe0897d
// declared property getter: - (id)lastKeyboardRow;	// 0x2fe06161
- (id)nextSiblingOfElement:(id)element didWrap:(BOOL *)wrap;	// 0x2fe08b61
- (id)nextSiblingOfGroupable:(id)groupable didWrap:(BOOL *)wrap;	// 0x2fe090f9
// declared property getter: - (id)postFetchFilters;	// 0x2fe0a715
- (id)previousSiblingOfElement:(id)element didWrap:(BOOL *)wrap;	// 0x2fe08de1
- (id)previousSiblingOfGroupable:(id)groupable didWrap:(BOOL *)wrap;	// 0x2fe09119
- (void)refresh;	// 0x2fe068dd
- (void)registerFetchObserver:(id)observer targetQueue:(id)queue;	// 0x2fe062a1
- (void)removeAllPostFetchFilters;	// 0x2fe07ab1
- (void)removeFetchEvents:(unsigned)events;	// 0x2fe068a5
- (void)removePostFetchFilterWithIdentifier:(id)identifier;	// 0x2fe079e9
// declared property getter: - (id)rootGroup;	// 0x2fe05dad
// declared property getter: - (id)rootGroupCache;	// 0x2fe0a625
// declared property setter: - (void)setActiveFetchEvents:(unsigned)events;	// 0x2fe0a5d5
// declared property setter: - (void)setCurrentApp:(id)app;	// 0x2fe0a685
// declared property setter: - (void)setDelegate:(id)delegate;	// 0x2fe0a575
// declared property setter: - (void)setElementCache:(id)cache;	// 0x2fe0a5f5
// declared property setter: - (void)setElementGroupPruner:(id)pruner;	// 0x2fe0a6c5
// declared property setter: - (void)setEnabled:(BOOL)enabled;	// 0x2fe0a555
// declared property setter: - (void)setEventManagementEnabled:(BOOL)enabled;	// 0x2fe0a615
// declared property setter: - (void)setFetchObservers:(id)observers;	// 0x2fe0a5b5
// declared property setter: - (void)setFetchPolicy:(int)policy;	// 0x2fe0a595
// declared property setter: - (void)setFetchingElements:(BOOL)elements;	// 0x2fe0a705
// declared property setter: - (void)setGroupingEnabled:(BOOL)enabled;	// 0x2fe0a675
// declared property setter: - (void)setKeyboardGroupCache:(id)cache;	// 0x2fe0a655
// declared property setter: - (void)setPostFetchFilters:(id)filters;	// 0x2fe0a725
// declared property setter: - (void)setRootGroupCache:(id)cache;	// 0x2fe0a635
// declared property setter: - (void)setShouldUsePadInterfaceHeuristics:(BOOL)usePadInterfaceHeuristics;	// 0x2fe0a6e5
// declared property setter: - (void)setVisualElementGrouper:(id)grouper;	// 0x2fe0a6a5
// declared property getter: - (BOOL)shouldUsePadInterfaceHeuristics;	// 0x2fe0a6d5
- (void)unregisterAllFetchObservers;	// 0x2fe0630d
- (void)unregisterFetchObserver:(id)observer;	// 0x2fe062e1
- (void)updateKeyboardGroup:(id)group;	// 0x2fe09891
// declared property getter: - (id)visualElementGrouper;	// 0x2fe0a695
// declared property getter: - (BOOL)willFetchElements;	// 0x2fe05be1
@end

