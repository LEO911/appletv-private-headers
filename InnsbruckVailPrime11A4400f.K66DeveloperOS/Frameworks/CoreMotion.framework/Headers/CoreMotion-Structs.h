/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/CoreMotion.framework/CoreMotion
 */

typedef struct _NSZone NSZone;

typedef struct __long {
	unsigned _field1;
	unsigned _field2;
	char *_field3;
} long;

typedef struct __short {
	union {
		unsigned char _field1;
		BOOL _field2;
	} _field1;
	BOOL _field2[11];
} short;

typedef struct __raw {
	unsigned long _field1[3];
} raw;

typedef struct __rep {
	union {
		long _field1;
		short _field2;
		raw _field3;
	} _field1;
} rep;

template<>
struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > {
	rep _field1;
};

template<>
struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {
	__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > _field1;
};

typedef struct CLConnection *CLConnectionRef;

typedef struct __CFDictionary *CFDictionaryRef;

typedef struct CLNameValuePair {
	/*function-pointer*/ void **_field1;
	CFDictionaryRef _field2;
} CLNameValuePair;

template<>
struct __tree_node<std::__1::pair<std::__1::basic_string<char>, void (^)(CLConnectionMessage *)>, void *>;

template<>
struct __tree_node_base<void *>;

template<>
struct __tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> *__left_;
};

template<>
struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<std::__1::basic_string<char>, void (^)(CLConnectionMessage *)>, void *> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> _field1;
};

template<>
struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, void (^)(CLConnectionMessage *), std::__1::less<std::__1::basic_string<char> >, true> > {
	unsigned long _field1;
};

template<>
struct __tree<std::__1::pair<std::__1::basic_string<char>, void (^)(CLConnectionMessage *)>, std::__1::__map_value_compare<std::__1::basic_string<char>, void (^)(CLConnectionMessage *), std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char>, void (^)(CLConnectionMessage *)> > > {
	__tree_node<std::__1::pair<std::__1::basic_string<char>, void (^)(CLConnectionMessage *)>, void *> *_field1;
	__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<std::__1::basic_string<char>, void (^)(CLConnectionMessage *)>, void *> > > _field2;
	__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, void (^)(CLConnectionMessage *), std::__1::less<std::__1::basic_string<char> >, true> > _field3;
};

template<>
struct map<std::__1::basic_string<char>, void (^)(CLConnectionMessage *), std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, void (^)(CLConnectionMessage *)> > > {
	__tree<std::__1::pair<std::__1::basic_string<char>, void (^)(CLConnectionMessage *)>, std::__1::__map_value_compare<std::__1::basic_string<char>, void (^)(CLConnectionMessage *), std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char>, void (^)(CLConnectionMessage *)> > > _field1;
};

typedef struct CLConnectionClient {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > _field1;
	id _field2;
	id _field3;
	id _field4;
	CLConnectionRef _field5;
	CLNameValuePair _field6;
	CLNameValuePair _field7;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > _field8;
	id _field9;
	/*function-pointer*/ void _field10;
	id _field11;
	/*function-pointer*/ void _field12;
	map<std::__1::basic_string<char>, void (^)(CLConnectionMessage *), std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, void (^)(CLConnectionMessage *)> > > _field13;
	id _field14;
	/*function-pointer*/ void _field15;
	id _field16;
	/*function-pointer*/ void _field17;
} CLConnectionClient;

typedef struct CMMotionActivityManagerQuery *CMMotionActivityManagerQueryRef;

template<>
struct __compressed_pair<<anonymous>::CMMotionActivityManagerQuery **, std::__1::allocator<<anonymous>::CMMotionActivityManagerQuery *> > {
	CMMotionActivityManagerQueryRef *__first_;
};

template<>
struct __split_buffer<<anonymous>::CMMotionActivityManagerQuery *, std::__1::allocator<<anonymous>::CMMotionActivityManagerQuery *> > {
	CMMotionActivityManagerQueryRef *__first_;
	CMMotionActivityManagerQueryRef *__begin_;
	CMMotionActivityManagerQueryRef *__end_;
	__compressed_pair<<anonymous>::CMMotionActivityManagerQuery **, std::__1::allocator<<anonymous>::CMMotionActivityManagerQuery *> > __end_cap_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::allocator<<anonymous>::CMMotionActivityManagerQuery> > {
	unsigned long __first_;
};

template<>
struct deque<<anonymous>::CMMotionActivityManagerQuery, std::__1::allocator<<anonymous>::CMMotionActivityManagerQuery> > {
	__split_buffer<<anonymous>::CMMotionActivityManagerQuery *, std::__1::allocator<<anonymous>::CMMotionActivityManagerQuery *> > __map_;
	unsigned __start_;
	__compressed_pair<unsigned long, std::__1::allocator<<anonymous>::CMMotionActivityManagerQuery> > __size_;
};

typedef struct {
	float x;
	float y;
	float z;
} XXStruct_ZUkpeA;

typedef struct {
	double x;
	double y;
	double z;
} XXStruct_taVrlB;

typedef struct {
	double w;
	double x;
	double y;
	double z;
} XXStruct_N5B6hD;

typedef struct {
	XXStruct_N5B6hD quaternion;
	XXStruct_ZUkpeA userAcceleration;
	XXStruct_ZUkpeA rotationRate;
	XXStruct_ZUkpeA magneticField;
	int magneticFieldCalibrationLevel;
	bool doingYawCorrection;
	bool doingBiasEstimation;
	bool isInitialized;
} XXStruct_cN_7IB;

typedef struct {
	XXStruct_taVrlB _field1;
	int _field2;
} XXStruct_1dFDiB;

typedef struct {
	double _field1;
	double _field2;
	double _field3;
	double _field4;
	double _field5;
	double _field6;
	double _field7;
	double _field8;
	double _field9;
} XXStruct_VSauOA;

typedef struct Dispatcher {
	/*function-pointer*/ void **_field1;
	id _field2;
} Dispatcher;

typedef struct Sample {
	double timestamp;
	XXStruct_ZUkpeA acceleration;
} Sample;

typedef struct Sample {
	double timestamp;
	XXStruct_ZUkpeA rotationRate;
	unsigned short sampleNum;
	bool fsync;
} Sample;

typedef struct Sample {
	double timestamp;
	XXStruct_cN_7IB deviceMotion;
	bool fsync;
} Sample;

typedef struct Client Client;

typedef struct __shared_weak_count shared_weak_count;

template<>
struct shared_ptr<CLGeomagneticModelProvider_Type::Client> {
	Client *__ptr_;
	shared_weak_count *__cntrl_;
};

typedef struct {
	double x;
	double y;
	double z;
	double magnitude;
	double horizontal;
	double declination;
	double inclination;
	double timestamp;
} XXStruct_01mbIB;

typedef struct CLMotionActivity {
	int type;
	int confidence;
	int mountedState;
	int mountedConfidence;
	float tilt;
	double timestamp;
	int exitState;
	double estExitTime;
	double startTime;
} CLMotionActivity;

typedef struct Sample {
	double timestamp;
	struct {
		int type;
	} orientation;
} Sample;

typedef struct __CFRunLoop *CFRunLoopRef;

template<>
struct pair<NSOperationQueue *, void (^)(int, NSError *)>;

template<>
struct __compressed_pair<std::__1::pair<NSOperationQueue *, void (^)(int, NSError *)> **, std::__1::allocator<std::__1::pair<NSOperationQueue *, void (^)(int, NSError *)> *> > {
	pair<NSOperationQueue *, void (^)(int, NSError *)> **__first_;
};

template<>
struct __split_buffer<std::__1::pair<NSOperationQueue *, void (^)(int, NSError *)> *, std::__1::allocator<std::__1::pair<NSOperationQueue *, void (^)(int, NSError *)> *> > {
	pair<NSOperationQueue *, void (^)(int, NSError *)> **__first_;
	pair<NSOperationQueue *, void (^)(int, NSError *)> **__begin_;
	pair<NSOperationQueue *, void (^)(int, NSError *)> **__end_;
	__compressed_pair<std::__1::pair<NSOperationQueue *, void (^)(int, NSError *)> **, std::__1::allocator<std::__1::pair<NSOperationQueue *, void (^)(int, NSError *)> *> > __end_cap_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<NSOperationQueue *, void (^)(int, NSError *)> > > {
	unsigned long __first_;
};

template<>
struct deque<std::__1::pair<NSOperationQueue *, void (^)(int, NSError *)>, std::__1::allocator<std::__1::pair<NSOperationQueue *, void (^)(int, NSError *)> > > {
	__split_buffer<std::__1::pair<NSOperationQueue *, void (^)(int, NSError *)> *, std::__1::allocator<std::__1::pair<NSOperationQueue *, void (^)(int, NSError *)> *> > __map_;
	unsigned __start_;
	__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<NSOperationQueue *, void (^)(int, NSError *)> > > __size_;
};

typedef struct CLConnectionMessage {
	CFDictionaryRef _field1;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > _field2;
	id _field3;
	id _field4;
} CLConnectionMessage;

template<>
struct __tree_node<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *>;

template<>
struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::__map_value_compare<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, true> > {
	unsigned long __first_;
};

template<>
struct __tree<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::__map_value_compare<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, true>, std::__1::allocator<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *> > > {
	__tree_node<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> *__begin_node_;
	__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> > > __pair1_;
	__compressed_pair<unsigned long, std::__1::__map_value_compare<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, true> > __pair3_;
};

template<>
struct map<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, std::__1::allocator<std::__1::pair<SEL *const, CLIntersiloInterfaceSelectorInfo *> > > {
	__tree<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::__map_value_compare<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, true>, std::__1::allocator<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *> > > __tree_;
};

typedef struct CLNotifierClientBase {
	/*function-pointer*/ void **_field1;
} CLNotifierClientBase;

template<>
struct __tree_node<std::__1::pair<unsigned long, int>, void *>;

template<>
struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<unsigned long, int>, void *> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, int, std::__1::less<unsigned long>, true> > {
	unsigned long __first_;
};

template<>
struct __tree<std::__1::pair<unsigned long, int>, std::__1::__map_value_compare<unsigned long, int, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::pair<unsigned long, int> > > {
	__tree_node<std::__1::pair<unsigned long, int>, void *> *__begin_node_;
	__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<unsigned long, int>, void *> > > __pair1_;
	__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, int, std::__1::less<unsigned long>, true> > __pair3_;
};

template<>
struct map<unsigned long, int, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, int> > > {
	__tree<std::__1::pair<unsigned long, int>, std::__1::__map_value_compare<unsigned long, int, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::pair<unsigned long, int> > > __tree_;
};

typedef struct CLNotifierBase {
	/*function-pointer*/ void **_field1;
} CLNotifierBase;


