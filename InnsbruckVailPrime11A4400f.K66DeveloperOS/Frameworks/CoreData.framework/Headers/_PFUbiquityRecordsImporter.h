/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/CoreData.framework/CoreData
 */

#import </libobjc.A.h>
#import "NSManagedObjectContextFaultingDelegate.h"
#import "_PFUbiquityRecordImportOperationDelegate.h"
#import "PFUbiquityBaselineRollOperationDelegate.h"
#import "PFUbiquityBaselineRecoveryOperationDelegate.h"
#import "PFUbiquityBaselineRollResponseOperationDelegate.h"

@class NSPersistentStore, NSOperationQueue, NSPersistentStoreCoordinator, NSString, NSMutableDictionary, PFUbiquityLocation, PFUbiquitySwitchboardCacheWrapper, PFUbiquityRecordsImporterSchedulingContext, NSRecursiveLock, NSSQLCore;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface _PFUbiquityRecordsImporter : NSObject <_PFUbiquityRecordImportOperationDelegate, NSManagedObjectContextFaultingDelegate, PFUbiquityBaselineRollOperationDelegate, PFUbiquityBaselineRecoveryOperationDelegate, PFUbiquityBaselineRollResponseOperationDelegate> {
	NSOperationQueue *_importQueue;	// 4 = 0x4
	NSObject<OS_dispatch_queue> *_privateQueue;	// 8 = 0x8
	BOOL _isMonitoring;	// 12 = 0xc
	NSString *_localPeerID;	// 16 = 0x10
	PFUbiquityLocation *_ubiquityRootLocation;	// 20 = 0x14
	NSString *_storeName;	// 24 = 0x18
	NSString *_modelVersionHash;	// 28 = 0x1c
	NSPersistentStoreCoordinator *_privatePSC;	// 32 = 0x20
	NSSQLCore *_privateStore;	// 36 = 0x24
	PFUbiquityRecordsImporterSchedulingContext *_schedulingContext;	// 40 = 0x28
	PFUbiquitySwitchboardCacheWrapper *_sideLoadCacheWrapper;	// 44 = 0x2c
	NSObject<OS_dispatch_source> *_logRestartTimer;	// 48 = 0x30
	NSRecursiveLock *_schedulingLock;	// 52 = 0x34
	BOOL _importOnlyActiveStores;	// 56 = 0x38
	BOOL _throttleNotifications;	// 57 = 0x39
	unsigned _numPendingNotifications;	// 60 = 0x3c
	NSMutableDictionary *_pendingNotificationUserInfo;	// 64 = 0x40
	BOOL _allowBaselineRoll;	// 68 = 0x44
	unsigned _pendingImportOperationsCount;	// 72 = 0x48
}
@property(assign) BOOL allowBaselineRoll;	// G=0x2d17113d; S=0x2d171155; @synthesize=_allowBaselineRoll
@property(assign) BOOL importOnlyActiveStores;	// G=0x2d17110d; S=0x2d171125; @synthesize=_importOnlyActiveStores
@property(readonly, assign) NSOperationQueue *importQueue;	// G=0x2d17102d; @synthesize=_importQueue
@property(readonly, assign) BOOL isMonitoring;	// G=0x2d171069; @synthesize=_isMonitoring
@property(readonly, assign) NSString *localPeerID;	// G=0x2d171041; @synthesize=_localPeerID
@property(assign) NSObject<OS_dispatch_source> *logRestartTimer;	// G=0x2d1710a1; S=0x2d1710b5; @synthesize=_logRestartTimer
@property(readonly, assign, nonatomic) NSPersistentStoreCoordinator *privatePSC;	// G=0x2d1711ad; @synthesize=_privatePSC
@property(readonly, assign, nonatomic) NSPersistentStore *privateStore;	// G=0x2d17119d; @synthesize=_privateStore
@property(readonly, assign, nonatomic) PFUbiquityRecordsImporterSchedulingContext *schedulingContext;	// G=0x2d17116d; @synthesize=_schedulingContext
@property(readonly, assign, nonatomic) NSRecursiveLock *schedulingLock;	// G=0x2d1710cd; @synthesize=_schedulingLock
@property(retain, nonatomic) PFUbiquitySwitchboardCacheWrapper *sideLoadCacheWrapper;	// G=0x2d17117d; S=0x2d17118d; @synthesize=_sideLoadCacheWrapper
@property(readonly, assign) NSString *storeName;	// G=0x2d171055; @synthesize=_storeName
@property(assign) BOOL throttleNotifications;	// G=0x2d1710dd; S=0x2d1710f5; @synthesize=_throttleNotifications
@property(retain, nonatomic) PFUbiquityLocation *ubiquityRootLocation;	// G=0x2d171081; S=0x2d171091; @synthesize=_ubiquityRootLocation
+ (id)addPrivateStore:(id)store toCoordinator:(id)coordinator atURL:(id)url error:(id *)error;	// 0x2d1709b5
+ (void)afterDelay:(double)delay executeBlockOnRootQueue:(id)queue;	// 0x2d170f41
+ (BOOL)canProcessContentsOfUbiquityRootPath:(id)ubiquityRootPath;	// 0x2d16eb55
+ (id)createPrivateCoordinatorAndStoreForStore:(id)store atURL:(id)url error:(id *)error;	// 0x2d170c85
+ (id)createPrivateCoordinatorForStore:(id)store error:(id *)error;	// 0x2d1706ed
+ (void)executeBlockOnRootQueue:(id)queue;	// 0x2d170e89
+ (void)initialize;	// 0x2d168871
- (id)init;	// 0x2d168901
- (id)initWithLocalPeerID:(id)localPeerID andUbiquityRootLocation:(id)location;	// 0x2d168905
- (id)initWithLocalPeerID:(id)localPeerID ubiquityRootLocation:(id)location storeName:(id)name andPrivateStore:(id)store;	// 0x2d168ab9
- (void)_applicationResumed:(id)resumed;	// 0x2d16cf05
// declared property getter: - (BOOL)allowBaselineRoll;	// 0x2d17113d
- (void)baselineRollOperationEncounteredAnInconsistentBaselineState:(id)state;	// 0x2d16fbb9
- (void)baselineRollOperationWasUnableToLockPersistentStore:(id)lockPersistentStore;	// 0x2d16fbc9
- (BOOL)batchDownloadTransactionLogsAtLocations:(id)locations error:(id *)error;	// 0x2d16cb61
- (BOOL)canProcessTransactionLogWithScore:(id)score afterLogWithScore:(id)score2;	// 0x2d16a18d
- (BOOL)checkSchedulingContextForMissingLocalPeerOperations:(id)missingLocalPeerOperations error:(id *)error;	// 0x2d16a369
- (void)checkStoreAndContainer;	// 0x2d16cfc5
- (int)compareScoreKnowledgeVector:(id)vector withScoreDictionary:(id)scoreDictionary;	// 0x2d16eb39
- (int)context:(id)context shouldHandleInaccessibleFault:(id)fault forObjectID:(id)objectID andTrigger:(id)trigger;	// 0x2d16eb51
- (id)createNewSetOfObjectIDsForCoordinator:(id)coordinator fromObjectIDs:(id)objectIDs;	// 0x2d16d351
- (id)createSortedOperationsArrayWithMetadata:(id)metadata isFirstImport:(BOOL)import;	// 0x2d168dad
- (void)dealloc;	// 0x2d168b71
- (id)description;	// 0x2d168d1d
- (BOOL)discoverAndImportAllAvailableLogs:(BOOL)logs error:(id *)error;	// 0x2d16c31d
- (void)executeBlockOnPrivateQueue:(id)queue;	// 0x2d170dd1
// declared property getter: - (BOOL)importOnlyActiveStores;	// 0x2d17110d
// declared property getter: - (id)importQueue;	// 0x2d17102d
// declared property getter: - (BOOL)isMonitoring;	// 0x2d171069
// declared property getter: - (id)localPeerID;	// 0x2d171041
// declared property getter: - (id)logRestartTimer;	// 0x2d1710a1
- (void)metadataInconsistencyDetectedForStore:(id)store;	// 0x2d170065
- (void)operation:(id)operation failedWithError:(id)error;	// 0x2d16e47d
- (void)operationDidFinish:(id)operation;	// 0x2d16de51
- (void)operationWasInterruptedDuringImport:(id)import;	// 0x2d16e7c9
- (void)postImportNotificationForStoreName:(id)storeName andLocalPeerID:(id)anId withUserInfo:(id)userInfo;	// 0x2d16d4e5
// declared property getter: - (id)privatePSC;	// 0x2d1711ad
// declared property getter: - (id)privateStore;	// 0x2d17119d
- (void)recoverFailedLogs;	// 0x2d16ba71
- (void)recoveryOperation:(id)operation didReplaceLocalStoreFileWithBaseline:(id)baseline;	// 0x2d16fbf9
- (void)recoveryOperation:(id)operation encounteredAnError:(id)error duringRecoveryOfBaseline:(id)baseline;	// 0x2d170055
- (void)requestBaselineRollForStore:(id)store;	// 0x2d16ecd1
- (void)rollResponseOperation:(id)operation encounteredAnError:(id)error whileTryingToAdoptBaseline:(id)adoptBaseline;	// 0x2d16ffc5
- (void)rollResponseOperation:(id)operation successfullyAdoptedBaseline:(id)baseline;	// 0x2d16fdd9
- (void)scheduleBaselineRecoveryOperationWithActiveBaselineOperation:(id)activeBaselineOperation;	// 0x2d16f9c1
- (void)scheduleBaselineRollResponseOperationForBaselineAtLocation:(id)location;	// 0x2d16f0e1
- (BOOL)schedulePendingLogs:(BOOL)logs error:(id *)error;	// 0x2d16af25
- (void)scheduleRecoveryTimer;	// 0x2d16e905
- (BOOL)scheduleTransactionLogOperations:(id)operations synchronous:(BOOL)synchronous error:(id *)error;	// 0x2d16a991
// declared property getter: - (id)schedulingContext;	// 0x2d17116d
// declared property getter: - (id)schedulingLock;	// 0x2d1710cd
// declared property setter: - (void)setAllowBaselineRoll:(BOOL)roll;	// 0x2d171155
// declared property setter: - (void)setImportOnlyActiveStores:(BOOL)stores;	// 0x2d171125
// declared property setter: - (void)setLogRestartTimer:(id)timer;	// 0x2d1710b5
// declared property setter: - (void)setSideLoadCacheWrapper:(id)wrapper;	// 0x2d17118d
// declared property setter: - (void)setThrottleNotifications:(BOOL)notifications;	// 0x2d1710f5
// declared property setter: - (void)setUbiquityRootLocation:(id)location;	// 0x2d171091
- (BOOL)shouldThrottleNotificationsWithOperation:(id)operation;	// 0x2d16d34d
// declared property getter: - (id)sideLoadCacheWrapper;	// 0x2d17117d
- (BOOL)startMonitor:(id *)monitor;	// 0x2d16ae39
// declared property getter: - (id)storeName;	// 0x2d171055
- (void)tearDown;	// 0x2d16ae81
// declared property getter: - (BOOL)throttleNotifications;	// 0x2d1710dd
// declared property getter: - (id)ubiquityRootLocation;	// 0x2d171081
@end

