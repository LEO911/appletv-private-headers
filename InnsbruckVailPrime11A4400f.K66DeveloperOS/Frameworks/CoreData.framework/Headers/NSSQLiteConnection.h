/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/CoreData.framework/CoreData
 */

#import "CoreData-Structs.h"
#import "NSSQLConnection.h"

@class NSString, NSSQLiteStatement, NSSQLEntity, NSMutableDictionary, NSMutableArray, NSMutableSet;

@interface NSSQLiteConnection : NSSQLConnection {
	sqlite3 *_db;	// 28 = 0x1c
	sqlite3_stmt *_vmstatement;	// 32 = 0x20
	int _rowsProcessedCount;	// 36 = 0x24
	unsigned _lastEntityKey;	// 40 = 0x28
	NSSQLEntity *_finalEntity;	// 44 = 0x2c
	NSSQLEntity *_lastEntity;	// 48 = 0x30
	sqlite3_stmt *_fetchPKStatement;	// 52 = 0x34
	sqlite3_stmt *_updatePKStatement;	// 56 = 0x38
	NSSQLiteStatement *_beginStatement;	// 60 = 0x3c
	NSSQLiteStatement *_commitStatement;	// 64 = 0x40
	NSSQLiteStatement *_rollbackStatement;	// 68 = 0x44
	NSMutableSet *_vmCachedStatements;	// 72 = 0x48
	NSMutableDictionary *_pragmaSettings;	// 76 = 0x4c
	CFDictionaryRef _cachedEntityUpdateStatements;	// 80 = 0x50
	double _timeOutOption;	// 84 = 0x54
	double _timeOutIncrement;	// 92 = 0x5c
	void *_extraBuffersForRegisteredFunctions[5];	// 100 = 0x64
	NSString *_dbPathRegisteredWithBackupd;	// 120 = 0x78
	long long _vacuumTracker;	// 124 = 0x7c
	NSMutableArray *_temporaryTables;	// 132 = 0x84
	sqliteConnectionFlags _sqliteConnectionFlags;	// 136 = 0x88
	unsigned long long _debugInode;	// 140 = 0x8c
}
+ (void)__INode_Changed_AllThatIsLeftToUsIsHonor__;	// 0x2d112109
+ (const char *)_databaseOpenURLStringForURL:(id)url;	// 0x2d113d15
+ (BOOL)_destroyPersistentStoreAtURL:(id)url options:(id)options error:(id *)error;	// 0x2d114719
+ (BOOL)_replacePersistentStoreAtURL:(id)url destinationOptions:(id)options withPersistentStoreFromURL:(id)url3 sourceOptions:(id)options4 error:(id *)error;	// 0x2d113de5
+ (void)_setDebugFlags:(int)flags;	// 0x2d112105
+ (void)initialize;	// 0x2d057559
+ (int)readMagicWordFromPath:(const char *)path;	// 0x2d113619
- (id)initWithAdapter:(id)adapter;	// 0x2d0575a5
- (id)_adapter;	// 0x2d057935
- (id)_beginPowerAssertionWithAssert:(unsigned *)anAssert;	// 0x2d115329
- (void)_bindVariablesWithDeletedRow:(id)deletedRow;	// 0x2d116abd
- (void)_bindVariablesWithInsertedRow:(id)insertedRow;	// 0x2d115d19
- (void)_bindVariablesWithUpdatedRow:(id)updatedRow andOriginalRow:(id)row forDeltasMask:(CFBitVectorRef)deltasMask;	// 0x2d1162fd
- (void **)_buffersForRegisteredFunctions;	// 0x2d058cbd
- (void)_clearBindVariablesForInsertedRow;	// 0x2d116185
- (void)_clearBindVariablesForUpdateStatement:(id)updateStatement forDeltasMask:(CFBitVectorRef)deltasMask;	// 0x2d1167cd
- (void)_clearCachedStatements;	// 0x2d1179a1
- (void)_clearOtherStatements;	// 0x2d117965
- (void)_clearTransactionCaches;	// 0x2d11519d
- (void)_configureAutoVacuum;	// 0x2d11a459
- (void)_configureIntegrityCheck;	// 0x2d058cfd
- (void)_configurePageSize;	// 0x2d11a67d
- (void)_configurePragmaOptions:(int)options createdSchema:(BOOL)schema;	// 0x2d113689
- (void)_configureSynchronousMode;	// 0x2d058cd5
- (void)_configureUbiquityMetadataTable;	// 0x2d059b35
- (void)_endPowerAssertionWithAssert:(unsigned)anAssert andApp:(id)app;	// 0x2d1153b5
- (void)_ensureDatabaseOpen;	// 0x2d059a1d
- (void)_ensureNoFetchInProgress;	// 0x2d059ad5
- (void)_ensureNoStatementPrepared;	// 0x2d059a79
- (void)_ensureNoTransactionOpen;	// 0x2d112415
- (void)_executeSQLString:(id)string;	// 0x2d058e31
- (long long)_fetchMaxPrimaryKeyForEntity:(id)entity;	// 0x2d1131c1
- (void)_finalizeStatement;	// 0x2d05c899
- (void)_forceDisconnectOnError;	// 0x2d1153d1
- (long long)_getCurrentAutoVacuumValue;	// 0x2d11abb1
- (BOOL)_hasTableWithName:(id)name;	// 0x2d119641
- (id)_newValueForColumn:(id)column atIndex:(unsigned)index inStatement:(sqlite3_stmt *)statement;	// 0x2d05bd19
- (void)_performPostSaveTasks;	// 0x2d11a951
- (void)_registerExtraFunctions;	// 0x2d0588b5
- (int)_rowsChangedByLastExecute;	// 0x2d115cfd
- (void)_setupVacuumIfNecessary;	// 0x2d11ac19
- (sqlite3_stmt *)_vmstatement;	// 0x2d117d75
- (void)addPeerRange:(id)range;	// 0x2d11c22d
- (void)addPeerRangeForPeerID:(id)peerID entityName:(id)name rangeStart:(id)start rangeEnd:(id)end peerRangeStart:(id)start5 peerRangeEnd:(id)end6;	// 0x2d11c2d9
- (id)allPeerRanges;	// 0x2d11c595
- (void)beginTransaction;	// 0x2d115901
- (void)bindTempTableForBindIntarray:(id)bindIntarray;	// 0x2d11758d
- (void)cacheCurrentDBStatementOn:(id)on;	// 0x2d117ab1
- (void)cacheUpdateStatement:(id)statement forEntity:(id)entity andDeltasMask:(CFBitVectorRef)mask;	// 0x2d116eed
- (id)cachedUpdateStatementForEntity:(id)entity andDeltasMask:(CFBitVectorRef)mask;	// 0x2d117039
- (BOOL)canConnect;	// 0x2d05789d
- (void)commitTransaction;	// 0x2d115a0d
- (void)connect;	// 0x2d0579a1
- (id)createMapOfEntityNameToPKMaxForEntities:(id)entities;	// 0x2d11e8e1
- (id)createMapOfEntityNameToPKMaxForEntitiesFromPKTable:(id)pktable;	// 0x2d11d239
- (id)createMapOfEntityNameToPKMaxForEntitiesFromUBRangeTable:(id)ubrangeTable;	// 0x2d11dd8d
- (BOOL)databaseIsEmpty;	// 0x2d05dde9
- (void)dealloc;	// 0x2d11210d
- (void)deleteCorrelation:(id)correlation;	// 0x2d116e71
- (void)deleteRow:(id)row;	// 0x2d11733d
- (id)describeResults;	// 0x2d117a95
- (void)didCreateSchema;	// 0x2d11a8d9
- (void)disconnect;	// 0x2d1155e1
- (void)dropUbiquityTables;	// 0x2d120091
- (void)endFetch;	// 0x2d05c7f9
- (void)endPrimaryKeyGeneration;	// 0x2d119c01
- (void)execute;	// 0x2d05aa35
- (long long)fetchMaxPrimaryKeyForEntity:(id)entity;	// 0x2d113465
- (int)fetchResultSet:(void *)set usingFetchPlan:(id)plan;	// 0x2d06b31d
- (id)fetchTableCreationSQL;	// 0x2d118715
- (id)fetchTableNames;	// 0x2d118209
- (id)fetchUbiquityKnowledgeVector;	// 0x2d11ae51
- (void)finalize;	// 0x2d1122c5
- (long long)generatePrimaryKeysForEntity:(id)entity batch:(unsigned)batch;	// 0x2d119c11
- (void)handleCorruptedDB:(id)db;	// 0x2d117b05
- (BOOL)hasMetadataTable;	// 0x2d119bc9
- (BOOL)hasPrimaryKeyTable;	// 0x2d11a435
- (void)insertCorrelation:(id)correlation;	// 0x2d116d79
- (void)insertRow:(id)row;	// 0x2d116b5d
- (BOOL)isFetchInProgress;	// 0x2d112401
- (BOOL)isLocalFS;	// 0x2d11ae35
- (BOOL)isOpen;	// 0x2d05791d
- (id)newFetchUUIDSForSubentitiesRootedAt:(id)at;	// 0x2d118d11
- (id)newFetchedArray;	// 0x2d05bbc5
- (BOOL)performIntegrityCheck;	// 0x2d117d85
- (void)prepareForPrimaryKeyGeneration;	// 0x2d119bf1
- (void)prepareSQLStatement:(id)statement;	// 0x2d05a241
- (CFArrayRef)rawIntegerRowsForSQL:(id)sql;	// 0x2d112479
- (void)releaseSQLStatement;	// 0x2d05c855
- (void)resetSQLStatement;	// 0x2d117919
- (void)rollbackTransaction;	// 0x2d115b81
- (void)setExclusiveLockingMode:(BOOL)mode;	// 0x2d117c39
- (void)setUbiquityTableValue:(id)value forKey:(id)key;	// 0x2d11ee19
- (id)ubiquityTableKeysAndValues;	// 0x2d11f0ad
- (id)ubiquityTableValueForKey:(id)key;	// 0x2d11f939
- (void)updateCorrelation:(id)correlation;	// 0x2d116df5
- (void)updateRow:(id)row;	// 0x2d117069
- (void)updateUbiquityKnowledgeForPeerWithID:(id)anId andTransactionNumber:(id)number;	// 0x2d11be11
- (void)updateUbiquityKnowledgeVector:(id)vector;	// 0x2d11b88d
- (void)willCreateSchema;	// 0x2d11a7c1
@end

