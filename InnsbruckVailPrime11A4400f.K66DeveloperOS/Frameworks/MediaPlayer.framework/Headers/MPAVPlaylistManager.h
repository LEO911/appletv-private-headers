/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

#import "MPAVQueuePlayerFeederSource.h"
#import "MediaPlayer-Structs.h"
#import </libobjc.A.h>

@class MPQueuePlayer, MPAVItem, MPAVQueuePlayerFeeder, NSString;
@protocol MPAVPlaylistFeeder;

@interface MPAVPlaylistManager : NSObject <MPAVQueuePlayerFeederSource> {
	NSString *_audioSessionModeOverride;	// 4 = 0x4
	MPAVItem *_currentItem;	// 8 = 0x8
	MPAVQueuePlayerFeeder *_feeder;	// 12 = 0xc
	BOOL _goToTargetIndex;	// 16 = 0x10
	int _isChangingPlaylistFeeder;	// 20 = 0x14
	int _lastSelectionDirection;	// 24 = 0x18
	MPQueuePlayer *_player;	// 28 = 0x1c
	id<MPAVPlaylistFeeder> _playlistFeeder;	// 32 = 0x20
	int _repeatMode;	// 36 = 0x24
	int _targetIndex;	// 40 = 0x28
	BOOL _updatedAudioSessionMode;	// 44 = 0x2c
}
@property(retain, nonatomic) NSString *audioSessionModeOverride;	// G=0x2e30dac1; S=0x2e30dad1; @synthesize=_audioSessionModeOverride
@property(readonly, assign, nonatomic) BOOL canChangePlaylistFeeder;	// G=0x2e30cf75; 
@property(readonly, assign) int currentIndex;	// G=0x2e30ce99; 
@property(readonly, assign) MPAVItem *currentItem;	// G=0x2e30daf9; @synthesize=_currentItem
@property(assign, nonatomic) BOOL forceSynchronousQueueFilling;	// G=0x2e30c8cd; S=0x2e30c955; 
@property(readonly, assign, nonatomic) BOOL isChangingPlaylistFeeder;	// G=0x2e30cf5d; 
@property(readonly, assign) int lastSelectionDirection;	// G=0x2e30db31; @synthesize=_lastSelectionDirection
@property(assign, nonatomic) BOOL managesSystemDownloads;	// G=0x2e30c8f1; S=0x2e30c975; 
@property(assign, nonatomic) unsigned maxQueueDepth;	// G=0x2e30c915; S=0x2e30c995; 
@property(assign, nonatomic) unsigned minQueueDepth;	// G=0x2e30c935; S=0x2e30c9b5; 
@property(readonly, assign) MPQueuePlayer *player;	// G=0x2e30db0d; @synthesize=_player
@property(retain, nonatomic) id<MPAVPlaylistFeeder> playlistFeeder;	// G=0x2e30db21; S=0x2e30cf8d; @synthesize=_playlistFeeder
@property(assign) int repeatMode;	// G=0x2e30cecd; S=0x2e30cedd; 
- (id)init;	// 0x2e30ba6d
- (void).cxx_destruct;	// 0x2e30db45
- (void)_assetCancelNotification:(id)notification;	// 0x2e30bfcd
- (id)_audioSessionModeForMediaItem:(id)mediaItem;	// 0x2e30d805
- (void)_downloadCancelledNotification:(id)notification;	// 0x2e30c26d
- (id)_feeder;	// 0x2e30d7f1
- (id)_feederItemForIndex:(int)index;	// 0x2e30ca5d
- (id)_itemToFollowItemIndex:(int)followItemIndex skipUnavailableContent:(BOOL)content;	// 0x2e30d569
- (void)_mediaLibraryDisplayValuesDidChangeNotification:(id)_mediaLibraryDisplayValues;	// 0x2e30c725
- (void)_networkTypeDidChangeNotification:(id)_networkType;	// 0x2e30c7a5
- (int)_nextItemIndex:(int)index repeatMode:(int)mode;	// 0x2e30d431
- (int)_prepareToQueuePlaybackIndex:(int)queuePlaybackIndex selectionDirection:(int)direction;	// 0x2e30cc41
- (void)_reloadQueuedItemsIfPathBecameAvailable;	// 0x2e30d125
- (void)_updateAudioSessionMode;	// 0x2e30d861
// declared property getter: - (id)audioSessionModeOverride;	// 0x2e30dac1
// declared property getter: - (BOOL)canChangePlaylistFeeder;	// 0x2e30cf75
- (void)contentInvalidated;	// 0x2e30d3d1
- (void)contentInvalidatedWithCurrentItemMovedToIndex:(unsigned)index;	// 0x2e30d389
- (void)contentInvalidatedWithNewIndex:(unsigned)newIndex;	// 0x2e30d3f1
- (void)contentsDidChangeByRemovingRange:(NSRange)contents;	// 0x2e30d269
// declared property getter: - (int)currentIndex;	// 0x2e30ce99
// declared property getter: - (id)currentItem;	// 0x2e30daf9
- (void)dealloc;	// 0x2e30bcb5
// declared property getter: - (BOOL)forceSynchronousQueueFilling;	// 0x2e30c8cd
// declared property getter: - (BOOL)isChangingPlaylistFeeder;	// 0x2e30cf5d
// declared property getter: - (int)lastSelectionDirection;	// 0x2e30db31
// declared property getter: - (BOOL)managesSystemDownloads;	// 0x2e30c8f1
// declared property getter: - (unsigned)maxQueueDepth;	// 0x2e30c915
// declared property getter: - (unsigned)minQueueDepth;	// 0x2e30c935
- (void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void *)context;	// 0x2e30bdfd
// declared property getter: - (id)player;	// 0x2e30db0d
// declared property getter: - (id)playlistFeeder;	// 0x2e30db21
- (id)queuePlayerFeeder:(id)feeder itemToFollowItem:(id)followItem;	// 0x2e30d661
- (BOOL)queuePlayerFeeder:(id)feeder willInsertItem:(id)item;	// 0x2e30d69d
- (void)queuePlayerFeeder:(id)feeder willRemoveItem:(id)item;	// 0x2e30d699
- (void)queuePlayerFeederDidUpdateQueue:(id)queuePlayerFeeder queuedItems:(id)items dequeuedItems:(id)items3;	// 0x2e30d6a1
- (void)queuePlayerFeederFailedToQueueAnyItems:(id)queueAnyItems;	// 0x2e30d759
// declared property getter: - (int)repeatMode;	// 0x2e30cecd
// declared property setter: - (void)setAudioSessionModeOverride:(id)override;	// 0x2e30dad1
- (void)setCurrentIndex:(int)index selectionDirection:(int)direction;	// 0x2e30cd71
// declared property setter: - (void)setForceSynchronousQueueFilling:(BOOL)filling;	// 0x2e30c955
// declared property setter: - (void)setManagesSystemDownloads:(BOOL)downloads;	// 0x2e30c975
// declared property setter: - (void)setMaxQueueDepth:(unsigned)depth;	// 0x2e30c995
// declared property setter: - (void)setMinQueueDepth:(unsigned)depth;	// 0x2e30c9b5
// declared property setter: - (void)setPlaylistFeeder:(id)feeder;	// 0x2e30cf8d
- (BOOL)setPlaylistFeeder:(id)feeder startIndex:(int)index;	// 0x2e30d081
// declared property setter: - (void)setRepeatMode:(int)mode;	// 0x2e30cedd
- (void)updateForSoundCheckDefaultsChange;	// 0x2e30c9d5
@end

