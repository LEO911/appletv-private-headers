/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

#import </libobjc.A.h>
#import "MPMediaPlayback.h"

@class MPMusicPlayerControllerInternal;

@protocol MPMusicPlayerController
@optional
@property(retain) id allowsBackgroundVideo;	// converted property
@property(retain) id currentChapterIndex;	// converted property
@property(retain) id currentPlaybackRate;	// converted property
@property(retain) id currentPlaybackTime;	// converted property
@property(retain) id nowPlayingItem;	// converted property
@property(retain) id playbackSpeed;	// converted property
@property(retain) id repeatMode;	// converted property
@property(retain) id shuffleMode;	// converted property
// converted property getter: - (id)allowsBackgroundVideo;
- (void)beginSeekingBackward;
- (void)beginSeekingForward;
// converted property getter: - (id)currentChapterIndex;
// converted property getter: - (id)currentPlaybackRate;
// converted property getter: - (id)currentPlaybackTime;
- (void)endSeeking;
- (id)indexOfNowPlayingItem;
- (id)isGeniusAvailable;
- (id)isGeniusAvailableForSeedItems:(id)seedItems;
- (id)isNowPlayingItemFromGeniusMix;
// converted property getter: - (id)nowPlayingItem;
- (id)nowPlayingItemAtIndex:(id)index;
- (id)nowPlayingRadioTrackID;
- (id)numberOfItems;
- (void)pause;
- (void)pauseWithFadeoutDuration:(id)fadeoutDuration;
- (void)play;
- (void)playItem:(id)item;
// converted property getter: - (id)playbackSpeed;
- (id)playbackState;
- (void)prepareQueueForPlayback;
- (void)prepareToPlay;
- (id)queueAsQuery;
- (id)queueAsRadioStation;
- (void)registerForServerDiedNotifications;
// converted property getter: - (id)repeatMode;
- (id)serverIsAlive;
// converted property setter: - (void)setAllowsBackgroundVideo:(id)video;
// converted property setter: - (void)setCurrentChapterIndex:(id)index;
// converted property setter: - (void)setCurrentPlaybackRate:(id)rate;
// converted property setter: - (void)setCurrentPlaybackTime:(id)time;
// converted property setter: - (void)setNowPlayingItem:(id)item;
// converted property setter: - (void)setPlaybackSpeed:(id)speed;
- (void)setQueueWithGeniusMixPlaylist:(id)geniusMixPlaylist;
- (void)setQueueWithItemCollection:(id)itemCollection;
- (void)setQueueWithQuery:(id)query;
- (void)setQueueWithQuery:(id)query firstItem:(id)item;
- (void)setQueueWithRadioStation:(id)radioStation;
- (id)setQueueWithSeedItems:(id)seedItems;
// converted property setter: - (void)setRepeatMode:(id)mode;
// converted property setter: - (void)setShuffleMode:(id)mode;
- (void)setUseApplicationSpecificQueue:(id)queue;
- (void)shuffle;
// converted property getter: - (id)shuffleMode;
- (id)skipInDirection:(id)direction;
- (void)skipToBeginning;
- (void)skipToBeginningOrPreviousItem;
- (void)skipToNextChapter;
- (void)skipToNextItem;
- (void)skipToPreviousChapter;
- (void)skipToPreviousItem;
- (void)stop;
- (id)unshuffledIndexOfNowPlayingItem;
@end

@interface MPMusicPlayerController : NSObject <MPMediaPlayback> {
	MPMusicPlayerControllerInternal *_internal;	// 4 = 0x4
}
@property(assign) BOOL allowsBackgroundVideo;	// G=0x2e2ad70d; S=0x2e2ad755; converted property
@property(assign) unsigned currentChapterIndex;	// G=0x2e2ad9e9; S=0x2e2ada31; converted property
@property(assign, nonatomic) float currentPlaybackRate;	// G=0x2e2acb49; S=0x2e2acced; 
@property(assign, nonatomic) double currentPlaybackTime;	// G=0x2e2acb91; S=0x2e2acd81; 
@property(readonly, assign, nonatomic) BOOL isPreparedToPlay;	// G=0x2e2acbdd; 
@property(assign) int playbackSpeed;	// G=0x2e2ad829; S=0x2e2ad871; converted property
@property(assign) int repeatMode;	// G=0x2e2ad08d; S=0x2e2ad0d5; converted property
@property(assign) int shuffleMode;	// G=0x2e2ad12d; S=0x2e2ad175; converted property
@property(assign) float volume;	// G=0x2e2ad1cd; S=0x2e2ad249; converted property
+ (id)applicationMusicPlayer;	// 0x2e2ac461
+ (id)iPodMusicPlayer;	// 0x2e2ac4ed
+ (void)initialize;	// 0x2e2adda5
+ (id)runLoopForNotifications;	// 0x2e2ade79
+ (void)setRunLoopForNotifications:(id)notifications;	// 0x2e2ade2d
- (id)init;	// 0x2e2ac579
- (void).cxx_destruct;	// 0x2e2aee4d
- (void)_clientCheckInUsingExistencePort:(BOOL)usingExistencePort;	// 0x2e2ae189
- (void)_isQueuePreparedDidChange:(BOOL)_isQueuePrepared;	// 0x2e2aea01
- (void)_itemPlaybackDidEnd:(unsigned long long)_itemPlayback;	// 0x2e2aeb31
- (void)_musicPlayerDidLaunch;	// 0x2e2ae039
- (BOOL)_musicPlayerExistencePortIsValid;	// 0x2e2ae371
- (void)_nowPlayingItemDidChange:(unsigned long long)_nowPlayingItem;	// 0x2e2ae661
- (void)_playbackStateDidChange:(int)_playbackState;	// 0x2e2ae459
- (void)_registerForLaunchNotifications;	// 0x2e2ae09d
- (void)_repeatModeDidChange:(int)_repeatMode;	// 0x2e2ae8f9
- (void)_runMigServerOnPort:(unsigned)port;	// 0x2e2aec61
- (void)_serverDied:(id)died;	// 0x2e2adfa9
- (void)_setUseApplicationSpecificQueue:(BOOL)queue;	// 0x2e2aded1
- (void)_shuffleModeDidChange:(int)_shuffleMode;	// 0x2e2ae7f1
- (void)_stopMigServer;	// 0x2e2aed45
- (void)_systemVolumeDidChange:(id)_systemVolume;	// 0x2e2ac8f1
- (void)_unregisterForLaunchNotifications;	// 0x2e2ae141
// converted property getter: - (BOOL)allowsBackgroundVideo;	// 0x2e2ad70d
- (void)beginGeneratingPlaybackNotifications;	// 0x2e2ad411
- (void)beginSeekingBackward;	// 0x2e2acaa9
- (void)beginSeekingForward;	// 0x2e2aca59
// converted property getter: - (unsigned)currentChapterIndex;	// 0x2e2ad9e9
// declared property getter: - (float)currentPlaybackRate;	// 0x2e2acb49
// declared property getter: - (double)currentPlaybackTime;	// 0x2e2acb91
- (void)dealloc;	// 0x2e2ac78d
- (void)endGeneratingPlaybackNotifications;	// 0x2e2ad461
- (void)endSeeking;	// 0x2e2acaf9
- (void)forwardInvocation:(id)invocation;	// 0x2e2aca15
- (unsigned)indexOfNowPlayingItem;	// 0x2e2ad8c9
- (BOOL)isGeniusAvailable;	// 0x2e2ad4b5
- (BOOL)isGeniusAvailableForSeedItems:(id)seedItems;	// 0x2e2ad4fd
- (BOOL)isNowPlayingItemFromGeniusMix;	// 0x2e2ad9a1
// declared property getter: - (BOOL)isPreparedToPlay;	// 0x2e2acbdd
- (id)methodSignatureForSelector:(SEL)selector;	// 0x2e2aca39
- (id)nowPlayingItem;	// 0x2e2ace5d
- (id)nowPlayingItemAtIndex:(unsigned)index;	// 0x2e2ad58d
- (long long)nowPlayingRadioTrackID;	// 0x2e2ad5f1
- (unsigned)numberOfItems;	// 0x2e2ad959
- (void)pause;	// 0x2e2acc9d
- (void)pauseWithFadeoutDuration:(double)fadeoutDuration;	// 0x2e2ad63d
- (void)play;	// 0x2e2acc4d
// converted property getter: - (int)playbackSpeed;	// 0x2e2ad829
- (int)playbackState;	// 0x2e2acfd5
- (void)prepareToPlay;	// 0x2e2acbfd
// converted property getter: - (int)repeatMode;	// 0x2e2ad08d
- (BOOL)serverIsAlive;	// 0x2e2ade89
// converted property setter: - (void)setAllowsBackgroundVideo:(BOOL)video;	// 0x2e2ad755
// converted property setter: - (void)setCurrentChapterIndex:(unsigned)index;	// 0x2e2ada31
// declared property setter: - (void)setCurrentPlaybackRate:(float)rate;	// 0x2e2acced
// declared property setter: - (void)setCurrentPlaybackTime:(double)time;	// 0x2e2acd81
// converted property setter: - (void)setPlaybackSpeed:(int)speed;	// 0x2e2ad871
- (void)setQueueWithGeniusMixPlaylist:(id)geniusMixPlaylist;	// 0x2e2adb6d
- (void)setQueueWithItemCollection:(id)itemCollection;	// 0x2e2acf0d
- (void)setQueueWithQuery:(id)query;	// 0x2e2acea9
- (void)setQueueWithQuery:(id)query firstItem:(id)item;	// 0x2e2ada89
- (void)setQueueWithRadioStation:(id)radioStation;	// 0x2e2adbdd
- (BOOL)setQueueWithSeedItems:(id)seedItems;	// 0x2e2ad545
// converted property setter: - (void)setRepeatMode:(int)mode;	// 0x2e2ad0d5
// converted property setter: - (void)setShuffleMode:(int)mode;	// 0x2e2ad175
- (void)setUseCachedPlaybackState:(BOOL)state;	// 0x2e2ad695
// converted property setter: - (void)setVolume:(float)volume;	// 0x2e2ad249
- (void)setVolumePrivate:(float)aPrivate;	// 0x2e2ad3b9
// converted property getter: - (int)shuffleMode;	// 0x2e2ad12d
- (BOOL)skipInDirection:(int)direction error:(id *)error;	// 0x2e2adc4d
- (void)stop;	// 0x2e2ace0d
- (unsigned)unshuffledIndexOfNowPlayingItem;	// 0x2e2ad911
// converted property getter: - (float)volume;	// 0x2e2ad1cd
@end

