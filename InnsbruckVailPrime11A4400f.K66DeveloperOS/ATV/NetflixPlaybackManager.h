/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "AppleTV-Structs.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSString, NSData, NSDictionary, NSMutableArray, NSTimer, NSLock;

@interface NetflixPlaybackManager : XXUnknownSuperclass {
	BOOL openNotificationSent_;	// 4 = 0x4
	NSDictionary *movieDetails_;	// 8 = 0x8
	NSData *playReadyKey_;	// 12 = 0xc
	IMediaControl *mediaControl_;	// 16 = 0x10
	NetflixMediaControlListener *mediaControlListener_;	// 20 = 0x14
	NSMutableArray *errorStack_;	// 24 = 0x18
	NSDictionary *reportableActionId_;	// 28 = 0x1c
	NSLock *subtitlesProcessingLock_;	// 32 = 0x20
	BOOL subtitlesProcessing_;	// 36 = 0x24
	int subtitlesTrackIndex_;	// 40 = 0x28
	int audioTrackIndex_;	// 44 = 0x2c
	NSLock *playbackCommandLock_;	// 48 = 0x30
	BOOL playbackCommandInProgress_;	// 52 = 0x34
	int state_;	// 56 = 0x38
	unsigned lastKnownMappedVideoBitrate_;	// 60 = 0x3c
	unsigned lastNumAccessLogEvents_;	// 64 = 0x40
	long long totalBytesTransferred_;	// 68 = 0x44
	double observedBitrate_;	// 76 = 0x4c
	BOOL pollNetworkInterface_;	// 84 = 0x54
	long long pollBytesStart_;	// 88 = 0x58
	BwEntry *bwEntry_;	// 96 = 0x60
	double lastBwEntryTime_;	// 100 = 0x64
	long long lastBwEntryBytes_;	// 108 = 0x6c
	int networkInterfaceType_;	// 116 = 0x74
	long long bufferingStartBytes_;	// 120 = 0x78
	double bufferingStartTime_;	// 128 = 0x80
	double sampleReportWindow_;	// 136 = 0x88
	bool stalled_;	// 144 = 0x90
	int totalNumberOfStalls_;	// 148 = 0x94
	BOOL trickplayIsOn_;	// 152 = 0x98
	NSString *audioSelectLanguage_;	// 156 = 0x9c
	NSTimer *audioSelectTimer_;	// 160 = 0xa0
	double audioSelectTimeCount_;	// 164 = 0xa4
}
@property(retain, nonatomic) NSString *audioSelectLanguage;	// G=0x56ee95; S=0x56eea5; @synthesize=audioSelectLanguage_
@property(assign, nonatomic) double audioSelectTimeCount;	// G=0x56eed5; S=0x56eeed; @synthesize=audioSelectTimeCount_
@property(retain, nonatomic) NSTimer *audioSelectTimer;	// G=0x56eeb5; S=0x56eec5; @synthesize=audioSelectTimer_
@property(assign, nonatomic) int audioTrackIndex;	// G=0x56eb81; S=0x56eb91; @synthesize=audioTrackIndex_
@property(readonly, assign, nonatomic) unsigned bitrate;	// G=0x56e785; 
@property(assign, nonatomic) long long bufferingStartBytes;	// G=0x56ed9d; S=0x56edb5; @synthesize=bufferingStartBytes_
@property(assign, nonatomic) double bufferingStartTime;	// G=0x56edc9; S=0x56ede1; @synthesize=bufferingStartTime_
@property(assign, nonatomic) BwEntry *bwEntry;	// G=0x56ed05; S=0x56ed15; @synthesize=bwEntry_
@property(readonly, assign, nonatomic) long long bytes;	// G=0x56e7c9; 
@property(readonly, assign, nonatomic) long long bytesForInterface;	// G=0x56e82d; 
@property(readonly, assign, nonatomic) unsigned currentStreamBitrate;	// G=0x56e8ed; 
@property(retain, nonatomic) NSMutableArray *errorStack;	// G=0x56eacd; S=0x56eadd; @synthesize=errorStack_
@property(assign, nonatomic) long long lastBwEntryBytes;	// G=0x56ed51; S=0x56ed69; @synthesize=lastBwEntryBytes_
@property(assign, nonatomic) double lastBwEntryTime;	// G=0x56ed25; S=0x56ed3d; @synthesize=lastBwEntryTime_
@property(assign, nonatomic) unsigned lastKnownMappedVideoBitrate;	// G=0x56ec21; S=0x56ec31; @synthesize=lastKnownMappedVideoBitrate_
@property(assign, nonatomic) unsigned lastNumAccessLogEvents;	// G=0x56ec41; S=0x56ec51; @synthesize=lastNumAccessLogEvents_
@property(assign, nonatomic) IMediaControl *mediaControl;	// G=0x56eaad; S=0x569ac9; @synthesize=mediaControl_
@property(assign, nonatomic) NetflixMediaControlListener *mediaControlListener;	// G=0x56eabd; S=0x569bdd; @synthesize=mediaControlListener_
@property(retain) NSDictionary *movieDetails;	// G=0x56ea65; S=0x56ea79; @synthesize=movieDetails_
@property(assign, nonatomic) int networkInterfaceType;	// G=0x56ed7d; S=0x56ed8d; @synthesize=networkInterfaceType_
@property(assign, nonatomic) double observedBitrate;	// G=0x56ec8d; S=0x56eca5; @synthesize=observedBitrate_
@property(assign, nonatomic) BOOL openNotificationSent;	// G=0x56ea45; S=0x56ea55; @synthesize=openNotificationSent_
@property(copy) NSData *playReadyKey;	// G=0x56ea89; S=0x56ea9d; @synthesize=playReadyKey_
@property(assign) BOOL playbackCommandInProgress;	// G=0x56ebc5; S=0x56ebdd; @synthesize=playbackCommandInProgress_
@property(retain) NSLock *playbackCommandLock;	// G=0x56eba1; S=0x56ebb5; @synthesize=playbackCommandLock_
@property(assign, nonatomic) long long pollBytesStart;	// G=0x56ecd9; S=0x56ecf1; @synthesize=pollBytesStart_
@property(assign, nonatomic) BOOL pollNetworkInterface;	// G=0x56ecb9; S=0x56ecc9; @synthesize=pollNetworkInterface_
@property(retain, nonatomic) NSDictionary *reportableActionId;	// G=0x56eaed; S=0x56eafd; @synthesize=reportableActionId_
@property(assign, nonatomic) double sampleReportWindow;	// G=0x56edf5; S=0x56ee0d; @synthesize=sampleReportWindow_
@property(assign, nonatomic) bool stalled;	// G=0x56ee21; S=0x56ee35; @synthesize=stalled_
@property(assign) int state;	// G=0x56ebf5; S=0x56ec09; @synthesize=state_
@property(assign) BOOL subtitlesProcessing;	// G=0x56eb31; S=0x56eb49; @synthesize=subtitlesProcessing_
@property(retain) NSLock *subtitlesProcessingLock;	// G=0x56eb0d; S=0x56eb21; @synthesize=subtitlesProcessingLock_
@property(assign, nonatomic) int subtitlesTrackIndex;	// G=0x56eb61; S=0x56eb71; @synthesize=subtitlesTrackIndex_
@property(assign, nonatomic) long long totalBytesTransferred;	// G=0x56ec61; S=0x56ec79; @synthesize=totalBytesTransferred_
@property(assign, nonatomic) int totalNumberOfStalls;	// G=0x56ee45; S=0x56ee55; @synthesize=totalNumberOfStalls_
@property(assign) BOOL trickplay;	// G=0x56ea2d; S=0x56ea1d; converted property
@property(assign) BOOL trickplayIsOn;	// G=0x56ee65; S=0x56ee7d; @synthesize=trickplayIsOn_
+ (void)initialize;	// 0x569791
+ (id)sharedInstance;	// 0x569795
- (id)init;	// 0x569881
- (void)audioSelect:(id)select;	// 0x56b419
- (void)audioSelectAsync:(id)async;	// 0x56ba71
- (BOOL)audioSelectAvailable;	// 0x56b455
// declared property getter: - (id)audioSelectLanguage;	// 0x56ee95
// declared property getter: - (double)audioSelectTimeCount;	// 0x56eed5
// declared property getter: - (id)audioSelectTimer;	// 0x56eeb5
// declared property getter: - (int)audioTrackIndex;	// 0x56eb81
// declared property getter: - (unsigned)bitrate;	// 0x56e785
- (void)buffering:(double)buffering;	// 0x56a171
- (void)bufferingComplete:(double)complete;	// 0x56a289
// declared property getter: - (long long)bufferingStartBytes;	// 0x56ed9d
// declared property getter: - (double)bufferingStartTime;	// 0x56edc9
// declared property getter: - (BwEntry *)bwEntry;	// 0x56ed05
// declared property getter: - (long long)bytes;	// 0x56e7c9
// declared property getter: - (long long)bytesForInterface;	// 0x56e82d
- (void)cancelUpdateTimer;	// 0x56b949
- (id)capitalizeAudioTracksArray:(id)array;	// 0x56c2e9
- (id)capitalizeSubtitlesForMovieDetails:(id)movieDetails;	// 0x56c3d9
- (id)capitalizeSubtitlesForTrackCombinationArray:(id)trackCombinationArray;	// 0x56c1f9
- (id)capitalizeTrackCombination:(id)combination;	// 0x56c125
- (id)capitalizeTracks:(id)tracks;	// 0x56c035
- (void)clearErrorStack;	// 0x56e9f5
- (void)close;	// 0x56a079
- (id)createErrorFromStack;	// 0x56c73d
// declared property getter: - (unsigned)currentStreamBitrate;	// 0x56e8ed
- (void)dealloc;	// 0x5699b5
- (void)end:(double)end reason:(id)reason;	// 0x569e99
// declared property getter: - (id)errorStack;	// 0x56eacd
- (int)fetchBookmark:(id)bookmark;	// 0x56e495
- (void)getAppCert;	// 0x56baed
- (void)getFpsCkc:(id)ckc forAssetId:(id)assetId;	// 0x56bd11
- (id)getFpsCkcWithSpcData:(id)spcData forAssetId:(id)assetId;	// 0x56bea5
// declared property getter: - (long long)lastBwEntryBytes;	// 0x56ed51
// declared property getter: - (double)lastBwEntryTime;	// 0x56ed25
// declared property getter: - (unsigned)lastKnownMappedVideoBitrate;	// 0x56ec21
// declared property getter: - (unsigned)lastNumAccessLogEvents;	// 0x56ec41
// declared property getter: - (IMediaControl *)mediaControl;	// 0x56eaad
// declared property getter: - (NetflixMediaControlListener *)mediaControlListener;	// 0x56eabd
- (void)mediaDidAcquireLicense;	// 0x56cd4d
- (void)mediaDidAuthorize;	// 0x56cc1d
- (void)mediaDidBuildPlaylists;	// 0x56cde5
- (void)mediaDidCdnSelect;	// 0x56ccb5
- (void)mediaDidClose;	// 0x56c589
- (void)mediaDidFailLoadSubtitles:(int)media error:(id)error;	// 0x56cf99
- (void)mediaDidFailOpen:(id)media;	// 0x56ca95
- (void)mediaDidHandleNccpError:(id)media;	// 0x56c5fd
- (void)mediaDidLoadSubtitles:(id)media;	// 0x56cec9
- (void)mediaDidSelectAudio:(id)media allowsOff:(BOOL)off;	// 0x56e925
- (void)mediaDidSetSpeed:(float)media;	// 0x56ce31
- (void)mediaOpenComplete:(id)complete;	// 0x56c4b1
- (void)mediaWillAcquireLicense;	// 0x56cd01
- (void)mediaWillAuthorize;	// 0x56cbd1
- (void)mediaWillBuildPlaylists;	// 0x56cd99
- (void)mediaWillCdnSelect;	// 0x56cc69
- (void)mediaWillLoadSubtitles;	// 0x56cec5
// declared property getter: - (id)movieDetails;	// 0x56ea65
// declared property getter: - (int)networkInterfaceType;	// 0x56ed7d
- (void)networkSelection:(id)selection;	// 0x56b209
- (int)networkTypeStringToType:(id)type;	// 0x56b195
// declared property getter: - (double)observedBitrate;	// 0x56ec8d
- (void)open:(id)open;	// 0x569c01
- (void)openAsync:(id)async;	// 0x56d3d1
// declared property getter: - (BOOL)openNotificationSent;	// 0x56ea45
- (void)pause:(double)pause;	// 0x569cb9
- (void)play:(double)play;	// 0x569c41
// declared property getter: - (id)playReadyKey;	// 0x56ea89
// declared property getter: - (BOOL)playbackCommandInProgress;	// 0x56ebc5
// declared property getter: - (id)playbackCommandLock;	// 0x56eba1
- (id)playlistForIndicatedBitrate:(double)indicatedBitrate;	// 0x56e619
- (id)playlistForRequestedM3u8:(id)requestedM3u8;	// 0x56aea9
// declared property getter: - (long long)pollBytesStart;	// 0x56ecd9
// declared property getter: - (BOOL)pollNetworkInterface;	// 0x56ecb9
- (void)postMediaCloseFailure;	// 0x56d2c9
- (void)postMediaOpenFailure:(int)failure;	// 0x56d119
- (void)postMediaOpenFailure:(id)failure clearProgress:(BOOL)progress;	// 0x56d1f1
- (void)postMediaOpenSuccess:(id)success;	// 0x56d07d
// declared property getter: - (id)reportableActionId;	// 0x56eaed
- (void)reposition:(double)reposition;	// 0x569da9
- (void)resetUpdateTimer;	// 0x56b989
// declared property getter: - (double)sampleReportWindow;	// 0x56edf5
- (void)selectedPlaylist:(id)playlist;	// 0x56afb9
// declared property setter: - (void)setAudioSelectLanguage:(id)language;	// 0x56eea5
// declared property setter: - (void)setAudioSelectTimeCount:(double)count;	// 0x56eeed
// declared property setter: - (void)setAudioSelectTimer:(id)timer;	// 0x56eec5
// declared property setter: - (void)setAudioTrackIndex:(int)index;	// 0x56eb91
// declared property setter: - (void)setBufferingStartBytes:(long long)bytes;	// 0x56edb5
// declared property setter: - (void)setBufferingStartTime:(double)time;	// 0x56ede1
// declared property setter: - (void)setBwEntry:(BwEntry *)entry;	// 0x56ed15
// declared property setter: - (void)setErrorStack:(id)stack;	// 0x56eadd
// declared property setter: - (void)setLastBwEntryBytes:(long long)bytes;	// 0x56ed69
// declared property setter: - (void)setLastBwEntryTime:(double)time;	// 0x56ed3d
// declared property setter: - (void)setLastKnownMappedVideoBitrate:(unsigned)bitrate;	// 0x56ec31
// declared property setter: - (void)setLastNumAccessLogEvents:(unsigned)events;	// 0x56ec51
// declared property setter: - (void)setMediaControl:(IMediaControl *)control;	// 0x569ac9
// declared property setter: - (void)setMediaControlListener:(NetflixMediaControlListener *)listener;	// 0x569bdd
// declared property setter: - (void)setMovieDetails:(id)details;	// 0x56ea79
// declared property setter: - (void)setNetworkInterfaceType:(int)type;	// 0x56ed8d
// declared property setter: - (void)setObservedBitrate:(double)bitrate;	// 0x56eca5
// declared property setter: - (void)setOpenNotificationSent:(BOOL)sent;	// 0x56ea55
// declared property setter: - (void)setPlayReadyKey:(id)key;	// 0x56ea9d
// declared property setter: - (void)setPlaybackCommandInProgress:(BOOL)progress;	// 0x56ebdd
// declared property setter: - (void)setPlaybackCommandLock:(id)lock;	// 0x56ebb5
// declared property setter: - (void)setPollBytesStart:(long long)start;	// 0x56ecf1
// declared property setter: - (void)setPollNetworkInterface:(BOOL)interface;	// 0x56ecc9
// declared property setter: - (void)setReportableActionId:(id)anId;	// 0x56eafd
// declared property setter: - (void)setSampleReportWindow:(double)window;	// 0x56ee0d
// declared property setter: - (void)setStalled:(bool)stalled;	// 0x56ee35
// declared property setter: - (void)setState:(int)state;	// 0x56ec09
// declared property setter: - (void)setSubtitlesProcessing:(BOOL)processing;	// 0x56eb49
// declared property setter: - (void)setSubtitlesProcessingLock:(id)lock;	// 0x56eb21
// declared property setter: - (void)setSubtitlesTrackIndex:(int)index;	// 0x56eb71
// declared property setter: - (void)setTotalBytesTransferred:(long long)transferred;	// 0x56ec79
// declared property setter: - (void)setTotalNumberOfStalls:(int)stalls;	// 0x56ee55
// converted property setter: - (void)setTrickplay:(BOOL)trickplay;	// 0x56ea1d
// declared property setter: - (void)setTrickplayIsOn:(BOOL)on;	// 0x56ee7d
// declared property getter: - (bool)stalled;	// 0x56ee21
// declared property getter: - (int)state;	// 0x56ebf5
- (void)stop:(double)stop;	// 0x569e21
- (void)streamSelected:(int)selected streamIndex:(int)index;	// 0x56a429
// declared property getter: - (BOOL)subtitlesProcessing;	// 0x56eb31
// declared property getter: - (id)subtitlesProcessingLock;	// 0x56eb0d
- (void)subtitlesSelect:(id)select;	// 0x56b159
- (void)subtitlesSelectAsync:(id)async;	// 0x56e175
// declared property getter: - (int)subtitlesTrackIndex;	// 0x56eb61
// declared property getter: - (long long)totalBytesTransferred;	// 0x56ec61
// declared property getter: - (int)totalNumberOfStalls;	// 0x56ee45
- (id)trackWithCapitalizedDescriptionFromTrack:(id)track;	// 0x56bf55
// converted property getter: - (BOOL)trickplay;	// 0x56ea2d
// declared property getter: - (BOOL)trickplayIsOn;	// 0x56ee65
- (void)unpause:(double)unpause;	// 0x569d31
- (void)updatePts:(double)pts;	// 0x56a4b1
- (void)updatePts:(double)pts accessLogEvents:(id)events;	// 0x56aa11
- (void)updateSubtitleCheck;	// 0x56b855
@end

