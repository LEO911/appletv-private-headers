/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/CorePDF.framework/CorePDF
 */

#import "CorePDF-Structs.h"
#import "CPDisposable.h"
#import "CPTextObject.h"

@class NSArray, CPCharSequence;

@interface CPTextLine : CPTextObject <CPDisposable> {
	CPCharSequence *charSequence;	// 76 = 0x4c
	XXStruct_NaTu4D *wordArray;	// 80 = 0x50
	unsigned wordCount;	// 84 = 0x54
	CPInlineContainer *inlineList;	// 88 = 0x58
	int lineNumber;	// 92 = 0x5c
	int columnNumber;	// 96 = 0x60
	float baseline;	// 100 = 0x64
	BOOL baseLineIsNull;	// 104 = 0x68
	BOOL hasBeenSplit;	// 105 = 0x69
	BOOL hasBeenProcessed;	// 106 = 0x6a
	BOOL maySplit;	// 107 = 0x6b
	BOOL hasTabs;	// 108 = 0x6c
	NSArray *columnBreaks;	// 112 = 0x70
	NSArray *xsegments;	// 116 = 0x74
	float minimumOffset;	// 120 = 0x78
	int levels;	// 124 = 0x7c
	float maximumLetterGap;	// 128 = 0x80
	float maximumWordGap;	// 132 = 0x84
	int tabsBefore;	// 136 = 0x88
	BOOL irregular;	// 140 = 0x8c
	unsigned leftSpacerIndex;	// 144 = 0x90
	unsigned rightSpacerIndex;	// 148 = 0x94
	BOOL isListItem;	// 152 = 0x98
	unsigned listSpacerIndex;	// 156 = 0x9c
	BOOL lineBreakAfter;	// 160 = 0xa0
	CPPDFStyle *uniformStyle;	// 164 = 0xa4
	unsigned short uniformStyleFlags;	// 168 = 0xa8
	float monospaceWidth;	// 172 = 0xac
	unsigned *spacesBefore;	// 176 = 0xb0
	BOOL disposed;	// 180 = 0xb4
}
@property(assign) float baseline;	// G=0x30298659; S=0x302971e1; converted property
@property(retain) CPCharSequence *charSequence;	// G=0x30296f09; S=0x30297e89; converted property
@property(retain) NSArray *columnBreaks;	// G=0x30297189; S=0x30297a99; converted property
@property(assign) BOOL hasBeenProcessed;	// G=0x30297179; S=0x30297169; converted property
@property(assign) BOOL hasBeenSplit;	// G=0x30297159; S=0x30297149; converted property
@property(assign) BOOL hasTabs;	// G=0x302971a9; S=0x30297199; converted property
@property(readonly, assign) CPInlineContainer *inlineList;	// G=0x30296fa9; converted property
@property(assign) BOOL irregular;	// G=0x302972b5; S=0x302972c5; converted property
@property(assign, nonatomic) BOOL isListItem;	// G=0x30297321; S=0x30297331; @synthesize
@property(assign, nonatomic) unsigned leftSpacerIndex;	// G=0x30297361; S=0x30297371; @synthesize
@property(assign) int levels;	// G=0x30297239; S=0x30297249; converted property
@property(assign, nonatomic) BOOL lineBreakAfter;	// G=0x302972e1; S=0x302972f1; @synthesize
@property(assign, nonatomic) unsigned listSpacerIndex;	// G=0x30297301; S=0x30297311; @synthesize
@property(assign) float maximumLetterGap;	// G=0x30297275; S=0x30297285; converted property
@property(assign) float maximumWordGap;	// G=0x30297295; S=0x302972a5; converted property
@property(readonly, assign) float monospaceWidth;	// G=0x3029759d; converted property
@property(assign, nonatomic) unsigned rightSpacerIndex;	// G=0x30297341; S=0x30297351; @synthesize
@property(assign) int tabsBefore;	// G=0x302971c9; S=0x302971b9; converted property
@property(readonly, assign) XXStruct_NaTu4D *wordArray;	// G=0x30296f19; converted property
@property(readonly, assign) unsigned wordCount;	// G=0x30296f29; converted property
- (id)init;	// 0x302973d5
- (void)accept:(id)accept;	// 0x30297a7d
- (int)align;	// 0x30297e09
- (CGPoint)anchor;	// 0x3029796d
- (void)anchorChunk:(id)chunk atWordIndex:(unsigned)wordIndex;	// 0x302982b5
- (id)attributes;	// 0x302972d5
- (int)baseLineAscending:(id)ascending;	// 0x30297a25
- (int)baseLineDescending:(id)descending;	// 0x302979cd
// converted property getter: - (float)baseline;	// 0x30298659
- (CGRect)bounds;	// 0x30298499
- (CGRect)boundsOfWordAtIndex:(unsigned)index;	// 0x3029821d
- (BOOL)changesFontAt:(id)at;	// 0x302983f5
// converted property getter: - (id)charSequence;	// 0x30296f09
// converted property getter: - (id)columnBreaks;	// 0x30297189
- (id)copyWithZone:(NSZone *)zone;	// 0x302980a5
- (void)dealloc;	// 0x30297ec5
- (void)dispose;	// 0x30297f69
- (void)finalize;	// 0x30297f2d
- (XXStruct_NaTu4D *)firstWord;	// 0x30296f39
- (void)fitBoundsToChildren;	// 0x302971d9
// converted property getter: - (BOOL)hasBeenProcessed;	// 0x30297179
// converted property getter: - (BOOL)hasBeenSplit;	// 0x30297159
- (BOOL)hasDropCap;	// 0x30297499
- (BOOL)hasJustifiedAlignment;	// 0x30297de1
// converted property getter: - (BOOL)hasTabs;	// 0x302971a9
- (BOOL)hyphenated;	// 0x302971dd
- (unsigned)inlineCount;	// 0x30296f85
// converted property getter: - (CPInlineContainer *)inlineList;	// 0x30296fa9
// converted property getter: - (BOOL)irregular;	// 0x302972b5
- (BOOL)isIndivisible;	// 0x30297201
// declared property getter: - (BOOL)isListItem;	// 0x30297321
- (BOOL)isMonospaced;	// 0x302976ed
- (XXStruct_NaTu4D *)lastWord;	// 0x30296f59
// declared property getter: - (unsigned)leftSpacerIndex;	// 0x30297361
// converted property getter: - (int)levels;	// 0x30297239
// declared property getter: - (BOOL)lineBreakAfter;	// 0x302972e1
// declared property getter: - (unsigned)listSpacerIndex;	// 0x30297301
- (BOOL)mapToWordPairs:(/*function-pointer*/ void *)wordPairs passing:(void *)passing;	// 0x30297075
- (BOOL)mapToWordPairsWithIndex:(/*function-pointer*/ void *)index passing:(void *)passing;	// 0x302970d1
- (BOOL)mapToWords:(/*function-pointer*/ void *)words passing:(void *)passing;	// 0x30296fc9
- (BOOL)mapToWordsWithIndex:(/*function-pointer*/ void *)index passing:(void *)passing;	// 0x3029701d
// converted property getter: - (float)maximumLetterGap;	// 0x30297275
// converted property getter: - (float)maximumWordGap;	// 0x30297295
- (float)medianFontSize;	// 0x302985d1
// converted property getter: - (float)monospaceWidth;	// 0x3029759d
- (id)newTextLineFromWordAt:(unsigned)at lengthInWords:(unsigned)words;	// 0x30297c51
- (BOOL)overlapsHorizontally:(CGRect)horizontally;	// 0x30298545
- (BOOL)overlapsWith:(id)with;	// 0x30298271
- (id)properties;	// 0x3029713d
- (void)recomputeBaseline;	// 0x30297815
- (void)recomputeLevels;	// 0x30297545
- (BOOL)removeTextLines:(id)lines whereTrue:(/*function-pointer*/ void *)aTrue passing:(void *)passing;	// 0x30297ad5
// declared property getter: - (unsigned)rightSpacerIndex;	// 0x30297341
// converted property setter: - (void)setBaseline:(float)baseline;	// 0x302971e1
- (void)setBaselineToNull;	// 0x302971f1
// converted property setter: - (void)setCharSequence:(id)sequence;	// 0x30297e89
// converted property setter: - (void)setColumnBreaks:(id)breaks;	// 0x30297a99
// converted property setter: - (void)setHasBeenProcessed:(BOOL)processed;	// 0x30297169
// converted property setter: - (void)setHasBeenSplit:(BOOL)split;	// 0x30297149
// converted property setter: - (void)setHasTabs:(BOOL)tabs;	// 0x30297199
// converted property setter: - (void)setIrregular:(BOOL)irregular;	// 0x302972c5
// declared property setter: - (void)setIsListItem:(BOOL)item;	// 0x30297331
// declared property setter: - (void)setLeftSpacerIndex:(unsigned)index;	// 0x30297371
// converted property setter: - (void)setLevels:(int)levels;	// 0x30297249
// declared property setter: - (void)setLineBreakAfter:(BOOL)after;	// 0x302972f1
// declared property setter: - (void)setListSpacerIndex:(unsigned)index;	// 0x30297311
// converted property setter: - (void)setMaximumLetterGap:(float)gap;	// 0x30297285
// converted property setter: - (void)setMaximumWordGap:(float)gap;	// 0x302972a5
// declared property setter: - (void)setRightSpacerIndex:(unsigned)index;	// 0x30297351
- (void)setSpaces:(unsigned)spaces beforeWordAtIndex:(unsigned)index;	// 0x30297ff1
// converted property setter: - (void)setTabsBefore:(int)before;	// 0x302971b9
- (unsigned)spacesBeforeWordAtIndex:(unsigned)index;	// 0x30297205
- (BOOL)styleIsUniform:(CPPDFStyle **)uniform styleFlags:(unsigned short)flags;	// 0x30297715
// converted property getter: - (int)tabsBefore;	// 0x302971c9
- (int)topIsAbove:(id)above;	// 0x30298791
- (void)translateObjectYBy:(float)by;	// 0x30297381
// converted property getter: - (XXStruct_NaTu4D *)wordArray;	// 0x30296f19
- (XXStruct_NaTu4D *)wordArrayOfSize:(unsigned)size;	// 0x30298181
- (XXStruct_NaTu4D *)wordAtIndex:(unsigned)index;	// 0x302981d5
// converted property getter: - (unsigned)wordCount;	// 0x30296f29
- (long)zOrder;	// 0x30297e45
@end

