/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/Foundation.framework/Foundation
 */

#import "NSCopying.h"
#import <NSObject.h> // Unknown library
#import "NSCoding.h"
#import "Foundation-Structs.h"


@interface NSExpression : NSObject <NSCoding, NSCopying> {
@private
	void *_reserved;	// 4 = 0x4
	unsigned _expressionType;	// 8 = 0x8
}
@property(readonly, assign) unsigned expressionType;	// G=0x31a00a25; converted property
+ (id)_newKeyPathExpressionForString:(id)string;	// 0x31a009cd
+ (id)expressionForAggregate:(id)aggregate;	// 0x31abee9d
+ (id)expressionForBlock:(id)block arguments:(id)arguments;	// 0x31abf129
+ (id)expressionForConstantValue:(id)constantValue;	// 0x31a1ec59
+ (id)expressionForEvaluatedObject;	// 0x31a1b471
+ (id)expressionForFunction:(id)function arguments:(id)arguments;	// 0x31a1d429
+ (id)expressionForFunction:(id)function selectorName:(id)name arguments:(id)arguments;	// 0x31abef39
+ (id)expressionForIntersectSet:(id)intersectSet with:(id)with;	// 0x31abf081
+ (id)expressionForKeyPath:(id)keyPath;	// 0x31a00961
+ (id)expressionForMinusSet:(id)minusSet with:(id)with;	// 0x31abf0d5
+ (id)expressionForSubquery:(id)subquery usingIteratorVariable:(id)variable predicate:(id)predicate;	// 0x31abeee5
+ (id)expressionForSymbolicString:(id)symbolicString;	// 0x31abee55
+ (id)expressionForTernaryWithPredicate:(id)predicate trueExpression:(id)expression falseExpression:(id)expression3;	// 0x31abefd9
+ (id)expressionForUnionSet:(id)unionSet with:(id)with;	// 0x31abf02d
+ (id)expressionForVariable:(id)variable;	// 0x31abee0d
+ (id)expressionForVariableNameAssignment:(id)variableNameAssignment expression:(id)expression;	// 0x31abef8d
+ (id)expressionWithFormat:(id)format;	// 0x31abed7d
+ (id)expressionWithFormat:(id)format argumentArray:(id)array;	// 0x31abed19
+ (id)expressionWithFormat:(id)format arguments:(void *)arguments;	// 0x31abeda9
- (id)initWithCoder:(id)coder;	// 0x31a1b7e9
- (id)initWithExpressionType:(unsigned)expressionType;	// 0x319f8d41
- (id)_expressionWithSubstitutionVariables:(id)substitutionVariables;	// 0x31abf4a1
- (BOOL)_shouldUseParensWithDescription;	// 0x31abf49d
- (void)acceptVisitor:(id)visitor flags:(unsigned)flags;	// 0x31a1c2c1
- (id)arguments;	// 0x31abf359
- (id)collection;	// 0x31abf3e9
- (id)constantValue;	// 0x31abf2a5
- (id)copyWithZone:(NSZone *)zone;	// 0x31abf205
- (id)description;	// 0x31abf24d
- (void)encodeWithCoder:(id)coder;	// 0x31abf17d
- (id)expressionBlock;	// 0x31abf479
// converted property getter: - (unsigned)expressionType;	// 0x31a00a25
- (id)expressionValueWithObject:(id)object context:(id)context;	// 0x31abf229
- (id)falseExpression;	// 0x31abf455
- (id)function;	// 0x31abf2ed
- (id)keyPath;	// 0x31abf281
- (id)leftExpression;	// 0x31abf37d
- (id)operand;	// 0x31abf311
- (id)predicate;	// 0x31abf3c5
- (id)predicateFormat;	// 0x31abf25d
- (id)rightExpression;	// 0x31abf3a1
- (SEL)selector;	// 0x31abf335
- (id)subexpression;	// 0x31abf40d
- (id)trueExpression;	// 0x31abf431
- (id)variable;	// 0x31abf2c9
@end

