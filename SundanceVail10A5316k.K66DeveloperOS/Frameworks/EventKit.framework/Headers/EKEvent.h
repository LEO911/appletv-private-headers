/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/EventKit.framework/EventKit
 */

#import "EKCalendarItem.h"
#import "EventKit-Structs.h"

@class EKCalendarDate, NSString, NSNumber, EKRecurrenceRule, NSDate, EKParticipant;

@interface EKEvent : EKCalendarItem {
@private
	EKCalendarDate *_occurrenceStartDate;	// 40 = 0x28
	EKCalendarDate *_occurrenceEndDate;	// 44 = 0x2c
	BOOL _occurrenceIsAllDay;	// 48 = 0x30
	EKCalendarDate *_originalOccurrenceStartDate;	// 52 = 0x34
	EKCalendarDate *_originalOccurrenceEndDate;	// 56 = 0x38
	NSNumber *_originalOccurrenceIsAllDay;	// 60 = 0x3c
}
@property(assign, nonatomic, getter=isAllDay) BOOL allDay;	// G=0x30df245d; S=0x30dfb82d; 
@property(assign, nonatomic) int availability;	// G=0x30e3e109; S=0x30e3e15d; 
@property(readonly, assign, nonatomic) int birthdayPersonID;	// G=0x30e3dfe1; 
@property(copy, nonatomic) NSDate *endDate;	// G=0x30df2635; S=0x30dfbdf1; 
@property(readonly, assign, nonatomic) NSString *eventIdentifier;	// G=0x30df964d; 
@property(assign) unsigned invitationStatus;	// G=0x30e3e1fd; S=0x30e3e231; converted property
@property(readonly, assign, nonatomic) BOOL isDetached;	// G=0x30dfb639; 
@property(assign) unsigned modifiedProperties;	// G=0x30e3dd7d; S=0x30e3ddb1; converted property
@property(assign) BOOL needsOccurrenceCacheUpdate;	// G=0x30e3ddf5; S=0x30e3de19; converted property
@property(copy, nonatomic) EKCalendarDate *occurrenceEndDate;	// G=0x30df1c29; S=0x30df244d; @synthesize=_occurrenceEndDate
@property(assign, nonatomic) BOOL occurrenceIsAllDay;	// G=0x30e40aa1; S=0x30df16b9; @synthesize=_occurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *occurrenceStartDate;	// G=0x30df2439; S=0x30df1659; @synthesize=_occurrenceStartDate
@property(readonly, assign, nonatomic) EKParticipant *organizer;	// G=0x30df980d; 
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate;	// G=0x30dfc6a5; S=0x30dfbd35; @synthesize=_originalOccurrenceEndDate
@property(copy, nonatomic) NSNumber *originalOccurrenceIsAllDay;	// G=0x30dfc6cd; S=0x30dfa781; @synthesize=_originalOccurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate;	// G=0x30dfc681; S=0x30dfbd25; @synthesize=_originalOccurrenceStartDate
@property(assign) int participationStatus;	// G=0x30df9f61; S=0x30e3de5d; converted property
@property(retain, nonatomic) EKRecurrenceRule *recurrenceRule;	// G=0x30e3e059; S=0x30e3e0a5; 
@property(retain) id responseComment;	// G=0x30e3e1c5; S=0x30e3e1e1; converted property
@property(copy, nonatomic) NSDate *startDate;	// G=0x30df2615; S=0x30dfbaf9; 
@property(readonly, assign, nonatomic) int status;	// G=0x30df3ec5; 
+ (id)eventWithEventStore:(id)eventStore;	// 0x30dfcf51
- (id)init;	// 0x30e3d759
- (id)initWithEventStore:(id)eventStore;	// 0x30dfa0d5
- (id)initWithPersistentObject:(id)persistentObject;	// 0x30e3d795
- (id)initWithPersistentObject:(id)persistentObject occurrenceDate:(id)date;	// 0x30df11d5
- (BOOL)_cancelWithSpan:(int)span error:(id *)error;	// 0x30e3fe65
- (BOOL)_checkStartDateConstraintAgainstDate:(XXStruct_lQVxyC)date timeZone:(id)zone error:(id *)error;	// 0x30dffc31
- (id)_dateForNextOccurrence;	// 0x30e3ebb1
- (BOOL)_deleteWithSpan:(int)span error:(id *)error;	// 0x30e0619d
- (void)_detachWithStartDate:(id)startDate newStartDate:(id)date future:(BOOL)future;	// 0x30e3ffed
- (id)_effectiveTimeZone;	// 0x30dfbd45
- (XXStruct_lQVxyC)_gregorianDateCorrectedForTimeZoneFromCalendarDate:(id)calendarDate orNSDate:(id)date;	// 0x30e3dbc9
- (BOOL)_isAlarmAcknowledgedPropertyDirty;	// 0x30e3e94d
- (BOOL)_isAllDay;	// 0x30df1669
- (BOOL)_isInitialOccurrenceDate:(id)date;	// 0x30e05fb1
- (BOOL)_occurrenceExistsOnDate:(double)date timeZone:(id)zone;	// 0x30e3fb45
- (int)_parentParticipationStatus;	// 0x30e3dfa1
- (id)_persistentEvent;	// 0x30df1d09
- (void)_sendModifiedNote;	// 0x30dfcebd
- (BOOL)_shouldCancelInsteadOfDeleteWithSpan:(int)span;	// 0x30e0609d
- (BOOL)_shouldDeclineInsteadOfDelete;	// 0x30e3fd99
- (BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(int)recurrenceInterval;	// 0x30e3ef19
- (BOOL)_validateDatesAndRecurrencesGivenSpan:(int)span error:(id *)error;	// 0x30dff839
- (BOOL)_validateDurationConstrainedToRecurrenceInterval;	// 0x30e3ed1d
- (int)alarmCount;	// 0x30e3e031
- (BOOL)allowsAlarmModifications;	// 0x30dffd2d
- (BOOL)allowsCalendarModifications;	// 0x30e3e635
- (BOOL)allowsRecurrenceModifications;	// 0x30dfb5b1
- (id)attachments;	// 0x30df9719
- (int)attendeeCount;	// 0x30e3e009
- (id)attendees;	// 0x30df98ad
// declared property getter: - (int)availability;	// 0x30e3e109
// declared property getter: - (int)birthdayPersonID;	// 0x30e3dfe1
- (id)birthdayTitleWithAddressBook:(void *)addressBook;	// 0x30e3da11
- (BOOL)canBeRespondedTo;	// 0x30df9cf5
- (BOOL)canDetachSingleOccurrence;	// 0x30e3e6d1
- (BOOL)canMoveToCalendar:(id)calendar fromCalendar:(id)calendar2 error:(id *)error;	// 0x30e3e3fd
- (BOOL)canSetAvailability;	// 0x30e3e795
- (void)clearInvitationStatus;	// 0x30e3e275
- (BOOL)commitWithSpan:(int)span error:(id *)error;	// 0x30dffe59
- (id)committedValueForKey:(id)key;	// 0x30dfad0d
- (int)compareStartDateWithEvent:(id)event;	// 0x30df2591
- (BOOL)dateChanged;	// 0x30e3e2a9
- (void)dealloc;	// 0x30dfa915
- (id)description;	// 0x30e3e80d
- (void)didCommit;	// 0x30e04599
- (id)dirtyPropertiesToSkip;	// 0x30e3ea4d
- (double)duration;	// 0x30df5451
- (id)endCalendarDate;	// 0x30df1c19
// declared property getter: - (id)endDate;	// 0x30df2635
- (XXStruct_lQVxyC)endDateGr;	// 0x30df53f5
- (XXStruct_lQVxyC)endDatePinnedForAllDay;	// 0x30e3dd09
// declared property getter: - (id)eventIdentifier;	// 0x30df964d
- (id)eventStore;	// 0x30df4131
- (id)exportToICS;	// 0x30e3d8c9
- (id)externalId;	// 0x30e3e745
- (id)externalURL;	// 0x30e3d7a9
- (BOOL)hasSelfAttendee;	// 0x30e3e7e1
- (unsigned)hash;	// 0x30df246d
- (id)initialEndDate;	// 0x30e3db51
- (id)initialStartDate;	// 0x30e3daf5
// converted property getter: - (unsigned)invitationStatus;	// 0x30e3e1fd
// declared property getter: - (BOOL)isAllDay;	// 0x30df245d
- (BOOL)isAllDayDirty;	// 0x30e3d951
// declared property getter: - (BOOL)isDetached;	// 0x30dfb639
- (BOOL)isDirtyIgnoringCalendar;	// 0x30e3d971
- (BOOL)isEndDateDirty;	// 0x30e3d931
- (BOOL)isEqual:(id)equal;	// 0x30df24c9
- (BOOL)isStartDateDirty;	// 0x30e3d911
- (BOOL)isStatusDirty;	// 0x30e3d8f1
- (BOOL)isTentative;	// 0x30e3e359
- (BOOL)locationChanged;	// 0x30e3e32d
// converted property getter: - (unsigned)modifiedProperties;	// 0x30e3dd7d
// converted property getter: - (BOOL)needsOccurrenceCacheUpdate;	// 0x30e3ddf5
- (id)occurrenceDate;	// 0x30dfb475
// declared property getter: - (id)occurrenceEndDate;	// 0x30df1c29
// declared property getter: - (BOOL)occurrenceIsAllDay;	// 0x30e40aa1
// declared property getter: - (id)occurrenceStartDate;	// 0x30df2439
// declared property getter: - (id)organizer;	// 0x30df980d
// declared property getter: - (id)originalOccurrenceEndDate;	// 0x30dfc6a5
// declared property getter: - (id)originalOccurrenceIsAllDay;	// 0x30dfc6cd
// declared property getter: - (id)originalOccurrenceStartDate;	// 0x30dfc681
// converted property getter: - (int)participationStatus;	// 0x30df9f61
- (int)pendingParticipationStatus;	// 0x30e3e71d
// declared property getter: - (id)recurrenceRule;	// 0x30e3e059
- (BOOL)refresh;	// 0x30dfc765
- (BOOL)removeWithSpan:(int)span error:(id *)error;	// 0x30e05e79
- (BOOL)requiresDetach;	// 0x30dfe9a5
// converted property getter: - (id)responseComment;	// 0x30e3e1c5
- (BOOL)responseMustApplyToAll;	// 0x30e3e6a9
- (void)revert;	// 0x30e3eaa5
- (void)rollback;	// 0x30dfc0d9
// declared property setter: - (void)setAllDay:(BOOL)day;	// 0x30dfb82d
// declared property setter: - (void)setAvailability:(int)availability;	// 0x30e3e15d
// declared property setter: - (void)setEndDate:(id)date;	// 0x30dfbdf1
// converted property setter: - (void)setInvitationStatus:(unsigned)status;	// 0x30e3e231
// converted property setter: - (void)setModifiedProperties:(unsigned)properties;	// 0x30e3ddb1
// converted property setter: - (void)setNeedsOccurrenceCacheUpdate:(BOOL)update;	// 0x30e3de19
// declared property setter: - (void)setOccurrenceEndDate:(id)date;	// 0x30df244d
// declared property setter: - (void)setOccurrenceIsAllDay:(BOOL)day;	// 0x30df16b9
// declared property setter: - (void)setOccurrenceStartDate:(id)date;	// 0x30df1659
// declared property setter: - (void)setOriginalOccurrenceEndDate:(id)date;	// 0x30dfbd35
// declared property setter: - (void)setOriginalOccurrenceIsAllDay:(id)day;	// 0x30dfa781
// declared property setter: - (void)setOriginalOccurrenceStartDate:(id)date;	// 0x30dfbd25
// converted property setter: - (void)setParticipationStatus:(int)status;	// 0x30e3de5d
// declared property setter: - (void)setRecurrenceRule:(id)rule;	// 0x30e3e0a5
// converted property setter: - (void)setResponseComment:(id)comment;	// 0x30e3e1e1
// declared property setter: - (void)setStartDate:(id)date;	// 0x30dfbaf9
- (void)setTimeZone:(id)zone;	// 0x30dfa791
- (id)startCalendarDate;	// 0x30df1c09
// declared property getter: - (id)startDate;	// 0x30df2615
- (XXStruct_lQVxyC)startDateGr;	// 0x30df5399
- (XXStruct_lQVxyC)startDatePinnedForAllDay;	// 0x30e3dca1
// declared property getter: - (int)status;	// 0x30df3ec5
- (BOOL)timeChanged;	// 0x30e3e2d5
- (BOOL)titleChanged;	// 0x30e3e301
- (id)uniqueId;	// 0x30e3e76d
- (BOOL)validateWithSpan:(int)span error:(id *)error;	// 0x30dfee29
@end

