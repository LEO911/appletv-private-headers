/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/CoreData.framework/CoreData
 */

#import <NSObject.h> // Unknown library
#import "CoreData-Structs.h"

@class NSArray, NSSQLAdapter, NSSQLStatement;

__attribute__((visibility("hidden")))
@interface NSSQLConnection : NSObject {
@private
	NSSQLAdapter *_adapter;	// 4 = 0x4
	BOOL _transactionIsOpen;	// 8 = 0x8
	BOOL _useSyntaxColoredLogging;	// 9 = 0x9
	int _debug;	// 12 = 0xc
	NSSQLStatement *_sqlStatement;	// 16 = 0x10
	NSArray *_columnsToFetch;	// 20 = 0x14
	NSArray *_metadataColumns;	// 24 = 0x18
}
@property(readonly, retain) NSSQLAdapter *adapter;	// G=0x32d0f379; converted property
@property(retain) NSArray *columnsToFetch;	// G=0x32d12195; S=0x32d121b5; converted property
@property(readonly, retain) NSArray *metadataColumns;	// G=0x32d121f9; converted property
@property(readonly, retain) NSSQLStatement *sqlStatement;	// G=0x32d11b49; converted property
+ (void)initialize;	// 0x32d3450d
- (id)initWithAdapter:(id)adapter;	// 0x32d0e8ad
- (void)_forceDisconnectOnError;	// 0x32da9fd1
- (void)_performPostSaveTasks;	// 0x32dab7c5
- (void)_raiseOptimisticLockingExceptionWithReason:(id)reason;	// 0x32da9e35
// converted property getter: - (id)adapter;	// 0x32d0f379
- (void)addPeerRange:(id)range;	// 0x32dab865
- (void)addPeerRangeForPeerID:(id)peerID entityName:(id)name rangeStart:(id)start rangeEnd:(id)end peerRangeStart:(id)start5 peerRangeEnd:(id)end6;	// 0x32dab899
- (id)allPeerRanges;	// 0x32dab8cd
- (void)awake;	// 0x32da9f81
- (void)beginTransaction;	// 0x32da9eb1
- (BOOL)canConnect;	// 0x32daa0f5
// converted property getter: - (id)columnsToFetch;	// 0x32d12195
- (void)commitTransaction;	// 0x32da9ee5
- (void)connect;	// 0x32da9f4d
- (void)createIndexesForEntity:(id)entity;	// 0x32daa805
- (void)createManyToManyTablesForEntity:(id)entity;	// 0x32daa70d
- (id)createMapOfEntityNameToPKMaxForEntities:(id)entities;	// 0x32dab969
- (id)createMapOfEntityNameToPKMaxForEntitiesFromPKTable:(id)pktable;	// 0x32dab935
- (id)createMapOfEntityNameToPKMaxForEntitiesFromUBRangeTable:(id)ubrangeTable;	// 0x32dab901
- (void)createMetadata;	// 0x32daae29
- (void)createPrimaryKeyTableForModel:(id)model knownEmpty:(BOOL)empty;	// 0x32dab6a9
- (void)createSchema;	// 0x32daaefd
- (void)createTableForEntity:(id)entity;	// 0x32daa699
- (void)createTablesForEntities:(id)entities;	// 0x32daad89
- (BOOL)databaseIsEmpty;	// 0x32daa129
- (void)dealloc;	// 0x32d2d741
- (void)deleteCorrelation:(id)correlation;	// 0x32daa22d
- (void)deleteRow:(id)row;	// 0x32daa295
- (id)describeResults;	// 0x32daa3dd
- (void)didCreateSchema;	// 0x32daaef9
- (void)disconnect;	// 0x32da9f89
- (void)endFetch;	// 0x32daa479
- (void)endPrimaryKeyGeneration;	// 0x32dab671
- (void)execute;	// 0x32daa2fd
- (long long)fetchMaxPrimaryKeyForEntity:(id)entity;	// 0x32dab229
- (id)fetchMetadata;	// 0x32d1055d
- (int)fetchResultSet:(void *)set usingFetchPlan:(id)plan;	// 0x32daa445
- (id)fetchTableCreationSQL;	// 0x32dab291
- (id)fetchTableNames;	// 0x32dab25d
- (id)fetchUbiqiutyKnowledgeVector;	// 0x32dab7c9
- (void)finalize;	// 0x32da9e71
- (void)forceTransactionClosed;	// 0x32da9fbd
- (long long)generatePrimaryKeysForEntity:(id)entity batch:(unsigned)batch;	// 0x32dab665
- (BOOL)hasMetadataTable;	// 0x32dab2c5
- (BOOL)hasOpenTransaction;	// 0x32d2d1a9
- (BOOL)hasPrimaryKeyTable;	// 0x32dab675
- (void)insertCorrelation:(id)correlation;	// 0x32daa1c5
- (void)insertRow:(id)row;	// 0x32daa191
- (BOOL)isFetchInProgress;	// 0x32daa3a9
- (BOOL)isOpen;	// 0x32daa15d
// converted property getter: - (id)metadataColumns;	// 0x32d121f9
- (id)newFetchedArray;	// 0x32daa411
- (void)performAdapterOperation:(id)operation;	// 0x32daa4ad
- (void)performAdapterOperations:(id)operations;	// 0x32daa5e1
- (void)prepareAndExecuteSQLStatement:(id)statement;	// 0x32daa35d
- (void)prepareForPrimaryKeyGeneration;	// 0x32dab66d
- (void)prepareSQLStatement:(id)statement;	// 0x32d111d5
- (CFArrayRef)rawIntegerRowsForSQL:(id)sql;	// 0x32dab1f5
- (void)releaseSQLStatement;	// 0x32d13069
- (void)resetSQLStatement;	// 0x32daa331
- (void)rollbackTransaction;	// 0x32da9f19
- (void)saveMetadata:(id)metadata;	// 0x32dab2f9
- (void)selectAttributes:(id)attributes fetchRequest:(id)request lock:(BOOL)lock entity:(id)entity;	// 0x32daa2c9
// converted property setter: - (void)setColumnsToFetch:(id)fetch;	// 0x32d121b5
- (void)setExclusiveLockingMode:(BOOL)mode;	// 0x32daa3a5
- (void)setUbiquityTableValue:(id)value forKey:(id)key;	// 0x32dab99d
- (void)sleep;	// 0x32da9f85
// converted property getter: - (id)sqlStatement;	// 0x32d11b49
- (void)transactionDidBegin;	// 0x32da9fe1
- (void)transactionDidCommit;	// 0x32daa03d
- (void)transactionDidRollback;	// 0x32daa099
- (id)ubiquityTableKeysAndValues;	// 0x32dab9d1
- (id)ubiquityTableValueForKey:(id)key;	// 0x32daba05
- (void)updateCorrelation:(id)correlation;	// 0x32daa1f9
- (void)updateRow:(id)row;	// 0x32daa261
- (void)updateUbiquityKnowledgeForPeerWithID:(id)anId andTransactionNumber:(id)number;	// 0x32dab831
- (void)updateUbiquityKnowledgeVector:(id)vector;	// 0x32dab7fd
- (void)willCreateSchema;	// 0x32daaef5
@end

