/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/OfficeImport.framework/OfficeImport
 */

#import "OfficeImport-Structs.h"
#import "NSCopying.h"
#import <NSObject.h> // Unknown library


__attribute__((visibility("hidden")))
@interface NSBezierPathStub : NSObject <NSCopying> {
@private
	int _segmentCount;	// 4 = 0x4
	int _segmentMax;	// 8 = 0x8
	PATHSEGMENT *_head;	// 12 = 0xc
	int _lastSubpathIndex;	// 16 = 0x10
	int _elementCount;	// 20 = 0x14
	float _lineWidth;	// 24 = 0x18
	CGRect _controlPointBounds;	// 28 = 0x1c
	float _miterLimit;	// 44 = 0x2c
	float _flatness;	// 48 = 0x30
	float *_dashedLinePattern;	// 52 = 0x34
	unsigned _dashedLineCount;	// 56 = 0x38
	float _dashedLinePhase;	// 60 = 0x3c
	void *_path;	// 64 = 0x40
	id _private[4];	// 68 = 0x44
	struct {
		unsigned _flags : 8;
		unsigned _pathState : 2;
		unsigned _unused : 22;
	} _bpFlags;	// 84 = 0x54
}
@property(assign) BOOL cachesBezierPath;	// G=0x312e7065; S=0x312e7069; converted property
@property(readonly, assign) CGRect controlPointBounds;	// G=0x312e596d; converted property
@property(readonly, assign) int elementCount;	// G=0x312e5bd1; converted property
@property(assign) float flatness;	// G=0x312e4d55; S=0x312e4d65; converted property
@property(assign) unsigned lineCapStyle;	// G=0x312e4c99; S=0x312e4cad; converted property
@property(assign) unsigned lineJoinStyle;	// G=0x312e4ccd; S=0x312e4ce1; converted property
@property(assign) float lineWidth;	// G=0x312e4c79; S=0x312e4c89; converted property
@property(assign) float miterLimit;	// G=0x312e4d35; S=0x312e4d45; converted property
@property(assign) unsigned windingRule;	// G=0x312e4d01; S=0x312e4d15; converted property
+ (id)bezierPath;	// 0x312e3ef1
+ (id)bezierPathWithOvalInRect:(CGRect)rect;	// 0x312e3f69
+ (id)bezierPathWithRect:(CGRect)rect;	// 0x312e3f29
+ (id)bezierPathWithRoundedRect:(CGRect)roundedRect xRadius:(float)radius yRadius:(float)radius3;	// 0x312e3fa9
+ (void)clipRect:(CGRect)rect;	// 0x312e416d
+ (CGContextRef)currentCGContext;	// 0x312e3ea1
+ (float)defaultFlatness;	// 0x312e42d9
+ (unsigned)defaultLineCapStyle;	// 0x312e4319
+ (unsigned)defaultLineJoinStyle;	// 0x312e4339
+ (float)defaultLineWidth;	// 0x312e4359
+ (float)defaultMiterLimit;	// 0x312e42b9
+ (unsigned)defaultWindingRule;	// 0x312e42f9
+ (void)drawPackedGlyphs:(const char *)glyphs atPoint:(CGPoint)point;	// 0x312e4255
+ (void)drawString:(id)string atPoint:(CGPoint)point withFontName:(id)fontName andHeight:(float)height color:(id)color alignToTop:(BOOL)top currentTransformStruct:(CGAffineTransform)aStruct;	// 0x312e43b5
+ (void)fillRect:(CGRect)rect;	// 0x312e3ffd
+ (float)flatness;	// 0x312e74d9
+ (void)initialize;	// 0x312e3e09
+ (unsigned)lineCapStyle;	// 0x312e7519
+ (unsigned)lineJoinStyle;	// 0x312e7539
+ (float)lineWidth;	// 0x312e7559
+ (float)miterLimit;	// 0x312e74b9
+ (void)setCurrentCGContext:(CGContextRef)context;	// 0x312e3e4d
+ (void)setDefaultFlatness:(float)flatness;	// 0x312e42c9
+ (void)setDefaultLineCapStyle:(unsigned)style;	// 0x312e4309
+ (void)setDefaultLineJoinStyle:(unsigned)style;	// 0x312e4329
+ (void)setDefaultLineWidth:(float)width;	// 0x312e4349
+ (void)setDefaultMiterLimit:(float)limit;	// 0x312e42a9
+ (void)setDefaultWindingRule:(unsigned)rule;	// 0x312e42e9
+ (void)setFlatness:(float)flatness;	// 0x312e74c9
+ (void)setLineCapStyle:(unsigned)style;	// 0x312e7509
+ (void)setLineJoinStyle:(unsigned)style;	// 0x312e7529
+ (void)setLineWidth:(float)width;	// 0x312e7549
+ (void)setMiterLimit:(float)limit;	// 0x312e74a9
+ (void)setWindingRule:(unsigned)rule;	// 0x312e74e9
+ (void)strokeLineFromPoint:(CGPoint)point toPoint:(CGPoint)point2;	// 0x312e41cd
+ (void)strokeRect:(CGRect)rect;	// 0x312e405d
+ (unsigned)windingRule;	// 0x312e74f9
- (id)init;	// 0x312e4571
- (id).cxx_construct;	// 0x312e706d
- (void)_addPathSegment:(int)segment point:(CGPoint)point;	// 0x312e7071
- (void)_appendArcSegmentWithCenter:(CGPoint)center radius:(double)radius angle1:(double)a1 angle2:(double)a2;	// 0x312e61e5
- (id)_copyFlattenedPath;	// 0x312e55c9
- (void)_deviceClosePath;	// 0x312e72fd
- (void)_deviceCurveToPoint:(CGPoint)point controlPoint1:(CGPoint)a1 controlPoint2:(CGPoint)a2;	// 0x312e7279
- (void)_deviceLineToPoint:(CGPoint)point;	// 0x312e7229
- (void)_deviceMoveToPoint:(CGPoint)point;	// 0x312e7151
- (void)_doPath;	// 0x312e4ee1
- (void)_doUserPathWithOp:(unsigned char)op inContext:(CGContextRef)context;	// 0x312e73bd
- (int)_locationOfPoint:(CGPoint)point;	// 0x312e6bcd
- (int)_segmentIndexForElementIndex:(int)elementIndex;	// 0x312e5c49
- (void)addClip;	// 0x312e5159
- (void)appendBezierPath:(id)path;	// 0x312e5e79
- (void)appendBezierPathWithArcFromPoint:(CGPoint)point toPoint:(CGPoint)point2 radius:(float)radius;	// 0x312e6629
- (void)appendBezierPathWithArcWithCenter:(CGPoint)center radius:(float)radius startAngle:(float)angle endAngle:(float)angle4;	// 0x312e65e9
- (void)appendBezierPathWithArcWithCenter:(CGPoint)center radius:(float)radius startAngle:(float)angle endAngle:(float)angle4 clockwise:(BOOL)clockwise;	// 0x312e6369
- (void)appendBezierPathWithOvalInRect:(CGRect)rect;	// 0x312e608d
- (void)appendBezierPathWithPoints:(CGPoint *)points count:(int)count;	// 0x312e6011
- (void)appendBezierPathWithRect:(CGRect)rect;	// 0x312e5f85
- (void)appendBezierPathWithRoundedRect:(CGRect)roundedRect xRadius:(float)radius yRadius:(float)radius3;	// 0x312e6949
- (id)bezierPathByFlatteningPath;	// 0x312e5531
- (id)bezierPathByReversingPath;	// 0x312e561d
- (CGRect)bounds;	// 0x312e5af5
// converted property getter: - (BOOL)cachesBezierPath;	// 0x312e7065
- (void)closePath;	// 0x312e4a69
- (BOOL)containsPoint:(CGPoint)point;	// 0x312e6fd5
// converted property getter: - (CGRect)controlPointBounds;	// 0x312e596d
- (id)copyWithZone:(NSZone *)zone;	// 0x312e47d1
- (CGPoint)currentPoint;	// 0x312e58e9
- (void)curveToPoint:(CGPoint)point controlPoint1:(CGPoint)a1 controlPoint2:(CGPoint)a2;	// 0x312e49d5
- (void)dealloc;	// 0x312e46c1
- (id)description;	// 0x312e7569
- (unsigned)elementAtIndex:(int)index;	// 0x312e5c35
- (unsigned)elementAtIndex:(int)index associatedPoints:(CGPoint *)points;	// 0x312e5d31
// converted property getter: - (int)elementCount;	// 0x312e5bd1
- (void)fill;	// 0x312e50e1
- (void)finalize;	// 0x312e4749
// converted property getter: - (float)flatness;	// 0x312e4d55
- (void)flattenIntoPath:(id)path;	// 0x312e5429
- (void)getLineDash:(float *)dash count:(int *)count phase:(float *)phase;	// 0x312e4e5d
- (BOOL)isEmpty;	// 0x312e58d1
- (BOOL)isHitByPath:(id)path;	// 0x312e7055
- (BOOL)isHitByPoint:(CGPoint)point;	// 0x312e7039
- (BOOL)isHitByRect:(CGRect)rect;	// 0x312e7051
- (BOOL)isStrokeHitByPath:(id)path;	// 0x312e7061
- (BOOL)isStrokeHitByPoint:(CGPoint)point;	// 0x312e7059
- (BOOL)isStrokeHitByRect:(CGRect)rect;	// 0x312e705d
// converted property getter: - (unsigned)lineCapStyle;	// 0x312e4c99
// converted property getter: - (unsigned)lineJoinStyle;	// 0x312e4ccd
- (void)lineToPoint:(CGPoint)point;	// 0x312e4965
// converted property getter: - (float)lineWidth;	// 0x312e4c79
// converted property getter: - (float)miterLimit;	// 0x312e4d35
- (void)moveToPoint:(CGPoint)point;	// 0x312e4955
- (void)relativeCurveToPoint:(CGPoint)point controlPoint1:(CGPoint)a1 controlPoint2:(CGPoint)a2;	// 0x312e4bc5
- (void)relativeLineToPoint:(CGPoint)point;	// 0x312e4b5d
- (void)relativeMoveToPoint:(CGPoint)point;	// 0x312e4af5
- (void)removeAllPoints;	// 0x312e4a79
- (void)setAssociatedPoints:(CGPoint *)points atIndex:(int)index;	// 0x312e5dc1
// converted property setter: - (void)setCachesBezierPath:(BOOL)path;	// 0x312e7069
- (void)setClip;	// 0x312e51d9
// converted property setter: - (void)setFlatness:(float)flatness;	// 0x312e4d65
// converted property setter: - (void)setLineCapStyle:(unsigned)style;	// 0x312e4cad
- (void)setLineDash:(const float *)dash count:(int)count phase:(float)phase;	// 0x312e4d75
// converted property setter: - (void)setLineJoinStyle:(unsigned)style;	// 0x312e4ce1
// converted property setter: - (void)setLineWidth:(float)width;	// 0x312e4c89
// converted property setter: - (void)setMiterLimit:(float)limit;	// 0x312e4d45
// converted property setter: - (void)setWindingRule:(unsigned)rule;	// 0x312e4d15
- (void)stroke;	// 0x312e4ff5
- (void)subdivideBezierWithFlatness:(float)flatness startPoint:(CGPoint)point controlPoint1:(CGPoint)a1 controlPoint2:(CGPoint)a2 endPoint:(CGPoint)point5;	// 0x312e5231
- (void)transformUsingAffineTransform:(id)transform;	// 0x312e5811
// converted property getter: - (unsigned)windingRule;	// 0x312e4d01
@end

