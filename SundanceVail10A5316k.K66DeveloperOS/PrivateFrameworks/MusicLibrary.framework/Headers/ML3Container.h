/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

#import "ML3Entity.h"
#import "MusicLibrary-Structs.h"

@class NSArray, NSString, ML3Predicate;

@interface ML3Container : ML3Entity {
}
@property(readonly, assign) NSArray *cloudDisplayOrderingTerms;	// G=0x3461e52d; 
@property(readonly, assign) NSArray *displayOrderingTerms;	// G=0x3461e5a9; 
@property(readonly, assign) ML3Predicate *dynamicPredicate;	// G=0x3461e1cd; 
@property(readonly, assign, getter=isLimitOrderingDescending) BOOL limitOrderingDescending;	// G=0x3461e275; 
@property(readonly, assign) NSArray *limitOrderingTerms;	// G=0x3461e3e9; 
@property(readonly, assign) long long limitValue;	// G=0x3461e465; 
@property(readonly, assign, getter=isLimitedByCount) BOOL limitedByCount;	// G=0x3461e229; 
@property(readonly, assign) NSString *limitingProperty;	// G=0x3461e361; 
@property(readonly, assign) ML3Predicate *staticPredicate;	// G=0x3461e171; 
+ (void)_insertNewSmartPlaylist:(id)playlist criteriaBlob:(id)blob limited:(BOOL)limited trackOrder:(unsigned long)order distinguishedKind:(int)kind inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x3461cfb9
+ (id)autoCreatedBuiltInSmartPlaylistsPIDs:(id)smartPlaylistsPIDs;	// 0x3461db61
+ (BOOL)createMissingBuiltInSmartPlaylists:(id)smartPlaylists;	// 0x3461d3b9
+ (id)databaseTable;	// 0x345e3279
+ (id)defaultOrderingProperties;	// 0x345ed0d5
+ (void)deleteAutoCreatedBuiltInSmartPlaylistsPIDs:(id)smartPlaylistsPIDs inLibrary:(id)library;	// 0x3461dea9
+ (id)extraTablesToDelete;	// 0x3461c4cd
+ (id)foreignColumnForProperty:(id)property;	// 0x3461c4b1
+ (id)foreignDatabaseTableForProperty:(id)property;	// 0x3461c495
+ (BOOL)hasCriterionInCriteriaList:(SearchCriteriaList *)criteriaList forITDBTrackField:(int)itdbtrackField;	// 0x3461cc29
+ (void)initialize;	// 0x345e1d6d
+ (id)joinClausesForProperty:(id)property;	// 0x3461c3f1
+ (id)nextFilepathForPlaylistType:(int)playlistType withPersistentID:(unsigned long long)persistentID inLibrary:(id)library;	// 0x345eeb85
+ (id)persistentIDColumnForTable:(id)table;	// 0x345f0c41
+ (void)populateDynamicContainersInLibrary:(id)library;	// 0x3461f29d
+ (void)populateDynamicContainersInLibrary:(id)library createBuiltinSmartPlaylists:(BOOL)playlists;	// 0x3461f2c1
+ (void)populateDynamicContainersWithTrackPersistentID:(id)trackPersistentID inLibrary:(id)library;	// 0x3461f2e5
+ (void)populateDynamicContainersWithTrackPersistentID:(id)trackPersistentID inLibrary:(id)library createBuiltinSmartPlaylists:(BOOL)playlists;	// 0x3461f309
+ (void)populateSortOrdersOfPropertyValues:(id)propertyValues inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x345eeccd
+ (void)populateStaticItemsOfDynamicContainersInLibrary:(id)library;	// 0x3461ea01
+ (id)predicateForCriteriaList:(SearchCriteriaList *)criteriaList dynamicCriteria:(BOOL)criteria;	// 0x3461ccd9
+ (int)revisionTrackingCode;	// 0x345f0c61
+ (id)sectionPropertyForProperty:(id)property;	// 0x3461c479
+ (BOOL)smartCriteriaCanBeEvaluated:(id)evaluated;	// 0x3461c4dd
- (id)initWithDictionary:(id)dictionary inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x345ee4b1
- (void)_accessCurrentSwappedPersisentIDsUsingBlock:(id)block;	// 0x3461fdbd
- (BOOL)_setSwappedItemPersistentIDs:(const long long *)ids size:(int)size;	// 0x3461fd75
- (BOOL)_setSwappedItemPersistentIDs:(const long long *)ids size:(int)size notify:(BOOL)notify;	// 0x3461fa89
- (BOOL)addTrackWithPersistentID:(long long)persistentID;	// 0x34620b01
- (BOOL)addTracksWithPersistentIDs:(long long *)persistentIDs count:(unsigned)count;	// 0x34620b2d
- (BOOL)addTracksWithPersistentIDs:(long long *)persistentIDs count:(unsigned)count notify:(BOOL)notify;	// 0x34620b51
- (void)bindPopulateStatement:(id)statement withStaticTrackPersistentID:(id)staticTrackPersistentID;	// 0x3461e975
// declared property getter: - (id)cloudDisplayOrderingTerms;	// 0x3461e52d
// declared property getter: - (id)displayOrderingTerms;	// 0x3461e5a9
// declared property getter: - (id)dynamicPredicate;	// 0x3461e1cd
- (SearchCriteriaList *)importedCriteriaList;	// 0x3461e0dd
- (BOOL)isCustomContainerOrderingDescending;	// 0x3461e315
// declared property getter: - (BOOL)isLimitOrderingDescending;	// 0x3461e275
// declared property getter: - (BOOL)isLimitedByCount;	// 0x3461e229
// declared property getter: - (id)limitOrderingTerms;	// 0x3461e3e9
// declared property getter: - (long long)limitValue;	// 0x3461e465
// declared property getter: - (id)limitingProperty;	// 0x3461e361
- (BOOL)moveTrackFromIndex:(unsigned)index toIndex:(unsigned)index2;	// 0x34620f1d
- (id)populateSQLWithStaticTrackPersistentID:(id)staticTrackPersistentID;	// 0x3461e77d
- (BOOL)removeAllTracks;	// 0x3461fd99
- (BOOL)removeTracksAtIndexes:(id)indexes;	// 0x34620975
- (BOOL)removeTracksAtIndexes:(id)indexes notify:(BOOL)notify;	// 0x34620951
- (BOOL)removeTracksAtIndexes:(id)indexes notify:(BOOL)notify indexesTransformBlock:(id)block;	// 0x3462012d
- (BOOL)removeTracksWithPersistentIDs:(const long long *)persistentIDs atFilteredIndexes:(id)filteredIndexes;	// 0x34620995
- (BOOL)setContainsTrack:(BOOL)track forPersistentID:(long long)persistentID notify:(BOOL)notify;	// 0x34620651
- (BOOL)setTracksWithPersistentIDs:(const long long *)persistentIDs count:(unsigned)count;	// 0x3462135d
- (BOOL)setTracksWithPersistentIDs:(const long long *)persistentIDs count:(unsigned)count notify:(BOOL)notify;	// 0x34621381
- (BOOL)setTracksWithSwappedPersistentIDData:(id)swappedPersistentIDData;	// 0x346216f9
- (BOOL)setValue:(id)value forProperty:(id)property;	// 0x3461c749
// declared property getter: - (id)staticPredicate;	// 0x3461e171
@end

