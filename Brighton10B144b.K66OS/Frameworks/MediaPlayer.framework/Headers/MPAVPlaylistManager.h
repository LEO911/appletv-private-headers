/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

#import "MediaPlayer-Structs.h"
#import <NSObject.h> // Unknown library
#import "MPAVQueuePlayerFeederSource.h"

@class MPAVItem, NSString, MPQueuePlayer, MPAVQueuePlayerFeeder;
@protocol MPAVPlaylistFeeder;

@interface MPAVPlaylistManager : NSObject <MPAVQueuePlayerFeederSource> {
	NSString *_audioSessionModeOverride;	// 4 = 0x4
	MPAVItem *_currentItem;	// 8 = 0x8
	MPAVQueuePlayerFeeder *_feeder;	// 12 = 0xc
	BOOL _goToTargetIndex;	// 16 = 0x10
	int _isChangingPlaylistFeeder;	// 20 = 0x14
	int _lastSelectionDirection;	// 24 = 0x18
	MPQueuePlayer *_player;	// 28 = 0x1c
	id<MPAVPlaylistFeeder> _playlistFeeder;	// 32 = 0x20
	int _repeatMode;	// 36 = 0x24
	int _retainCount;	// 40 = 0x28
	int _targetIndex;	// 44 = 0x2c
	BOOL _updatedAudioSessionMode;	// 48 = 0x30
}
@property(retain, nonatomic) NSString *audioSessionModeOverride;	// G=0x31d59cbd; S=0x31d59ccd; @synthesize=_audioSessionModeOverride
@property(readonly, assign, nonatomic) BOOL canChangePlaylistFeeder;	// G=0x31d59385; 
@property(readonly, assign) int currentIndex;	// G=0x31d592a9; 
@property(readonly, assign) MPAVItem *currentItem;	// G=0x31d59cdd; @synthesize=_currentItem
@property(assign, nonatomic) BOOL forceSynchronousQueueFilling;	// G=0x31d58ddd; S=0x31d58e65; 
@property(readonly, assign, nonatomic) BOOL isChangingPlaylistFeeder;	// G=0x31d5936d; 
@property(readonly, assign) int lastSelectionDirection;	// G=0x31d59d15; @synthesize=_lastSelectionDirection
@property(assign, nonatomic) BOOL managesSystemDownloads;	// G=0x31d58e01; S=0x31d58e85; 
@property(assign, nonatomic) unsigned maxQueueDepth;	// G=0x31d58e25; S=0x31d58ea5; 
@property(assign, nonatomic) unsigned minQueueDepth;	// G=0x31d58e45; S=0x31d58ec5; 
@property(readonly, assign) MPQueuePlayer *player;	// G=0x31d59cf1; @synthesize=_player
@property(retain, nonatomic) id<MPAVPlaylistFeeder> playlistFeeder;	// G=0x31d59d05; S=0x31d5939d; @synthesize=_playlistFeeder
@property(assign) int repeatMode;	// G=0x31d592dd; S=0x31d592ed; 
- (id)init;	// 0x31d58179
- (void)_assetCancelNotification:(id)notification;	// 0x31d586a9
- (id)_audioSessionModeForMediaItem:(id)mediaItem;	// 0x31d59ab1
- (void)_downloadCancelledNotification:(id)notification;	// 0x31d58891
- (id)_feeder;	// 0x31d59aa1
- (id)_feederItemForIndex:(int)index;	// 0x31d58f45
- (BOOL)_isDeallocating;	// 0x31d5814d
- (id)_itemToFollowItemIndex:(int)followItemIndex skipUnavailableContent:(BOOL)content;	// 0x31d59899
- (void)_mediaLibraryDisplayValuesDidChangeNotification:(id)_mediaLibraryDisplayValues;	// 0x31d58c91
- (void)_networkTypeDidChangeNotification:(id)_networkType;	// 0x31d58d0d
- (int)_nextItemIndex:(int)index repeatMode:(int)mode;	// 0x31d597a9
- (int)_prepareToQueuePlaybackIndex:(int)queuePlaybackIndex selectionDirection:(int)direction;	// 0x31d590a9
- (void)_reloadQueuedItemsIfPathBecameAvailable;	// 0x31d59525
- (BOOL)_tryRetain;	// 0x31d580fd
- (void)_updateAudioSessionMode;	// 0x31d59b05
// declared property getter: - (id)audioSessionModeOverride;	// 0x31d59cbd
// declared property getter: - (BOOL)canChangePlaylistFeeder;	// 0x31d59385
- (void)contentInvalidated;	// 0x31d59749
- (void)contentInvalidatedWithCurrentItemMovedToIndex:(unsigned)index;	// 0x31d59701
- (void)contentInvalidatedWithNewIndex:(unsigned)newIndex;	// 0x31d59769
- (void)contentsDidChangeByRemovingRange:(NSRange)contents;	// 0x31d59639
// declared property getter: - (int)currentIndex;	// 0x31d592a9
// declared property getter: - (id)currentItem;	// 0x31d59cdd
- (void)dealloc;	// 0x31d58395
// declared property getter: - (BOOL)forceSynchronousQueueFilling;	// 0x31d58ddd
// declared property getter: - (BOOL)isChangingPlaylistFeeder;	// 0x31d5936d
// declared property getter: - (int)lastSelectionDirection;	// 0x31d59d15
// declared property getter: - (BOOL)managesSystemDownloads;	// 0x31d58e01
// declared property getter: - (unsigned)maxQueueDepth;	// 0x31d58e25
// declared property getter: - (unsigned)minQueueDepth;	// 0x31d58e45
- (void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void *)context;	// 0x31d58531
// declared property getter: - (id)player;	// 0x31d59cf1
// declared property getter: - (id)playlistFeeder;	// 0x31d59d05
- (id)queuePlayerFeeder:(id)feeder itemToFollowItem:(id)followItem;	// 0x31d5997d
- (BOOL)queuePlayerFeeder:(id)feeder willInsertItem:(id)item;	// 0x31d599b9
- (void)queuePlayerFeeder:(id)feeder willRemoveItem:(id)item;	// 0x31d599b5
- (void)queuePlayerFeederDidUpdateQueue:(id)queuePlayerFeeder queuedItems:(id)items dequeuedItems:(id)items3;	// 0x31d599bd
- (void)queuePlayerFeederFailedToQueueAnyItems:(id)queueAnyItems;	// 0x31d59a35
- (oneway void)release;	// 0x31d58075
// declared property getter: - (int)repeatMode;	// 0x31d592dd
- (id)retain;	// 0x31d5803d
- (unsigned)retainCount;	// 0x31d580e9
// declared property setter: - (void)setAudioSessionModeOverride:(id)override;	// 0x31d59ccd
- (void)setCurrentIndex:(int)index selectionDirection:(int)direction;	// 0x31d591cd
// declared property setter: - (void)setForceSynchronousQueueFilling:(BOOL)filling;	// 0x31d58e65
// declared property setter: - (void)setManagesSystemDownloads:(BOOL)downloads;	// 0x31d58e85
// declared property setter: - (void)setMaxQueueDepth:(unsigned)depth;	// 0x31d58ea5
// declared property setter: - (void)setMinQueueDepth:(unsigned)depth;	// 0x31d58ec5
// declared property setter: - (void)setPlaylistFeeder:(id)feeder;	// 0x31d5939d
- (BOOL)setPlaylistFeeder:(id)feeder startIndex:(int)index;	// 0x31d5948d
// declared property setter: - (void)setRepeatMode:(int)mode;	// 0x31d592ed
- (void)updateForSoundCheckDefaultsChange;	// 0x31d58ee5
@end

