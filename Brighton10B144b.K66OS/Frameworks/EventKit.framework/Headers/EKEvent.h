/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/EventKit.framework/EventKit
 */

#import "EventKit-Structs.h"
#import "EKCalendarItem.h"

@class NSString, EKCalendarDate, NSNumber, NSDate, EKParticipant;

@interface EKEvent : EKCalendarItem {
	EKCalendarDate *_occurrenceStartDate;	// 40 = 0x28
	EKCalendarDate *_occurrenceEndDate;	// 44 = 0x2c
	BOOL _occurrenceIsAllDay;	// 48 = 0x30
	EKCalendarDate *_originalOccurrenceStartDate;	// 52 = 0x34
	EKCalendarDate *_originalOccurrenceEndDate;	// 56 = 0x38
	NSNumber *_originalOccurrenceIsAllDay;	// 60 = 0x3c
}
@property(assign, nonatomic, getter=isAllDay) BOOL allDay;	// G=0x317f0dd1; S=0x317faf79; 
@property(assign, nonatomic) int availability;	// G=0x317f8cf9; S=0x3183a3cd; 
@property(readonly, assign, nonatomic) int birthdayPersonID;	// G=0x317f0de1; 
@property(copy, nonatomic) NSDate *endDate;	// G=0x317f2249; S=0x317fb539; 
@property(readonly, assign, nonatomic) NSString *eventIdentifier;	// G=0x317f6ded; 
@property(assign) unsigned invitationStatus;	// G=0x3183a46d; S=0x3183a4a1; converted property
@property(readonly, assign, nonatomic) BOOL isDetached;	// G=0x317fa175; 
@property(assign) unsigned modifiedProperties;	// G=0x31839ff1; S=0x3183a025; converted property
@property(assign) BOOL needsOccurrenceCacheUpdate;	// G=0x3183a069; S=0x3183a08d; converted property
@property(copy, nonatomic) EKCalendarDate *occurrenceEndDate;	// G=0x317f2271; S=0x317f2a71; @synthesize=_occurrenceEndDate
@property(assign, nonatomic) BOOL occurrenceIsAllDay;	// G=0x3183dcb1; S=0x317ef185; @synthesize=_occurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *occurrenceStartDate;	// G=0x317f1905; S=0x317ef011; @synthesize=_occurrenceStartDate
@property(readonly, assign, nonatomic) EKParticipant *organizer;	// G=0x317f2d49; 
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate;	// G=0x317faf3d; S=0x317fb47d; @synthesize=_originalOccurrenceEndDate
@property(copy, nonatomic) NSNumber *originalOccurrenceIsAllDay;	// G=0x317faf65; S=0x317f9531; @synthesize=_originalOccurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate;	// G=0x317faf19; S=0x317fb46d; @synthesize=_originalOccurrenceStartDate
@property(assign) int participationStatus;	// G=0x317f305d; S=0x3183a0d1; converted property
@property(retain) id recurrenceRule;	// G=0x3183a31d; S=0x3183a369; converted property
@property(retain) id responseComment;	// G=0x3183a435; S=0x3183a451; converted property
@property(copy, nonatomic) NSDate *startDate;	// G=0x317f2229; S=0x317fb241; 
@property(readonly, assign, nonatomic) int status;	// G=0x317f1d71; 
+ (id)eventWithEventStore:(id)eventStore;	// 0x317fbab9
- (id)init;	// 0x31839add
- (id)initWithEventStore:(id)eventStore;	// 0x317f8e89
- (id)initWithPersistentObject:(id)persistentObject;	// 0x31839b19
- (id)initWithPersistentObject:(id)persistentObject occurrenceDate:(id)date;	// 0x317eed59
- (BOOL)_cancelWithSpan:(int)span error:(id *)error;	// 0x3183ce51
- (BOOL)_checkStartDateConstraintAgainstDate:(XXStruct_lQVxyC)date timeZone:(id)zone error:(id *)error;	// 0x317fe031
- (id)_dateForNextOccurrence;	// 0x3183af89
- (void)_deleteThisOccurrence;	// 0x3183c4c9
- (BOOL)_deleteWithSpan:(int)span error:(id *)error;	// 0x3183c329
- (void)_detachWithStartDate:(id)startDate newStartDate:(id)date future:(BOOL)future;	// 0x3183d1fd
- (id)_effectiveTimeZone;	// 0x317fb48d
- (XXStruct_lQVxyC)_gregorianDateCorrectedForTimeZoneFromCalendarDate:(id)calendarDate orNSDate:(id)date;	// 0x317f3c9d
- (BOOL)_isAlarmAcknowledgedPropertyDirty;	// 0x317fdb39
- (BOOL)_isAllDay;	// 0x317ef031
- (BOOL)_isInitialOccurrenceDate:(id)date;	// 0x3183cfd9
- (BOOL)_occurrenceExistsOnDate:(double)date timeZone:(id)zone;	// 0x3183bf1d
- (int)_parentParticipationStatus;	// 0x3183a28d
- (id)_persistentEvent;	// 0x317f0e09
- (void)_sendModifiedNote;	// 0x31839da5
- (BOOL)_shouldCancelInsteadOfDeleteWithSpan:(int)span;	// 0x3183c171
- (BOOL)_shouldDeclineInsteadOfDelete;	// 0x3183c25d
- (BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(int)recurrenceInterval;	// 0x3183b2f1
- (BOOL)_validateDatesAndRecurrencesGivenSpan:(int)span error:(id *)error;	// 0x317fdc39
- (BOOL)_validateDurationConstrainedToRecurrenceInterval;	// 0x3183b0f5
- (int)alarmCount;	// 0x3183a2f5
- (BOOL)allowsAlarmModifications;	// 0x3183aa31
- (BOOL)allowsCalendarModifications;	// 0x3183a8a5
- (BOOL)allowsRecurrenceModifications;	// 0x317fa0ed
- (id)attachments;	// 0x317f7239
- (int)attendeeCount;	// 0x3183a2cd
- (id)attendees;	// 0x317f7911
// declared property getter: - (int)availability;	// 0x317f8cf9
// declared property getter: - (int)birthdayPersonID;	// 0x317f0de1
- (id)birthdayTitleWithAddressBook:(void *)addressBook;	// 0x317f0e35
- (BOOL)canBeRespondedTo;	// 0x317f87e1
- (BOOL)canDetachSingleOccurrence;	// 0x3183a941
- (BOOL)canMoveToCalendar:(id)calendar fromCalendar:(id)calendar2 error:(id *)error;	// 0x3183a66d
- (BOOL)canSetAvailability;	// 0x317f8cad
- (void)clearInvitationStatus;	// 0x3183a4e5
- (BOOL)commitWithSpan:(int)span error:(id *)error;	// 0x317fe391
- (id)committedValueForKey:(id)key;	// 0x317f9949
- (int)compareStartDateWithEvent:(id)event;	// 0x317fb94d
- (BOOL)dateChanged;	// 0x3183a519
- (void)dealloc;	// 0x317f6469
- (id)description;	// 0x3183aa79
- (void)didCommit;	// 0x31802861
- (id)dirtyPropertiesToSkip;	// 0x3183ae25
- (double)duration;	// 0x31839de9
- (id)endCalendarDate;	// 0x317f304d
// declared property getter: - (id)endDate;	// 0x317f2249
- (XXStruct_lQVxyC)endDateGr;	// 0x317f8b31
- (XXStruct_lQVxyC)endDatePinnedForAllDay;	// 0x31839f7d
// declared property getter: - (id)eventIdentifier;	// 0x317f6ded
- (id)eventStore;	// 0x317f1c15
- (id)exportToICS;	// 0x31839c5d
- (id)externalId;	// 0x3183a9b5
- (id)externalURI;	// 0x31839b2d
- (id)externalURL;	// 0x31839b3d
- (BOOL)hasSelfAttendee;	// 0x3183aa05
- (unsigned)hash;	// 0x317f18a9
- (id)initialEndDate;	// 0x31839e9d
- (id)initialStartDate;	// 0x31839e41
// converted property getter: - (unsigned)invitationStatus;	// 0x3183a46d
// declared property getter: - (BOOL)isAllDay;	// 0x317f0dd1
- (BOOL)isAllDayDirty;	// 0x31839ce5
// declared property getter: - (BOOL)isDetached;	// 0x317fa175
- (BOOL)isDirtyIgnoringCalendar;	// 0x31839d05
- (BOOL)isEndDateDirty;	// 0x31839cc5
- (BOOL)isEqual:(id)equal;	// 0x317f1919
- (BOOL)isStartDateDirty;	// 0x31839ca5
- (BOOL)isStatusDirty;	// 0x31839c85
- (BOOL)isTentative;	// 0x3183a5c9
- (BOOL)locationChanged;	// 0x3183a59d
// converted property getter: - (unsigned)modifiedProperties;	// 0x31839ff1
// converted property getter: - (BOOL)needsOccurrenceCacheUpdate;	// 0x3183a069
- (id)occurrenceDate;	// 0x317fa0b5
// declared property getter: - (id)occurrenceEndDate;	// 0x317f2271
// declared property getter: - (BOOL)occurrenceIsAllDay;	// 0x3183dcb1
// declared property getter: - (id)occurrenceStartDate;	// 0x317f1905
// declared property getter: - (id)organizer;	// 0x317f2d49
// declared property getter: - (id)originalOccurrenceEndDate;	// 0x317faf3d
// declared property getter: - (id)originalOccurrenceIsAllDay;	// 0x317faf65
// declared property getter: - (id)originalOccurrenceStartDate;	// 0x317faf19
// converted property getter: - (int)participationStatus;	// 0x317f305d
- (int)pendingParticipationStatus;	// 0x3183a98d
// converted property getter: - (id)recurrenceRule;	// 0x3183a31d
- (BOOL)refresh;	// 0x3183abb9
- (BOOL)removeWithSpan:(int)span error:(id *)error;	// 0x3183d0c5
- (BOOL)requiresDetach;	// 0x317fd015
// converted property getter: - (id)responseComment;	// 0x3183a435
- (BOOL)responseMustApplyToAll;	// 0x3183a919
- (void)revert;	// 0x3183ae7d
- (void)rollback;	// 0x317fa9e9
// declared property setter: - (void)setAllDay:(BOOL)day;	// 0x317faf79
// declared property setter: - (void)setAvailability:(int)availability;	// 0x3183a3cd
// declared property setter: - (void)setEndDate:(id)date;	// 0x317fb539
// converted property setter: - (void)setInvitationStatus:(unsigned)status;	// 0x3183a4a1
// converted property setter: - (void)setModifiedProperties:(unsigned)properties;	// 0x3183a025
// converted property setter: - (void)setNeedsOccurrenceCacheUpdate:(BOOL)update;	// 0x3183a08d
// declared property setter: - (void)setOccurrenceEndDate:(id)date;	// 0x317f2a71
// declared property setter: - (void)setOccurrenceIsAllDay:(BOOL)day;	// 0x317ef185
// declared property setter: - (void)setOccurrenceStartDate:(id)date;	// 0x317ef011
// declared property setter: - (void)setOriginalOccurrenceEndDate:(id)date;	// 0x317fb47d
// declared property setter: - (void)setOriginalOccurrenceIsAllDay:(id)day;	// 0x317f9531
// declared property setter: - (void)setOriginalOccurrenceStartDate:(id)date;	// 0x317fb46d
// converted property setter: - (void)setParticipationStatus:(int)status;	// 0x3183a0d1
// converted property setter: - (void)setRecurrenceRule:(id)rule;	// 0x3183a369
// converted property setter: - (void)setResponseComment:(id)comment;	// 0x3183a451
// declared property setter: - (void)setStartDate:(id)date;	// 0x317fb241
- (void)setTimeZone:(id)zone;	// 0x317f9541
- (id)startCalendarDate;	// 0x317f0dc1
// declared property getter: - (id)startDate;	// 0x317f2229
- (XXStruct_lQVxyC)startDateGr;	// 0x317f3c41
- (XXStruct_lQVxyC)startDatePinnedForAllDay;	// 0x31839f15
// declared property getter: - (int)status;	// 0x317f1d71
- (BOOL)timeChanged;	// 0x3183a545
- (BOOL)titleChanged;	// 0x3183a571
- (id)uniqueId;	// 0x3183a9dd
- (BOOL)validateWithSpan:(int)span error:(id *)error;	// 0x317fd231
@end

