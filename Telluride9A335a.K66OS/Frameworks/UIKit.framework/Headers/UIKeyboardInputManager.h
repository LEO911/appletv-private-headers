/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/UIKit.framework/UIKit
 */

#import "UIKit-Structs.h"
#import <NSObject.h> // Unknown library


@interface UIKeyboardInputManager : NSObject {
}
@property(assign) unsigned inputIndex;	// G=0x33c1dce1; S=0x33c1dcd9; converted property
@property(assign) unsigned phraseBoundary;	// G=0x33c1dd09; S=0x33c1dd05; converted property
@property(assign) BOOL usesCandidateSelection;	// G=0x33c1dd15; S=0x33a6b499; converted property
+ (id)activeInstance;	// 0x33a71a95
+ (void)beginRegisteringKeyplaneWithName:(id)name;	// 0x33a71a5d
+ (void)clearAllCentroids;	// 0x33a71ed1
+ (id)dynamicDictionaryFilePathForInputMode:(id)inputMode;	// 0x33c1df0d
+ (void)endRegisteringKeyplane;	// 0x33a72215
+ (id)keyboardUserDirectory;	// 0x339a7fed
+ (void)registerCentroid:(CGPoint)centroid forKey:(id)key;	// 0x33a72191
+ (void)releaseSharedInstance;	// 0x339eec85
+ (void)removeAllDynamicDictionaries;	// 0x33c1e02d
+ (void)removeDynamicDictionaryForInputMode:(id)inputMode;	// 0x33c1df9d
+ (id)sharedInstanceForInputMode:(id)inputMode inHardwareKeyboardMode:(BOOL)hardwareKeyboardMode;	// 0x339f7cc9
+ (id)userDictionaryWordKeyPairsFilePath;	// 0x339a7fb9
- (void)acceptInput;	// 0x33c1dcc9
- (BOOL)acceptInputString:(id)string;	// 0x33a8b2b9
- (BOOL)acceptsCharacter:(unsigned short)character;	// 0x33c1dcf5
- (id)accessibilityLabelForCandidate:(id)candidate;	// 0x33c1ddf5
- (id)addInput:(id)input flags:(unsigned)flags point:(CGPoint)point deletePreceding:(unsigned *)preceding deleteFollowing:(unsigned *)following fromVariantKey:(BOOL)variantKey;	// 0x33abab31
- (id)addInput:(id)input flags:(unsigned)flags point:(CGPoint)point firstDelete:(unsigned *)aDelete fromVariantKey:(BOOL)variantKey;	// 0x33c1dca9
- (id)addInputObject:(id)object;	// 0x33c1e169
- (void)addToTypingHistory:(id)typingHistory;	// 0x33c1def1
- (void)appendToInputContext:(id)inputContext;	// 0x33c1dccd
- (id)autocorrection;	// 0x33c1dcf9
- (void)beginRegisteringKeyplaneWithName:(id)name;	// 0x33a71aa5
- (BOOL)canHandleKeyHitTest;	// 0x33c1e201
- (BOOL)canUseGeometryKeyTouch;	// 0x33a71ead
- (void)candidateAccepted:(id)accepted;	// 0x33c1def9
- (id)candidates;	// 0x33c1dcfd
- (CFArrayRef)chargeableKeys;	// 0x33c1e161
- (CFDictionaryRef)chargedKeyProbabilities;	// 0x33c1e165
- (void)clearAllCentroids;	// 0x33c1e251
- (void)clearDynamicDictionary;	// 0x33c1df09
- (void)clearInput;	// 0x33c1dcc5
- (void)clearInputContext;	// 0x33c1dcd5
- (void)clearKeyAreas;	// 0x33c1e205
- (void)configureInputModeSpecificFeatures:(id)features withLayout:(id)layout;	// 0x33c1de15
- (void)configureKeyboard:(id)keyboard forAutocorrection:(id)autocorrection;	// 0x339fa689
- (void)configureKeyboard:(id)keyboard forCandidates:(id)candidates;	// 0x33c1de19
- (void)decreaseUserFrequency:(id)frequency;	// 0x33c1df05
- (id)defaultCandidate;	// 0x33c1dd1d
- (unsigned)defaultCandidateIndex;	// 0x33c1dd21
- (id)deleteFromInput:(unsigned *)input;	// 0x33c1dcbd
- (void)deleteFromStrokeHistory:(BOOL)strokeHistory;	// 0x33c1e249
- (void)endRegisteringKeyplane;	// 0x33a72249
- (id)groupedCandidatesFromCandidates:(id)candidates usingSortingMethod:(id)method;	// 0x33c1dd85
- (void)groupedCandidatesFromCandidates:(id)candidates usingSortingMethod:(id)method completion:(id)completion;	// 0x33c1dd89
- (void)increaseUserFrequency:(id)frequency;	// 0x33c1df01
- (unsigned)inputCount;	// 0x33c1dce5
- (BOOL)inputEmpty;	// 0x33c1dce9
// converted property getter: - (unsigned)inputIndex;	// 0x33c1dce1
- (void)inputLocationChanged;	// 0x33c1dcf1
- (id)inputString;	// 0x33c1dced
- (BOOL)isSentenceDelimiter:(unsigned short)delimiter;	// 0x33adf599
- (int)keyHitTest:(CGPoint)test touchStage:(int)stage atTime:(double)time withTouch:(id)touch forceShift:(BOOL)shift;	// 0x33c1e20d
- (int)keyHitTest:(CGPoint)test touchStage:(int)stage atTime:(double)time withTouch:(id)touch forceShift:(BOOL)shift forcingKey:(int)key;	// 0x33c1e211
- (BOOL)keySlidIntoSwipe;	// 0x33c1e245
- (void)lastAcceptedCandidateCorrected;	// 0x33c1defd
- (unsigned)maximumNumberOfColumnsForSortingMethod:(id)sortingMethod interfaceOrientation:(int)orientation isInline:(BOOL)anInline reducedWidth:(BOOL)width;	// 0x33c1dd8d
- (unsigned)maximumShortcutLengthAllowed;	// 0x33c1e25d
// converted property getter: - (unsigned)phraseBoundary;	// 0x33c1dd09
- (void)registerCentroid:(CGPoint)centroid forKey:(id)key;	// 0x33c1e24d
- (void)registerKeyArea:(CGPoint)area withRadii:(CGPoint)radii forKeyCode:(unsigned short)keyCode forLowerKey:(id)lowerKey forUpperKey:(id)upperKey;	// 0x33c1e209
- (id)remainingInput;	// 0x33c1dd01
- (BOOL)removeSuffixOfInputContext:(id)inputContext;	// 0x33c1dcd1
- (id)searchStringForMarkedText;	// 0x33c1dd29
- (void)setAutoCorrects:(BOOL)corrects;	// 0x33c1ddfd
- (void)setCalculatesChargedKeyProbabilities:(BOOL)probabilities;	// 0x33c1e15d
- (void)setInHardwareKeyboardMode:(BOOL)hardwareKeyboardMode;	// 0x33c1de0d
- (void)setInSplitKeyboardMode:(BOOL)splitKeyboardMode;	// 0x33c1de11
- (void)setInput:(id)input;	// 0x33c1dcb5
- (void)setInput:(id)input typedString:(id)string;	// 0x33c1dcb9
// converted property setter: - (void)setInputIndex:(unsigned)index;	// 0x33c1dcd9
- (id)setInputObject:(id)object;	// 0x33c1e1b5
- (void)setKeyboardEventsLagging:(BOOL)lagging;	// 0x33c1de09
- (void)setKeyboardMatchType:(int)type;	// 0x339fa589
- (void)setLearnsCorrection:(BOOL)correction;	// 0x33c1deed
// converted property setter: - (void)setPhraseBoundary:(unsigned)boundary;	// 0x33c1dd05
- (void)setShallowPrediction:(BOOL)prediction;	// 0x33c1de01
- (void)setShift:(BOOL)shift;	// 0x33c1de05
- (void)setTypologyRecorder:(id)recorder;	// 0x33c1e255
// converted property setter: - (void)setUsesCandidateSelection:(BOOL)selection;	// 0x33a6b499
- (id)shadowTyping;	// 0x33c1e159
- (id)shortcutConversionForInput:(id)input andExistingString:(id)string existingStringStartsInMiddleOfWord:(BOOL)word;	// 0x33c1e261
- (BOOL)shouldExtendPriorWord;	// 0x33a9b92d
- (BOOL)shouldShiftAfterChar:(unsigned short)aChar withSpaces:(int)spaces currentShift:(BOOL)shift;	// 0x33a9bb81
- (BOOL)shouldSkipCandidateSelectionForPopupVariantString:(id)popupVariantString;	// 0x33c1dd75
- (BOOL)shouldSuppressAutocorrectionWithTerminator:(id)terminator;	// 0x33c1dd79
- (id)sortingMethods;	// 0x33c1dd7d
- (BOOL)stringEndsWord:(id)word;	// 0x33aba97d
- (id)stringForDoubleKey:(id)doubleKey;	// 0x33c1dd3d
- (BOOL)suppliesCompletions;	// 0x33c1dd35
- (BOOL)supportsNumberKeySelection;	// 0x33c1ddf9
- (BOOL)supportsSetPhraseBoundary;	// 0x33c1dd11
- (BOOL)supportsShortcutConversion;	// 0x33c1e259
- (BOOL)suppressCompletionsForFieldEditor;	// 0x33c1dd39
- (BOOL)suppressesCandidateDisplay;	// 0x33add12d
- (void)textAccepted:(id)accepted;	// 0x33c1def5
- (id)titleForSortingMethod:(id)sortingMethod;	// 0x33c1dd81
- (BOOL)usesAutoDeleteWord;	// 0x33c1dd19
// converted property getter: - (BOOL)usesCandidateSelection;	// 0x33c1dd15
- (unsigned)wordHistoryDepth;	// 0x33c1dcdd
@end

