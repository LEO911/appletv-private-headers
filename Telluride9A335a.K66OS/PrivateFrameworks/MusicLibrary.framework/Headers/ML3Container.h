/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

#import "ML3Entity.h"
#import "MusicLibrary-Structs.h"

@class NSString, NSArray, ML3Predicate;

@interface ML3Container : ML3Entity {
}
@property(readonly, assign) ML3Predicate *dynamicPredicate;	// G=0x309a34c9; 
@property(readonly, assign, getter=isLimitOrderingDescending) BOOL limitOrderingDescending;	// G=0x309a35c9; 
@property(readonly, assign) NSArray *limitOrderingDirectionality;	// G=0x309a36d1; 
@property(readonly, assign) NSArray *limitOrderingProperties;	// G=0x309a3681; 
@property(readonly, assign) long long limitValue;	// G=0x309a3725; 
@property(readonly, assign, getter=isLimitedByCount) BOOL limitedByCount;	// G=0x309a351d; 
@property(readonly, assign) NSString *limitingProperty;	// G=0x309a3621; 
@property(readonly, assign) ML3Predicate *staticPredicate;	// G=0x309a3475; 
+ (void)_insertNewSmartPlaylist:(id)playlist criteriaBlob:(id)blob limited:(BOOL)limited trackOrder:(unsigned long)order distinguishedKind:(int)kind inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x309a25dd
+ (id)autoCreatedBuiltInSmartPlaylistsPIDs:(id)smartPlaylistsPIDs;	// 0x309a2f7d
+ (BOOL)createMissingBuiltInSmartPlaylists:(id)smartPlaylists;	// 0x309a28fd
+ (id)databaseTable;	// 0x30975091
+ (id)defaultOrderingProperties;	// 0x3097dc25
+ (void)deleteAutoCreatedBuiltInSmartPlaylistsPIDs:(id)smartPlaylistsPIDs inLibrary:(id)library;	// 0x309a3221
+ (id)extraTablesToDelete;	// 0x309a1ca5
+ (id)foreignColumnForProperty:(id)property;	// 0x309a1c89
+ (id)foreignDatabaseTableForProperty:(id)property;	// 0x309a1c6d
+ (BOOL)hasCriterionInCriteriaList:(OpaqueSearchCriteriaList *)criteriaList forITDBTrackField:(int)itdbtrackField;	// 0x309a22e1
+ (void)initialize;	// 0x30973f59
+ (id)joinClauseForProperty:(id)property;	// 0x30974fa1
+ (id)nextFilepathForPlaylistType:(int)playlistType withPersistentID:(unsigned long long)persistentID inLibrary:(id)library;	// 0x3097fc25
+ (id)persistentIDColumnForTable:(id)table;	// 0x30981e35
+ (void)populateDynamicContainersInLibrary:(id)library;	// 0x309a4039
+ (void)populateDynamicContainersWithTrackPersistentID:(id)trackPersistentID inLibrary:(id)library;	// 0x309a404d
+ (void)populateSortOrdersOfPropertyValues:(id)propertyValues inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x30980281
+ (void)populateStaticItemsOfDynamicContainersOnHandle:(sqlite3 *)dynamicContainersOnHandle;	// 0x309a3b6d
+ (id)predicateForCriteriaList:(OpaqueSearchCriteriaList *)criteriaList dynamicCriteria:(BOOL)criteria;	// 0x309a238d
+ (int)revisionTrackingCode;	// 0x30982009
+ (id)sectionPropertyForProperty:(id)property;	// 0x309a1c51
+ (BOOL)smartCriteriaCanBeEvaluated:(id)evaluated;	// 0x309a1cb5
- (id)initWithDictionary:(id)dictionary inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x3097f6e5
- (void)_accessCurrentSwappedPersisentIDsUsingBlock:(id)block;	// 0x309a4925
- (BOOL)_isDescendingForTrackOrderProperty:(id)trackOrderProperty reverseOrderProperty:(id)property;	// 0x309a3559
- (BOOL)_setSwappedItemPersistentIDs:(const long long *)ids size:(int)size;	// 0x309a48dd
- (BOOL)_setSwappedItemPersistentIDs:(const long long *)ids size:(int)size notify:(BOOL)notify;	// 0x309a4649
- (BOOL)addTrackWithPersistentID:(long long)persistentID;	// 0x309a5381
- (BOOL)addTracksWithPersistentIDs:(long long *)persistentIDs count:(unsigned)count;	// 0x309a53ad
- (BOOL)addTracksWithPersistentIDs:(long long *)persistentIDs count:(unsigned)count notify:(BOOL)notify;	// 0x309a53d1
- (void)bindPopulateStatement:(sqlite3_stmt *)statement withStaticTrackPersistentID:(id)staticTrackPersistentID;	// 0x309a3b0d
// declared property getter: - (id)dynamicPredicate;	// 0x309a34c9
- (void)getDisplayOrderingProperties:(id *)properties isDescending:(BOOL *)descending;	// 0x309a37b9
- (OpaqueSearchCriteriaList *)importedCriteriaList;	// 0x309a33fd
- (BOOL)isCustomContainerOrderingDescending;	// 0x309a35f5
// declared property getter: - (BOOL)isLimitOrderingDescending;	// 0x309a35c9
// declared property getter: - (BOOL)isLimitedByCount;	// 0x309a351d
// declared property getter: - (id)limitOrderingDirectionality;	// 0x309a36d1
// declared property getter: - (id)limitOrderingProperties;	// 0x309a3681
// declared property getter: - (long long)limitValue;	// 0x309a3725
// declared property getter: - (id)limitingProperty;	// 0x309a3621
- (BOOL)moveTrackFromIndex:(unsigned)index toIndex:(unsigned)index2;	// 0x309a576d
- (id)populateSQLWithStaticTrackPersistentID:(id)staticTrackPersistentID;	// 0x309a3955
- (BOOL)removeAllTracks;	// 0x309a4901
- (BOOL)removeTracksAtIndexes:(id)indexes;	// 0x309a5221
- (BOOL)removeTracksAtIndexes:(id)indexes notify:(BOOL)notify;	// 0x309a51fd
- (BOOL)removeTracksAtIndexes:(id)indexes notify:(BOOL)notify indexesTransformBlock:(id)block;	// 0x309a4ac1
- (BOOL)removeTracksWithPersistentIDs:(const long long *)persistentIDs atFilteredIndexes:(id)filteredIndexes;	// 0x309a5241
- (BOOL)setContainsTrack:(BOOL)track forPersistentID:(long long)persistentID notify:(BOOL)notify;	// 0x309a4f2d
- (BOOL)setTracksWithPersistentIDs:(const long long *)persistentIDs count:(unsigned)count;	// 0x309a5b79
- (BOOL)setTracksWithPersistentIDs:(const long long *)persistentIDs count:(unsigned)count notify:(BOOL)notify;	// 0x309a5b9d
- (BOOL)setTracksWithSwappedPersistentIDData:(id)swappedPersistentIDData;	// 0x309a5ee1
- (BOOL)setValue:(id)value forProperty:(id)property;	// 0x309a1ebd
// declared property getter: - (id)staticPredicate;	// 0x309a3475
@end

