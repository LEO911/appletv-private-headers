/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/ATVSlideshow.framework/ATVSlideshow
 */

#import "ATVSlideshow-Structs.h"
#import "MRLayer.h"

@class MRTransition, NSMutableDictionary, NSDictionary, MCContainerNavigator, NSMutableArray, NSArray;

@interface MRLayerNavigator : MRLayer {
	MCContainerNavigator *mContainer;	// 112 = 0x70
	NSMutableArray *mSublayers;	// 116 = 0x74
	NSMutableDictionary *mSublayersForPlugs;	// 120 = 0x78
	MRLayer *mCurrentSublayer;	// 124 = 0x7c
	MRLayer *mNextSublayer;	// 128 = 0x80
	MRTransition *mCurrentTransition;	// 132 = 0x84
	BOOL mIsTransitioning;	// 136 = 0x88
	MRLayer *mSublayerToPrecompute;	// 140 = 0x8c
	id mPrecomputingTarget;	// 144 = 0x90
	unsigned mPrecomputingType;	// 148 = 0x94
	double mTransitionStartTime;	// 152 = 0x98
	double mTransitionDuration;	// 160 = 0xa0
	BOOL mTransitionIsBackwards;	// 168 = 0xa8
	NSDictionary *mTransitionChanges;	// 172 = 0xac
	NSMutableArray *mHistoryBack;	// 176 = 0xb0
	NSMutableArray *mHistoryForth;	// 180 = 0xb4
	BOOL mBackAndForthIsEnabled;	// 184 = 0xb8
}
@property(assign) BOOL backAndForthIsEnabled;	// G=0x31b525e1; S=0x31b525f1; @synthesize=mBackAndForthIsEnabled
@property(readonly, assign) MRLayer *currentSublayer;	// G=0x31b525d1; @synthesize=mCurrentSublayer
@property(readonly, assign) NSArray *sublayers;	// G=0x31b525c1; @synthesize=mSublayers
- (id)initWithPlug:(id)plug andParameters:(id)parameters inSuperlayer:(id)superlayer;	// 0x31b4f715
- (id)_createSublayerForPlug:(id)plug;	// 0x31b52915
- (void)_deleteSublayer:(id)sublayer;	// 0x31b52a4d
- (id)_dumpLayerWithOptions:(unsigned)options;	// 0x31b52451
- (void)_executeLayerCommandQueue;	// 0x31b52601
- (BOOL)_isNative3D;	// 0x31b510f1
- (void)_observePlug;	// 0x31b52cc1
- (void)_observePlugOnPreactivate;	// 0x31b52d79
- (void)_observeSublayer:(id)sublayer;	// 0x31b52bcd
- (void)_precomputeAtTime:(double)time inContext:(id)context withArguments:(id)arguments;	// 0x31b52f55
- (void)_preprecomputeAtTime:(double)time inContext:(id)context withArguments:(id)arguments;	// 0x31b53c09
- (void)_prerenderSublayersAtTime:(double)time inContext:(id)context withArguments:(id)arguments;	// 0x31b53455
- (void)_renderAtTime:(double)time inContext:(id)context withArguments:(id)arguments;	// 0x31b53185
- (id)_retainedByUserRenderedImageAtTime:(double)time inContext:(id)context withArguments:(id)arguments;	// 0x31b532bd
- (void)_setNeedsToRequestRebuildAudio:(BOOL)requestRebuildAudio;	// 0x31b52e91
- (void)_unobservePlug;	// 0x31b52d21
- (void)_unobservePlugOnDepreactivate;	// 0x31b52e11
- (void)_unobserveSublayer:(id)sublayer;	// 0x31b52c45
- (id)actionHitAtPoint:(CGPoint)point layer:(id *)layer;	// 0x31b51409
// declared property getter: - (BOOL)backAndForthIsEnabled;	// 0x31b525e1
- (void)cleanup;	// 0x31b4f8d5
// declared property getter: - (id)currentSublayer;	// 0x31b525d1
- (void)deactivate;	// 0x31b50159
- (void)depreactivate:(BOOL)depreactivate;	// 0x31b5033d
- (double)doTransition:(id)transition;	// 0x31b520b5
- (double)doTransition:(id)transition backwards:(BOOL)backwards;	// 0x31b51555
- (double)doTransitionBackwards:(id)backwards;	// 0x31b520c9
- (void)endTransitionToSublayer;	// 0x31b523b5
- (double)goBack;	// 0x31b52249
- (double)goForth;	// 0x31b520dd
- (BOOL)hasAudio;	// 0x31b50ff9
- (BOOL)hasSomethingToRender;	// 0x31b50065
- (BOOL)isAlphaFriendly;	// 0x31b50641
- (BOOL)isLoadedForTime:(double)time;	// 0x31b50429
- (BOOL)isOpaque;	// 0x31b505c9
- (void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void *)context;	// 0x31b4fba5
- (id)patchworkAtTime:(double)time inContext:(id)context withArguments:(id)arguments;	// 0x31b50ccd
- (BOOL)prerenderForTime:(double)time inContext:(id)context withArguments:(id)arguments;	// 0x31b506b9
// declared property setter: - (void)setBackAndForthIsEnabled:(BOOL)enabled;	// 0x31b525f1
- (void)setPixelSize:(CGSize)size;	// 0x31b4ff6d
- (id)sublayerForID:(id)anId;	// 0x31b51149
- (id)sublayerForPlugObjectID:(id)plugObjectID recursive:(BOOL)recursive;	// 0x31b51255
- (id)sublayerHitAtPoint:(CGPoint)point onlyIfHitElement:(BOOL)element localPoint:(CGPoint *)point3;	// 0x31b50e41
// declared property getter: - (id)sublayers;	// 0x31b525c1
- (void)synchronizeTime;	// 0x31b500e9
@end

