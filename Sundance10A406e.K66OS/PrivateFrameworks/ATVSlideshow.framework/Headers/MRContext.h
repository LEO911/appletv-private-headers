/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/ATVSlideshow.framework/ATVSlideshow
 */

#import "ATVSlideshow-Structs.h"
#import <NSObject.h> // Unknown library

@class MRImage, NSMutableDictionary, MRImageManager, EAGLContext, MRShader, MRContextState;
@protocol MZMediaManagement;

@interface MRContext : NSObject {
	MRContext *mBaseContext;	// 4 = 0x4
	EAGLContext *mGLContext;	// 8 = 0x8
	CGPoint mPixelOffset;	// 12 = 0xc
	CGSize mPixelSize;	// 20 = 0x14
	int mVRAM;	// 28 = 0x1c
	int mMaxTextureSize;	// 32 = 0x20
	float mFieldOfViewFactor;	// 36 = 0x24
	float mProjectionMatrix[16];	// 40 = 0x28
	int mOrientation;	// 104 = 0x68
	id<MZMediaManagement> mAssetManager;	// 108 = 0x6c
	MRImageManager *mImageManager;	// 112 = 0x70
	BOOL mIsLocalContext;	// 116 = 0x74
	BOOL mIsFlipped;	// 117 = 0x75
	BOOL mIsUsingIntelGPU;	// 118 = 0x76
	BOOL mIsUsingIntelGMA950;	// 119 = 0x77
	BOOL mPrefersSharedVRAM;	// 120 = 0x78
	BOOL mYUVTextureUsesYUVBorderColor;	// 121 = 0x79
	MRContextState *mOuterState;	// 124 = 0x7c
	MRContextState *mInnerState;	// 128 = 0x80
	NSMutableDictionary *mVertexAttributes;	// 132 = 0x84
	BOOL mCurrentVBOWasUpdated;	// 136 = 0x88
	BOOL mForceShaderUpdate;	// 137 = 0x89
	float mLocalAspectRatio;	// 140 = 0x8c
	int mScissorRect[4];	// 144 = 0x90
	MRShader *mCurrentShader;	// 160 = 0xa0
	MRImage *mTextureUnitImages[4];	// 164 = 0xa4
	int mActiveTextureUnit;	// 180 = 0xb4
	int mRenderBuffer;	// 184 = 0xb8
	MRImage *mBlackImage;	// 188 = 0xbc
	int _dimensionalMode;	// 192 = 0xc0
}
@property(readonly, assign, nonatomic) float aspectRatio;	// G=0x360731c1; 
@property(retain) id<MZMediaManagement> assetManager;	// G=0x36076891; S=0x360768a5; @synthesize=mAssetManager
@property(readonly, assign, nonatomic) const float *backColor;	// G=0x36073cdd; 
@property(readonly, assign) MRContext *baseContext;	// G=0x3607687d; @synthesize=mBaseContext
@property(readonly, assign) CGColorSpaceRef colorSpace;	// G=0x360731e1; 
@property(assign, nonatomic) int dimensionalMode;	// G=0x360769d9; S=0x36072dfd; @synthesize=_dimensionalMode
@property(readonly, assign, nonatomic) const float *foreColor;	// G=0x36073a01; 
@property(readonly, assign, nonatomic) BOOL foreColorIsOpaqueWhite;	// G=0x36073a21; 
@property(readonly, assign) EAGLContext *glContext;	// G=0x360769a1; @synthesize=mGLContext
@property(readonly, assign) MRImageManager *imageManager;	// G=0x360768b5; @synthesize=mImageManager
@property(readonly, assign, nonatomic) BOOL isDoubleBuffered;	// G=0x36073221; 
@property(assign, nonatomic) BOOL isFlipped;	// G=0x36076961; S=0x36073645; @synthesize=mIsFlipped
@property(readonly, assign, nonatomic) BOOL isUsingIntelGMA950;	// G=0x36076981; @synthesize=mIsUsingIntelGMA950
@property(readonly, assign, nonatomic) BOOL isUsingIntelGPU;	// G=0x36076971; @synthesize=mIsUsingIntelGPU
@property(assign, nonatomic) float localAspectRatio;	// G=0x36076921; S=0x36076931; @synthesize=mLocalAspectRatio
@property(readonly, assign, nonatomic) unsigned long maxDimension;	// G=0x36073229; 
@property(readonly, assign) int maxTextureSize;	// G=0x360769c5; @synthesize=mMaxTextureSize
@property(readonly, assign, nonatomic) const float *modelViewMatrix;	// G=0x36075e69; 
@property(readonly, assign) CGColorSpaceRef monochromaticColorSpace;	// G=0x36073201; 
@property(assign, nonatomic) int orientation;	// G=0x36076941; S=0x36076951; @synthesize=mOrientation
@property(assign, nonatomic) CGPoint pixelOffset;	// G=0x360768c9; S=0x360768e1; @synthesize=mPixelOffset
@property(assign, nonatomic) CGSize pixelSize;	// G=0x360768f5; S=0x3607690d; @synthesize=mPixelSize
@property(readonly, assign, nonatomic) BOOL prefersSharedVRAM;	// G=0x36076991; @synthesize=mPrefersSharedVRAM
@property(readonly, assign, nonatomic) const float *projectionMatrix;	// G=0x36075e59; 
@property(readonly, assign, nonatomic) CGSize size;	// G=0x36073175; 
@property(readonly, assign, nonatomic) unsigned virtualScreen;	// G=0x36073225; 
@property(readonly, assign, nonatomic) int vram;	// G=0x360769b5; @synthesize=mVRAM
- (id)initLocalWithContext:(id)context glContext:(id)context2 andSize:(CGSize)size;	// 0x360723b9
- (id)initLocalWithContext:(id)context texture:(id)texture andSize:(CGSize)size;	// 0x36072619
- (id)initWithEAGLContext:(id)eaglcontext andAssetManager:(id)manager;	// 0x36072129
- (void)_commitOuterToInner;	// 0x36074629
- (void)_updateTextureOnUnit:(unsigned)unit;	// 0x3607401d
// declared property getter: - (float)aspectRatio;	// 0x360731c1
// declared property getter: - (id)assetManager;	// 0x36076891
// declared property getter: - (const float *)backColor;	// 0x36073cdd
// declared property getter: - (id)baseContext;	// 0x3607687d
- (id)beginLocalContextWithSize:(CGSize)size backgroundColor:(const float *)color state:(XXStruct_vue6hD *)state;	// 0x36073389
- (void)blend:(int)blend;	// 0x3607367d
- (void)cleanup;	// 0x3607294d
- (void)clear:(int)clear;	// 0x3607373d
// declared property getter: - (CGColorSpaceRef)colorSpace;	// 0x360731e1
- (BOOL)commitShaderChange;	// 0x3607425d
- (void)composeForeColor:(const float *)color saveTo:(float *)to;	// 0x36073b79
- (void)composeForeColorRed:(float)red green:(float)green blue:(float)blue alpha:(float)alpha saveTo:(float *)to;	// 0x36073c15
- (void)composeModelViewMatrix:(float [16])matrix saveTo:(float *)to;	// 0x36075ee5
- (unsigned)createVBO;	// 0x36076679
- (void)cull:(int)cull;	// 0x360736c9
- (void)dealloc;	// 0x36072885
- (void)deleteVBO:(unsigned)vbo;	// 0x36076691
- (void)depthTest:(BOOL)test;	// 0x3607371d
// declared property getter: - (int)dimensionalMode;	// 0x360769d9
- (void)drawLinesFromOffset:(unsigned)offset count:(unsigned)count;	// 0x36076801
- (void)drawTriangleStripFromOffset:(unsigned)offset count:(unsigned)count;	// 0x36076759
- (void)drawTrianglesFromOffset:(unsigned)offset count:(unsigned)count;	// 0x360767ad
- (void)finalize;	// 0x3607290d
- (void)flush;	// 0x36073269
// declared property getter: - (const float *)foreColor;	// 0x36073a01
// declared property getter: - (BOOL)foreColorIsOpaqueWhite;	// 0x36073a21
// declared property getter: - (id)glContext;	// 0x360769a1
// declared property getter: - (id)imageManager;	// 0x360768b5
- (id)imageSetOnTextureUnit:(unsigned)unit;	// 0x36073fd1
// declared property getter: - (BOOL)isDoubleBuffered;	// 0x36073221
// declared property getter: - (BOOL)isFlipped;	// 0x36076961
// declared property getter: - (BOOL)isUsingIntelGMA950;	// 0x36076981
// declared property getter: - (BOOL)isUsingIntelGPU;	// 0x36076971
// declared property getter: - (float)localAspectRatio;	// 0x36076921
- (void)lock;	// 0x36072a55
// declared property getter: - (unsigned long)maxDimension;	// 0x36073229
// declared property getter: - (int)maxTextureSize;	// 0x360769c5
// declared property getter: - (const float *)modelViewMatrix;	// 0x36075e69
// declared property getter: - (CGColorSpaceRef)monochromaticColorSpace;	// 0x36073201
// declared property getter: - (int)orientation;	// 0x36076941
// declared property getter: - (CGPoint)pixelOffset;	// 0x360768c9
// declared property getter: - (CGSize)pixelSize;	// 0x360768f5
// declared property getter: - (BOOL)prefersSharedVRAM;	// 0x36076991
// declared property getter: - (const float *)projectionMatrix;	// 0x36075e59
- (void)purgeResources:(BOOL)resources;	// 0x36073369
- (void)restoreBackColor:(const float *)color;	// 0x36073de5
- (void)restoreForeColor:(const float *)color;	// 0x36073cc9
- (void)restoreModelViewMatrix:(float [16])matrix;	// 0x36075ffd
- (void)restoreScissorRect:(const int *)rect;	// 0x360739ed
- (id)retainedByUserBlackImage;	// 0x36073625
- (id)retainedByUserImageByEndingLocalContext:(id)context andRestoreState:(const XXStruct_vue6hD *)state;	// 0x36073521
// declared property setter: - (void)setAssetManager:(id)manager;	// 0x360768a5
- (void)setBackColor:(const float *)color saveTo:(float *)to;	// 0x36073cfd
- (void)setBackColorRed:(float)red green:(float)green blue:(float)blue alpha:(float)alpha saveTo:(float *)to;	// 0x36073d51
- (void)setColorsPointer:(const float *)pointer;	// 0x360763c5
// declared property setter: - (void)setDimensionalMode:(int)mode;	// 0x36072dfd
- (void)setForeColor:(const float *)color saveTo:(float *)to;	// 0x36073a91
- (void)setForeColorRed:(float)red green:(float)green blue:(float)blue alpha:(float)alpha saveTo:(float *)to;	// 0x36073ae5
- (void)setImage:(id)image onTextureUnit:(unsigned)unit withReferenceAspectRatio:(float)referenceAspectRatio state:(XXStruct_S04vsC *)state;	// 0x36073df9
- (void)setInSpriteCoordinatesPointer:(const float *)spriteCoordinatesPointer;	// 0x36076441
// declared property setter: - (void)setIsFlipped:(BOOL)flipped;	// 0x36073645
// declared property setter: - (void)setLocalAspectRatio:(float)ratio;	// 0x36076931
- (void)setModelViewMatrix:(float [16])matrix saveTo:(float *)to;	// 0x36075e89
- (void)setNormal:(float)normal :(float)arg2 :(float)arg3;	// 0x36076011
- (void)setNormalsPointer:(const float *)pointer;	// 0x3607638d
// declared property setter: - (void)setOrientation:(int)orientation;	// 0x36076951
// declared property setter: - (void)setPixelOffset:(CGPoint)offset;	// 0x360768e1
// declared property setter: - (void)setPixelSize:(CGSize)size;	// 0x3607690d
- (void)setScissorRect:(const int *)rect saveTo:(int *)to;	// 0x36073861
- (void)setShader:(id)shader;	// 0x36075999
- (void)setShaderUniformFloat:(float)aFloat forKey:(id)key;	// 0x36075b19
- (void)setShaderUniformInt:(int)int forKey:(id)key;	// 0x36075a95
- (void)setShaderUniformMat3:(float [16])a3 forKey:(id)key;	// 0x36075d51
- (void)setShaderUniformMat4:(float [16])a4 forKey:(id)key;	// 0x36075dd5
- (void)setShaderUniformVec2:(float)a2 :(float)arg2 forKey:(id)key;	// 0x36075b9d
- (void)setShaderUniformVec3:(float)a3 :(float)arg2 :(float)arg3 forKey:(id)key;	// 0x36075c21
- (void)setShaderUniformVec4:(float)a4 :(float)arg2 :(float)arg3 :(float)arg4 forKey:(id)key;	// 0x36075cb5
- (void)setTextureCoordinatesPointer:(const float *)pointer onTextureUnit:(unsigned)unit;	// 0x360763fd
- (void)setTextureMatrix:(float [16])matrix onTextureUnit:(unsigned)unit;	// 0x36076051
- (void)setVertex2DPointer:(const float *)pointer;	// 0x360762c5
- (void)setVertex3DPointer:(const float *)pointer;	// 0x36076329
- (void)setVertexAttributePointer:(const float *)pointer ofSize:(unsigned)size forKey:(id)key;	// 0x36076479
- (void)setVertexBuffer2D:(unsigned)d withFeatures:(unsigned)features;	// 0x360761b1
- (void)setVertexBuffer2D:(unsigned)d withStride:(unsigned)stride inSpriteCoordinatesOffset:(unsigned)spriteCoordinatesOffset texture0CoordinatesOffset:(unsigned)offset;	// 0x36076089
// declared property getter: - (CGSize)size;	// 0x36073175
- (BOOL)supportsMirroredRepeatForImage:(id)image;	// 0x36076855
- (void)translateModelViewMatrixByX:(float)x Y:(float)y Z:(float)z saveTo:(float *)to;	// 0x36075f55
- (void)unlock;	// 0x36072a59
- (void)unsetColorsPointer;	// 0x360765f5
- (void)unsetImage:(id)image onTextureUnit:(unsigned)unit state:(const XXStruct_S04vsC *)state;	// 0x36073f7d
- (void)unsetInSpriteCoordinatesPointer;	// 0x36076639
- (void)unsetNormalsPointer;	// 0x360765d5
- (void)unsetShader;	// 0x36075a49
- (void)unsetTextureCoordinatesPointerOnTextureUnit:(unsigned)unit;	// 0x36076615
- (void)unsetVertexAttributePointerForKey:(id)key;	// 0x36076659
- (void)unsetVertexPointer;	// 0x3607655d
- (void)updateGeometry;	// 0x36072a61
- (void)uploadBuffer:(void *)buffer withSize:(int)size toVertexBuffer2D:(unsigned)vertexBuffer2D;	// 0x360766e5
// declared property getter: - (unsigned)virtualScreen;	// 0x36073225
// declared property getter: - (int)vram;	// 0x360769b5
@end

