/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices
 */

#import <NSObject.h> // Unknown library
#import "AFManagedStore.h"

@class NSMutableDictionary, DKConnection, NSString;
@protocol AFAssistantUIService, AFSpeechDelegate;

@interface AFConnection : NSObject <AFManagedStore> {
	DKConnection *_connection;	// 4 = 0x4
	id<AFAssistantUIService> _delegate;	// 8 = 0x8
	id<AFSpeechDelegate> _speechDelegate;	// 12 = 0xc
	float _averagePower;	// 16 = 0x10
	float _peakPower;	// 20 = 0x14
	NSString *_outstandingRequestClass;	// 24 = 0x18
	unsigned _stateInSync : 1;	// 28 = 0x1c
	unsigned _shouldSpeak : 1;	// 28 = 0x1c
	unsigned _isCapturingSpeech : 1;	// 28 = 0x1c
	unsigned _hasOutstandingRequest : 1;	// 28 = 0x1c
	unsigned _replyContextMayInitiateCall : 1;	// 28 = 0x1c
	BOOL _hasActiveRequest;	// 29 = 0x1d
	NSMutableDictionary *_replies;	// 32 = 0x20
}
@property(readonly, assign) float averagePower;	// G=0x30221a55; converted property
@property(assign, nonatomic) __weak id<AFAssistantUIService> delegate;	// G=0x302224e1; S=0x3021f151; @synthesize=_delegate
@property(readonly, assign, nonatomic) BOOL isRecording;	// G=0x30221a2d; 
@property(readonly, assign) float peakPower;	// G=0x30221a65; converted property
@property(assign, nonatomic) __weak id<AFSpeechDelegate> speechDelegate;	// G=0x30222501; S=0x30222521; @synthesize=_speechDelegate
+ (void)_reachabilityDidChange:(id)_reachability;	// 0x30220cf9
+ (BOOL)assistantIsEnabled;	// 0x30220b4d
+ (BOOL)assistantIsSupported;	// 0x30220ced
+ (BOOL)assistantIsSupportedForLanguageCode:(id)languageCode error:(id *)error;	// 0x30220ba5
+ (void)beginMonitoringAvailability;	// 0x30220d85
+ (void)defrost;	// 0x30220f7d
+ (void)initialize;	// 0x3021f0a9
+ (BOOL)isAvailable;	// 0x30220df1
+ (void)stopMonitoringAvailability;	// 0x30220e81
+ (BOOL)userDataSyncNeeded;	// 0x30220edd
- (id)init;	// 0x3021f0ad
- (void).cxx_destruct;	// 0x30222535
- (void)_asyncBarrierWithBlock:(id)block;	// 0x302227c1
- (void)_barrier;	// 0x30222789
- (void)_cancelRequestTimeout;	// 0x30220869
- (void)_checkAndSetIsCapturingSpeech:(BOOL)speech;	// 0x3021f191
- (void)_clearAssistantInfoForAccountWithIdentifier:(id)identifier;	// 0x30222811
- (void)_clearConnection;	// 0x30220599
- (id)_connection;	// 0x30220325
- (void)_handleMessage:(id)message;	// 0x30220225
- (void)_invokeRequestTimeout;	// 0x302207c1
- (void)_msgDismissAssistant:(id)assistant;	// 0x3021fce9
- (void)_msgDoCommand:(id)command;	// 0x3021f911
- (void)_msgOpenURL:(id)url;	// 0x3021fab1
- (void)_msgReplyMayInitiateCall:(id)call;	// 0x3021fee5
- (void)_msgRequestCompleted:(id)completed;	// 0x3021fa81
- (void)_msgRequestError:(id)error;	// 0x3021fdad
- (void)_msgSpeechLevelUpdate:(id)update;	// 0x3021ff31
- (void)_msgSpeechRecognitionDidFail:(id)_msgSpeechRecognition;	// 0x30220175
- (void)_msgSpeechRecognized:(id)recognized;	// 0x302200b5
- (void)_msgSpeechRecordingDidBegin:(id)_msgSpeechRecording;	// 0x3021ff21
- (void)_msgSpeechRecordingDidCancel:(id)_msgSpeechRecording;	// 0x30220015
- (void)_msgSpeechRecordingDidEnd:(id)_msgSpeechRecording;	// 0x3021ffe5
- (void)_msgSpeechRecordingDidFail:(id)_msgSpeechRecording;	// 0x30220045
- (void)_msgSpeechRecordingWillBegin:(id)_msgSpeechRecording;	// 0x3021ff11
- (void)_msgStateUpdate:(id)update;	// 0x3021fe49
- (void)_requestDidEnd;	// 0x3021f2b1
- (void)_requestStateUpdate;	// 0x302208a5
- (void)_requestWillBeginWithRequestClass:(id)_request logAggregateData:(BOOL)data;	// 0x3021f25d
- (void)_scheduleRequestTimeout:(double)timeout;	// 0x3022082d
- (void)_sendMessage:(id)message withReply:(id)reply;	// 0x302226a9
- (void)_sendMessage:(id)message withReplySync:(id)replySync;	// 0x30222721
- (void)_tellDelegateRequestFailed:(id)failed requestClass:(id)aClass;	// 0x3021f355
- (void)_tellDelegateRequestFinished;	// 0x3021f2f1
- (void)_tellDelegateShouldSpeakChanged:(BOOL)_tellDelegate;	// 0x3021f3e9
- (void)_tellSpeechDelegateDidRecognizeSpeechPhrases:(id)_tellSpeechDelegate correctionIdentifier:(id)identifier;	// 0x3021f609
- (void)_tellSpeechDelegateRecognitionDidFail:(id)_tellSpeechDelegateRecognition;	// 0x3021f8a5
- (void)_tellSpeechDelegateRecordingDidBegin;	// 0x3021f4a1
- (void)_tellSpeechDelegateRecordingDidCancel;	// 0x3021f549
- (void)_tellSpeechDelegateRecordingDidEnd;	// 0x3021f4f5
- (void)_tellSpeechDelegateRecordingDidFail:(id)_tellSpeechDelegateRecording;	// 0x3021f59d
- (void)_tellSpeechDelegateRecordingWillBegin;	// 0x3021f44d
- (void)_unhandledMessage:(id)message;	// 0x302201b5
- (void)_willCancelRequest;	// 0x30220aa5
- (void)_willCompleteRequest;	// 0x30220b15
- (void)_willFailRequest;	// 0x30220add
- (void)_willStartRequest;	// 0x30220a5d
// converted property getter: - (float)averagePower;	// 0x30221a55
- (void)cancelRequest;	// 0x3022180d
- (void)cancelSpeech;	// 0x30221571
- (void)clearAndSetApplicationContext;	// 0x30221f7d
- (void)clearAndSetApplicationContextWithBulletins:(id)bulletins;	// 0x30221f91
- (void)clearContext;	// 0x30221efd
- (void)clearUndoStack;	// 0x30222145
- (void)dealloc;	// 0x3021f111
// declared property getter: - (id)delegate;	// 0x302224e1
- (id)domainObjectForKey:(id)key;	// 0x302221c5
- (void)endSession;	// 0x30220ee9
// declared property getter: - (BOOL)isRecording;	// 0x30221a2d
// converted property getter: - (float)peakPower;	// 0x30221a65
- (void)preheat;	// 0x30221045
- (void)redoRequest;	// 0x302220c5
- (BOOL)replyContextMayInitiateCall;	// 0x30221a75
- (void)rollbackRequest;	// 0x302218b1
- (void)sendGenericAceCommand:(id)command;	// 0x30221a89
- (void)sendGenericAceCommand:(id)command conflictHandler:(id)handler;	// 0x30221a9d
- (void)sendReplyCommand:(id)command;	// 0x30221e3d
// declared property setter: - (void)setDelegate:(id)delegate;	// 0x3021f151
- (void)setDomainObject:(id)object forKey:(id)key;	// 0x302223f1
- (BOOL)setLanguageCode:(id)code error:(id *)error;	// 0x302210c5
- (void)setLockState:(BOOL)state screenLocked:(BOOL)locked;	// 0x30221215
// declared property setter: - (void)setSpeechDelegate:(id)delegate;	// 0x30222521
- (BOOL)shouldSpeak;	// 0x30221a41
// declared property getter: - (id)speechDelegate;	// 0x30222501
- (void)startRequestWithCorrectedText:(id)correctedText forSpeechIdentifier:(id)speechIdentifier;	// 0x30221931
- (void)startRequestWithText:(id)text;	// 0x30221439
- (void)startRequestWithText:(id)text timeout:(double)timeout;	// 0x30221349
- (void)startSpeechRequestWithOptions:(id)options;	// 0x30221469
- (void)startSpeechRequestWithSpeechFileAtURL:(id)url;	// 0x302225a1
- (void)stopSpeech;	// 0x302217f9
- (void)stopSpeechWithOptions:(id)options;	// 0x30221709
- (void)undoRequest;	// 0x30222045
- (void)updateSpeechOptions:(id)options;	// 0x30221629
@end

