/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

#import "ML3Entity.h"
#import "MusicLibrary-Structs.h"

@class NSArray, NSString, ML3Predicate;

@interface ML3Container : ML3Entity {
}
@property(readonly, assign) NSArray *cloudDisplayOrderingTerms;	// G=0x33f0c649; 
@property(readonly, assign) NSArray *displayOrderingTerms;	// G=0x33f0c6c5; 
@property(readonly, assign) ML3Predicate *dynamicPredicate;	// G=0x33f0c215; 
@property(readonly, assign, getter=isLimitOrderingDescending) BOOL limitOrderingDescending;	// G=0x33f0c315; 
@property(readonly, assign) NSArray *limitOrderingTerms;	// G=0x33f0c505; 
@property(readonly, assign) long long limitValue;	// G=0x33f0c581; 
@property(readonly, assign, getter=isLimitedByCount) BOOL limitedByCount;	// G=0x33f0c2c9; 
@property(readonly, assign) NSString *limitingProperty;	// G=0x33f0c401; 
@property(readonly, assign) ML3Predicate *staticPredicate;	// G=0x33f0c1b9; 
+ (void)_insertNewSmartPlaylist:(id)playlist criteriaBlob:(id)blob evaluationOrder:(unsigned long)order limited:(BOOL)limited trackOrder:(unsigned long)order5 distinguishedKind:(int)kind inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x33f0afd1
+ (id)autoCreatedBuiltInSmartPlaylistsPIDs:(id)smartPlaylistsPIDs;	// 0x33f0bba9
+ (BOOL)createMissingBuiltInSmartPlaylists:(id)smartPlaylists;	// 0x33f0b3fd
+ (id)databaseTable;	// 0x33edadf1
+ (id)defaultOrderingProperties;	// 0x33ee0249
+ (void)deleteAutoCreatedBuiltInSmartPlaylistsPIDs:(id)smartPlaylistsPIDs inLibrary:(id)library;	// 0x33f0bef1
+ (id)extraTablesToDelete;	// 0x33f09b19
+ (id)foreignColumnForProperty:(id)property;	// 0x33f09afd
+ (id)foreignDatabaseTableForProperty:(id)property;	// 0x33f09ae1
+ (BOOL)hasCriterionInCriteriaList:(SearchCriteriaList *)criteriaList forITDBTrackField:(int)itdbtrackField;	// 0x33f0ac41
+ (void)initialize;	// 0x33ed92cd
+ (id)joinClausesForProperty:(id)property;	// 0x33edad69
+ (id)nextFilepathForPlaylistType:(int)playlistType withPersistentID:(unsigned long long)persistentID inLibrary:(id)library;	// 0x33f09b45
+ (id)persistentIDColumnForTable:(id)table;	// 0x33f09b29
+ (void)populateDynamicContainersInLibrary:(id)library;	// 0x33f0d3f5
+ (void)populateDynamicContainersInLibrary:(id)library createBuiltinSmartPlaylists:(BOOL)playlists;	// 0x33f0d419
+ (void)populateDynamicContainersWithTrackPersistentID:(id)trackPersistentID inLibrary:(id)library;	// 0x33f0d43d
+ (void)populateDynamicContainersWithTrackPersistentID:(id)trackPersistentID inLibrary:(id)library createBuiltinSmartPlaylists:(BOOL)playlists;	// 0x33f0d475
+ (void)populateSortOrdersOfPropertyValues:(id)propertyValues inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x33f09d31
+ (void)populateStaticItemsOfDynamicContainersInLibrary:(id)library;	// 0x33f0cb4d
+ (id)predicateForCriteriaList:(SearchCriteriaList *)criteriaList dynamicCriteria:(BOOL)criteria;	// 0x33f0acf1
+ (int)revisionTrackingCode;	// 0x33f09ac1
+ (id)sectionPropertyForProperty:(id)property;	// 0x33f09ac5
+ (BOOL)smartCriteriaCanBeEvaluated:(id)evaluated;	// 0x33f09c8d
- (id)initWithDictionary:(id)dictionary inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x33f09f81
- (void)_accessCurrentSwappedPersisentIDsUsingBlock:(id)block;	// 0x33f0df35
- (BOOL)_setSwappedItemPersistentIDs:(const long long *)ids size:(int)size;	// 0x33f0deed
- (BOOL)_setSwappedItemPersistentIDs:(const long long *)ids size:(int)size notify:(BOOL)notify;	// 0x33f0dc01
- (BOOL)addTrackWithPersistentID:(long long)persistentID;	// 0x33f0ec79
- (BOOL)addTracksWithPersistentIDs:(long long *)persistentIDs count:(unsigned)count;	// 0x33f0eca5
- (BOOL)addTracksWithPersistentIDs:(long long *)persistentIDs count:(unsigned)count notify:(BOOL)notify;	// 0x33f0ecc9
- (void)bindPopulateStatement:(id)statement withStaticTrackPersistentID:(id)staticTrackPersistentID;	// 0x33f0cac1
// declared property getter: - (id)cloudDisplayOrderingTerms;	// 0x33f0c649
- (void)didChangeValueForProperties:(const id *)properties count:(unsigned)count;	// 0x33f0aab9
// declared property getter: - (id)displayOrderingTerms;	// 0x33f0c6c5
// declared property getter: - (id)dynamicPredicate;	// 0x33f0c215
- (id)evaluationOrderingTerms;	// 0x33f0c489
- (SearchCriteriaList *)importedCriteriaList;	// 0x33f0c125
- (BOOL)isCustomContainerOrderingDescending;	// 0x33f0c3b5
- (BOOL)isEvaluationOrderingDescending;	// 0x33f0c271
// declared property getter: - (BOOL)isLimitOrderingDescending;	// 0x33f0c315
// declared property getter: - (BOOL)isLimitedByCount;	// 0x33f0c2c9
// declared property getter: - (id)limitOrderingTerms;	// 0x33f0c505
// declared property getter: - (long long)limitValue;	// 0x33f0c581
// declared property getter: - (id)limitingProperty;	// 0x33f0c401
- (BOOL)moveTrackFromIndex:(unsigned)index toIndex:(unsigned)index2;	// 0x33f0f095
- (id)populateSQLWithStaticTrackPersistentID:(id)staticTrackPersistentID;	// 0x33f0c8c9
- (BOOL)removeAllTracks;	// 0x33f0df11
- (BOOL)removeTracksAtIndexes:(id)indexes;	// 0x33f0eaed
- (BOOL)removeTracksAtIndexes:(id)indexes notify:(BOOL)notify;	// 0x33f0eac9
- (BOOL)removeTracksAtIndexes:(id)indexes notify:(BOOL)notify indexesTransformBlock:(id)block;	// 0x33f0e2a5
- (BOOL)removeTracksWithPersistentIDs:(const long long *)persistentIDs atFilteredIndexes:(id)filteredIndexes;	// 0x33f0eb0d
- (BOOL)setContainsTrack:(BOOL)track forPersistentID:(long long)persistentID notify:(BOOL)notify;	// 0x33f0e7c9
- (BOOL)setTracksWithPersistentIDs:(const long long *)persistentIDs count:(unsigned)count;	// 0x33f0f4d5
- (BOOL)setTracksWithPersistentIDs:(const long long *)persistentIDs count:(unsigned)count notify:(BOOL)notify;	// 0x33f0f4f9
- (BOOL)setTracksWithSwappedPersistentIDData:(id)swappedPersistentIDData;	// 0x33f0f871
- (BOOL)setValue:(id)value forProperty:(id)property;	// 0x33f0a5d9
// declared property getter: - (id)staticPredicate;	// 0x33f0c1b9
@end

