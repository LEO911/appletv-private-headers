/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/CoreData.framework/CoreData
 */

#import "NSSQLConnection.h"
#import "CoreData-Structs.h"

@class NSString, NSSQLiteStatement, NSSQLEntity, NSMutableSet, NSMutableDictionary;

@interface NSSQLiteConnection : NSSQLConnection {
	sqlite3 *_db;	// 28 = 0x1c
	sqlite3_stmt *_vmstatement;	// 32 = 0x20
	int _rowsProcessedCount;	// 36 = 0x24
	unsigned _lastEntityKey;	// 40 = 0x28
	NSSQLEntity *_finalEntity;	// 44 = 0x2c
	NSSQLEntity *_lastEntity;	// 48 = 0x30
	sqlite3_stmt *_fetchPKStatement;	// 52 = 0x34
	sqlite3_stmt *_updatePKStatement;	// 56 = 0x38
	NSSQLiteStatement *_beginStatement;	// 60 = 0x3c
	NSSQLiteStatement *_commitStatement;	// 64 = 0x40
	NSSQLiteStatement *_rollbackStatement;	// 68 = 0x44
	NSMutableSet *_vmCachedStatements;	// 72 = 0x48
	NSMutableDictionary *_pragmaSettings;	// 76 = 0x4c
	CFDictionaryRef _cachedEntityUpdateStatements;	// 80 = 0x50
	double _timeOutOption;	// 84 = 0x54
	void *_extraBuffersForRegisteredFunctions[5];	// 92 = 0x5c
	NSString *_dbPathRegisteredWithBackupd;	// 112 = 0x70
	long long _vacuumTracker;	// 116 = 0x74
	sqliteConnectionFlags _sqliteConnectionFlags;	// 124 = 0x7c
	unsigned long long _debugInode;	// 128 = 0x80
}
+ (void)__INode_Changed_AllThatIsLeftToUsIsHonor__;	// 0x33d7c611
+ (const char *)_databaseOpenURLStringForURL:(id)url;	// 0x33d7dae9
+ (BOOL)_destroyPersistentStoreAtURL:(id)url options:(id)options error:(id *)error;	// 0x33d7e4c5
+ (BOOL)_replacePersistentStoreAtURL:(id)url destinationOptions:(id)options withPersistentStoreFromURL:(id)url3 sourceOptions:(id)options4 error:(id *)error;	// 0x33d7dbb9
+ (void)_setDebugFlags:(int)flags;	// 0x33d7c60d
+ (void)initialize;	// 0x33cc7d41
+ (int)readMagicWordFromPath:(const char *)path;	// 0x33d7da89
- (id)initWithAdapter:(id)adapter;	// 0x33cc7d8d
- (id)_adapter;	// 0x33cc80f9
- (id)_beginPowerAssertionWithAssert:(unsigned *)anAssert;	// 0x33d7ef55
- (void)_bindVariablesWithDeletedRow:(id)deletedRow;	// 0x33d806bd
- (void)_bindVariablesWithInsertedRow:(id)insertedRow;	// 0x33d7f911
- (void)_bindVariablesWithUpdatedRow:(id)updatedRow andOriginalRow:(id)row forDeltasMask:(CFBitVectorRef)deltasMask;	// 0x33d7fef5
- (void **)_buffersForRegisteredFunctions;	// 0x33cc8f75
- (void)_clearBindVariablesForInsertedRow;	// 0x33d7fd7d
- (void)_clearBindVariablesForUpdateStatement:(id)updateStatement forDeltasMask:(CFBitVectorRef)deltasMask;	// 0x33d803cd
- (void)_clearCachedStatements;	// 0x33d81211
- (void)_clearOtherStatements;	// 0x33d811d5
- (void)_clearTransactionCaches;	// 0x33d7edc9
- (void)_configureAutoVacuum;	// 0x33d82bdd
- (void)_configureIntegrityCheck;	// 0x33cc8fb1
- (void)_configurePageSize;	// 0x33d82e01
- (void)_configurePragmaOptions:(int)options;	// 0x33cc90e5
- (void)_configureSynchronousMode;	// 0x33cc8f89
- (void)_configureUbiquityMetadataTable;	// 0x33cca131
- (void)_endPowerAssertionWithAssert:(unsigned)anAssert andApp:(id)app;	// 0x33d7efe5
- (void)_ensureDatabaseOpen;	// 0x33cca019
- (void)_ensureNoFetchInProgress;	// 0x33cca0d1
- (void)_ensureNoStatementPrepared;	// 0x33cca075
- (void)_ensureNoTransactionOpen;	// 0x33d7c901
- (void)_executeSQLString:(id)string;	// 0x33cc95c1
- (long long)_fetchMaxPrimaryKeyForEntity:(id)entity;	// 0x33d7d631
- (void)_finalizeStatement;	// 0x33ccccc1
- (void)_forceDisconnectOnError;	// 0x33d7f001
- (long long)_getCurrentAutoVacuumValue;	// 0x33d832c1
- (BOOL)_hasTableWithName:(id)name;	// 0x33d82155
- (id)_newValueForColumn:(id)column atIndex:(unsigned)index inStatement:(sqlite3_stmt *)statement;	// 0x33ccc161
- (void)_performPostSaveTasks;	// 0x33d83061
- (void)_registerExtraFunctions;	// 0x33cc8b65
- (int)_rowsChangedByLastExecute;	// 0x33d7f8f5
- (void)_setupVacuumIfNecessary;	// 0x33d83325
- (sqlite3_stmt *)_vmstatement;	// 0x33d815ad
- (void)addPeerRange:(id)range;	// 0x33d84319
- (void)addPeerRangeForPeerID:(id)peerID entityName:(id)name rangeStart:(id)start rangeEnd:(id)end peerRangeStart:(id)start5 peerRangeEnd:(id)end6;	// 0x33d843c5
- (id)allPeerRanges;	// 0x33d8453d
- (void)beginTransaction;	// 0x33d7f4f9
- (void)cacheCurrentDBStatementOn:(id)on;	// 0x33d81325
- (void)cacheUpdateStatement:(id)statement forEntity:(id)entity andDeltasMask:(CFBitVectorRef)mask;	// 0x33d80ae9
- (id)cachedUpdateStatementForEntity:(id)entity andDeltasMask:(CFBitVectorRef)mask;	// 0x33d80c35
- (BOOL)canConnect;	// 0x33cc805d
- (void)commitTransaction;	// 0x33d7f605
- (void)connect;	// 0x33cc8165
- (id)createMapOfEntityNameToPKMaxForEntities:(id)entities;	// 0x33d85d85
- (id)createMapOfEntityNameToPKMaxForEntitiesFromPKTable:(id)pktable;	// 0x33d84d9d
- (id)createMapOfEntityNameToPKMaxForEntitiesFromUBRangeTable:(id)ubrangeTable;	// 0x33d85591
- (BOOL)databaseIsEmpty;	// 0x33cce201
- (void)dealloc;	// 0x33d7c615
- (void)deleteCorrelation:(id)correlation;	// 0x33d80a6d
- (void)deleteRow:(id)row;	// 0x33d80f39
- (id)describeResults;	// 0x33d81305
- (void)disconnect;	// 0x33d7f1f1
- (void)endFetch;	// 0x33cccc21
- (void)endPrimaryKeyGeneration;	// 0x33d82309
- (void)execute;	// 0x33ccaf15
- (long long)fetchMaxPrimaryKeyForEntity:(id)entity;	// 0x33d7d8d5
- (int)fetchResultSet:(void *)set usingFetchPlan:(id)plan;	// 0x33cdb3a5
- (id)fetchTableCreationSQL;	// 0x33d81d9d
- (id)fetchTableNames;	// 0x33d81a61
- (id)fetchUbiquityKnowledgeVector;	// 0x33d83561
- (void)finalize;	// 0x33d7c7c1
- (long long)generatePrimaryKeysForEntity:(id)entity batch:(unsigned)batch;	// 0x33d82319
- (void)handleCorruptedDB:(id)db;	// 0x33d81379
- (BOOL)hasMetadataTable;	// 0x33d822d1
- (BOOL)hasPrimaryKeyTable;	// 0x33d82bb9
- (void)insertCorrelation:(id)correlation;	// 0x33d80975
- (void)insertRow:(id)row;	// 0x33d8075d
- (BOOL)isFetchInProgress;	// 0x33d7c8ed
- (BOOL)isLocalFS;	// 0x33d83545
- (BOOL)isOpen;	// 0x33cc80dd
- (id)newFetchedArray;	// 0x33ccc009
- (BOOL)performIntegrityCheck;	// 0x33d815bd
- (void)prepareForPrimaryKeyGeneration;	// 0x33d822f9
- (void)prepareSQLStatement:(id)statement;	// 0x33cca7e9
- (CFArrayRef)rawIntegerRowsForSQL:(id)sql;	// 0x33d7c961
- (void)releaseSQLStatement;	// 0x33cccc7d
- (void)resetSQLStatement;	// 0x33d81189
- (void)rollbackTransaction;	// 0x33d7f779
- (void)setExclusiveLockingMode:(BOOL)mode;	// 0x33d8146d
- (void)setUbiquityTableValue:(id)value forKey:(id)key;	// 0x33d862e5
- (id)ubiquityTableKeysAndValues;	// 0x33d86449
- (id)ubiquityTableValueForKey:(id)key;	// 0x33d86a2d
- (void)updateCorrelation:(id)correlation;	// 0x33d809f1
- (void)updateRow:(id)row;	// 0x33d80c65
- (void)updateUbiquityKnowledgeForPeerWithID:(id)anId andTransactionNumber:(id)number;	// 0x33d8409d
- (void)updateUbiquityKnowledgeVector:(id)vector;	// 0x33d83ca5
- (void)willCreateSchema;	// 0x33d82f45
@end

