/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/CoreData.framework/CoreData
 */

#import "NSManagedObjectContextFaultingDelegate.h"
#import "_PFUbiquityRecordImportOperationDelegate.h"
#import "PFUbiquityImportScanOperationDelegate.h"
#import "PFUbiquityBaselineRollOperationDelegate.h"
#import "PFUbiquityBaselineRecoveryOperationDelegate.h"
#import "PFUbiquityBaselineRollResponseOperationDelegate.h"
#import <NSObject.h> // Unknown library

@class NSOperationQueue, PFUbiquityLocation, NSString, NSLock, NSRecursiveLock, NSMutableSet, NSSet, NSMutableDictionary;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface _PFUbiquityRecordsImporter : NSObject <_PFUbiquityRecordImportOperationDelegate, NSManagedObjectContextFaultingDelegate, PFUbiquityImportScanOperationDelegate, PFUbiquityBaselineRollOperationDelegate, PFUbiquityBaselineRecoveryOperationDelegate, PFUbiquityBaselineRollResponseOperationDelegate> {
	NSOperationQueue *_importQueue;	// 4 = 0x4
	NSObject<OS_dispatch_queue> *_privateQueue;	// 8 = 0x8
	BOOL _isMonitoring;	// 12 = 0xc
	NSString *_localPeerID;	// 16 = 0x10
	PFUbiquityLocation *_ubiquityRootLocation;	// 20 = 0x14
	NSMutableSet *_pendingTransactionLogLocations;	// 24 = 0x18
	NSMutableSet *_failedPendingTransactionLogs;	// 28 = 0x1c
	NSObject<OS_dispatch_source> *_logRestartTimer;	// 32 = 0x20
	BOOL _hasScheduledPendingLogsBlock;	// 36 = 0x24
	BOOL _hasScheduledFailedLogsBlock;	// 37 = 0x25
	NSRecursiveLock *_schedulingLock;	// 40 = 0x28
	NSLock *_pendingLocationsLock;	// 44 = 0x2c
	BOOL _importOnlyActiveStores;	// 48 = 0x30
	BOOL _throttleNotifications;	// 49 = 0x31
	unsigned _numPendingNotifications;	// 52 = 0x34
	NSMutableDictionary *_pendingNotificationUserInfo;	// 56 = 0x38
	BOOL _allowBaselineRoll;	// 60 = 0x3c
	unsigned _pendingImportOperationsCount;	// 64 = 0x40
	NSSet *_failedPendingTransactionLogLocations;	// 68 = 0x44
}
@property(assign) BOOL allowBaselineRoll;	// G=0x33dd4cd9; S=0x33dd4cf1; @synthesize=_allowBaselineRoll
@property(readonly, assign) NSSet *failedPendingTransactionLogLocations;	// G=0x33dd4d1d; @synthesize=_failedPendingTransactionLogLocations
@property(assign) BOOL importOnlyActiveStores;	// G=0x33dd4ca9; S=0x33dd4cc1; @synthesize=_importOnlyActiveStores
@property(readonly, assign) NSOperationQueue *importQueue;	// G=0x33dd4be9; @synthesize=_importQueue
@property(readonly, assign) BOOL isMonitoring;	// G=0x33dd4c11; @synthesize=_isMonitoring
@property(readonly, assign) NSString *localPeerID;	// G=0x33dd4bfd; @synthesize=_localPeerID
@property(assign) NSObject<OS_dispatch_source> *logRestartTimer;	// G=0x33dd4c3d; S=0x33dd4c51; @synthesize=_logRestartTimer
@property(readonly, assign) NSSet *pendingTransactionLogLocations;	// G=0x33dd4d09; @synthesize=_pendingTransactionLogLocations
@property(readonly, assign, nonatomic) NSRecursiveLock *schedulingLock;	// G=0x33dd4c69; @synthesize=_schedulingLock
@property(assign) BOOL throttleNotifications;	// G=0x33dd4c79; S=0x33dd4c91; @synthesize=_throttleNotifications
@property(readonly, assign) PFUbiquityLocation *ubiquityRootLocation;	// G=0x33dd4c29; @synthesize=_ubiquityRootLocation
+ (void)afterDelay:(double)delay executeBlockOnRootQueue:(id)queue;	// 0x33dd4ba1
+ (BOOL)canProcessContentsOfUbiquityRootPath:(id)ubiquityRootPath;	// 0x33dd2fe5
+ (void)executeBlockOnRootQueue:(id)queue;	// 0x33dd4b8d
+ (void)initialize;	// 0x33dccb61
- (id)init;	// 0x33dccbd5
- (id)initWithLocalPeerID:(id)localPeerID andUbiquityRootLocation:(id)location;	// 0x33dccbd9
- (void)_applicationResumed:(id)resumed;	// 0x33dd07b1
// declared property getter: - (BOOL)allowBaselineRoll;	// 0x33dd4cd9
- (void)awakeFromLaunch:(BOOL)launch;	// 0x33dccfdd
- (void)baselineRollOperationEncounteredAnInconsistentBaselineState:(id)state;	// 0x33dd408d
- (void)baselineRollOperationWasUnableToLockPersistentStore:(id)lockPersistentStore;	// 0x33dd409d
- (BOOL)canProcessTransactionLogWithScore:(id)score afterLogWithScore:(id)score2;	// 0x33dce701
- (BOOL)checkSchedulingContextForMissingLocalPeerOperations:(id)missingLocalPeerOperations error:(id *)error;	// 0x33dce8e5
- (int)compareScoreKnowledgeVector:(id)vector withScoreDictionary:(id)scoreDictionary;	// 0x33dd2fc9
- (int)context:(id)context shouldHandleInaccessibleFault:(id)fault forObjectID:(id)objectID andTrigger:(id)trigger;	// 0x33dd2fe1
- (id)createDictionaryOfStoreNameToLocations:(id)locations;	// 0x33dcf295
- (id)createSortedOperationsArrayForLogLocationsInContext:(id)context isFirstImport:(BOOL)import;	// 0x33dcd001
- (void)dealloc;	// 0x33dccde1
- (id)description;	// 0x33dccf4d
- (void)executeBlockOnPrivateQueue:(id)queue;	// 0x33dd4b79
// declared property getter: - (id)failedPendingTransactionLogLocations;	// 0x33dd4d1d
- (void)filePresenter:(id)presenter wasNotifiedOfTransactionLogLocation:(id)transactionLogLocation;	// 0x33dcf5e9
// declared property getter: - (BOOL)importOnlyActiveStores;	// 0x33dd4ca9
// declared property getter: - (id)importQueue;	// 0x33dd4be9
// declared property getter: - (BOOL)isMonitoring;	// 0x33dd4c11
// declared property getter: - (id)localPeerID;	// 0x33dd4bfd
// declared property getter: - (id)logRestartTimer;	// 0x33dd4c3d
- (void)metadataInconsistencyDetectedForStore:(id)store;	// 0x33dd4561
- (void)operation:(id)operation failedWithError:(id)error;	// 0x33dd192d
- (void)operationDidFinish:(id)operation;	// 0x33dd1519
- (void)operationWasInterruptedDuringImport:(id)import;	// 0x33dd1ba9
// declared property getter: - (id)pendingTransactionLogLocations;	// 0x33dd4d09
- (void)postImportNotificationForStoreName:(id)storeName andLocalPeerID:(id)anId withUserInfo:(id)userInfo;	// 0x33dd132d
- (void)recoverFailedLogs;	// 0x33dcfbc5
- (void)recoveryOperation:(id)operation didReplaceLocalStoreFileWithBaseline:(id)baseline;	// 0x33dd40cd
- (void)recoveryOperation:(id)operation encounteredAnError:(id)error duringRecoveryOfBaseline:(id)baseline;	// 0x33dd4551
- (void)requestBaselineRollForStore:(id)store;	// 0x33dd3161
- (void)rollResponseOperation:(id)operation encounteredAnError:(id)error whileTryingToAdoptBaseline:(id)adoptBaseline;	// 0x33dd44c1
- (void)rollResponseOperation:(id)operation successfullyAdoptedBaseline:(id)baseline;	// 0x33dd42c1
- (void)scanOperation:(id)operation failedWithError:(id)error;	// 0x33dd2f49
- (BOOL)scanOperationFinished:(id)finished withDiscoveredLogLocation:(id)discoveredLogLocation error:(id *)error;	// 0x33dd2245
- (void)scheduleBaselineRecoveryOperationWithActiveBaselineOperation:(id)activeBaselineOperation;	// 0x33dd3ea9
- (void)scheduleBaselineRollResponseOperationForBaselineAtLocation:(id)location;	// 0x33dd3581
- (void)schedulePendingLogs;	// 0x33dcf8d1
- (void)scheduleRecoveryTimer;	// 0x33dd1c09
- (BOOL)scheduleTransactionLogOperations:(id)operations synchronous:(BOOL)synchronous error:(id *)error;	// 0x33dcee95
- (BOOL)scheduleUbiquityRootScan:(BOOL)scan withLocalPeerLogs:(BOOL)localPeerLogs error:(id *)error;	// 0x33dd1e41
// declared property getter: - (id)schedulingLock;	// 0x33dd4c69
// declared property setter: - (void)setAllowBaselineRoll:(BOOL)roll;	// 0x33dd4cf1
// declared property setter: - (void)setImportOnlyActiveStores:(BOOL)stores;	// 0x33dd4cc1
// declared property setter: - (void)setLogRestartTimer:(id)timer;	// 0x33dd4c51
// declared property setter: - (void)setThrottleNotifications:(BOOL)notifications;	// 0x33dd4c91
- (BOOL)shouldThrottleNotificationsWithOperation:(id)operation;	// 0x33dd1329
- (BOOL)startMonitor:(id *)monitor;	// 0x33dcf40d
- (void)stopMonitor;	// 0x33dcf545
// declared property getter: - (BOOL)throttleNotifications;	// 0x33dd4c79
- (void)ubiquityIdentityChanged:(id)changed;	// 0x33dd0ee5
// declared property getter: - (id)ubiquityRootLocation;	// 0x33dd4c29
@end

