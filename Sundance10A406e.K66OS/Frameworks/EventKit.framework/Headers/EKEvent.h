/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/EventKit.framework/EventKit
 */

#import "EventKit-Structs.h"
#import "EKCalendarItem.h"

@class NSString, EKCalendarDate, NSNumber, NSDate, EKParticipant;

@interface EKEvent : EKCalendarItem {
	EKCalendarDate *_occurrenceStartDate;	// 40 = 0x28
	EKCalendarDate *_occurrenceEndDate;	// 44 = 0x2c
	BOOL _occurrenceIsAllDay;	// 48 = 0x30
	EKCalendarDate *_originalOccurrenceStartDate;	// 52 = 0x34
	EKCalendarDate *_originalOccurrenceEndDate;	// 56 = 0x38
	NSNumber *_originalOccurrenceIsAllDay;	// 60 = 0x3c
}
@property(assign, nonatomic, getter=isAllDay) BOOL allDay;	// G=0x31370b21; S=0x3137ac89; 
@property(assign, nonatomic) int availability;	// G=0x31378a09; S=0x313b9f35; 
@property(readonly, assign, nonatomic) int birthdayPersonID;	// G=0x31370b31; 
@property(copy, nonatomic) NSDate *endDate;	// G=0x31371f95; S=0x3137b249; 
@property(readonly, assign, nonatomic) NSString *eventIdentifier;	// G=0x31376afd; 
@property(assign) unsigned invitationStatus;	// G=0x313b9fd5; S=0x313ba009; converted property
@property(readonly, assign, nonatomic) BOOL isDetached;	// G=0x31379e85; 
@property(assign) unsigned modifiedProperties;	// G=0x313b9b59; S=0x313b9b8d; converted property
@property(assign) BOOL needsOccurrenceCacheUpdate;	// G=0x313b9bd1; S=0x313b9bf5; converted property
@property(copy, nonatomic) EKCalendarDate *occurrenceEndDate;	// G=0x31371fbd; S=0x313727b9; @synthesize=_occurrenceEndDate
@property(assign, nonatomic) BOOL occurrenceIsAllDay;	// G=0x313bd819; S=0x3136eed5; @synthesize=_occurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *occurrenceStartDate;	// G=0x31371655; S=0x3136ed61; @synthesize=_occurrenceStartDate
@property(readonly, assign, nonatomic) EKParticipant *organizer;	// G=0x31372a91; 
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate;	// G=0x3137ac4d; S=0x3137b18d; @synthesize=_originalOccurrenceEndDate
@property(copy, nonatomic) NSNumber *originalOccurrenceIsAllDay;	// G=0x3137ac75; S=0x31379241; @synthesize=_originalOccurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate;	// G=0x3137ac29; S=0x3137b17d; @synthesize=_originalOccurrenceStartDate
@property(assign) int participationStatus;	// G=0x31372da5; S=0x313b9c39; converted property
@property(retain) id recurrenceRule;	// G=0x313b9e85; S=0x313b9ed1; converted property
@property(retain) id responseComment;	// G=0x313b9f9d; S=0x313b9fb9; converted property
@property(copy, nonatomic) NSDate *startDate;	// G=0x31371f75; S=0x3137af51; 
@property(readonly, assign, nonatomic) int status;	// G=0x31371abd; 
+ (id)eventWithEventStore:(id)eventStore;	// 0x3137b7c9
- (id)init;	// 0x313b9645
- (id)initWithEventStore:(id)eventStore;	// 0x31378b99
- (id)initWithPersistentObject:(id)persistentObject;	// 0x313b9681
- (id)initWithPersistentObject:(id)persistentObject occurrenceDate:(id)date;	// 0x3136eaa9
- (BOOL)_cancelWithSpan:(int)span error:(id *)error;	// 0x313bc9b9
- (BOOL)_checkStartDateConstraintAgainstDate:(XXStruct_lQVxyC)date timeZone:(id)zone error:(id *)error;	// 0x3137dd45
- (id)_dateForNextOccurrence;	// 0x313baaf1
- (void)_deleteThisOccurrence;	// 0x313bc031
- (BOOL)_deleteWithSpan:(int)span error:(id *)error;	// 0x313bbe91
- (void)_detachWithStartDate:(id)startDate newStartDate:(id)date future:(BOOL)future;	// 0x313bcd65
- (id)_effectiveTimeZone;	// 0x3137b19d
- (XXStruct_lQVxyC)_gregorianDateCorrectedForTimeZoneFromCalendarDate:(id)calendarDate orNSDate:(id)date;	// 0x313739cd
- (BOOL)_isAlarmAcknowledgedPropertyDirty;	// 0x3137d84d
- (BOOL)_isAllDay;	// 0x3136ed81
- (BOOL)_isInitialOccurrenceDate:(id)date;	// 0x313bcb41
- (BOOL)_occurrenceExistsOnDate:(double)date timeZone:(id)zone;	// 0x313bba85
- (int)_parentParticipationStatus;	// 0x313b9df5
- (id)_persistentEvent;	// 0x31370b59
- (void)_sendModifiedNote;	// 0x313b990d
- (BOOL)_shouldCancelInsteadOfDeleteWithSpan:(int)span;	// 0x313bbcd9
- (BOOL)_shouldDeclineInsteadOfDelete;	// 0x313bbdc5
- (BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(int)recurrenceInterval;	// 0x313bae59
- (BOOL)_validateDatesAndRecurrencesGivenSpan:(int)span error:(id *)error;	// 0x3137d94d
- (BOOL)_validateDurationConstrainedToRecurrenceInterval;	// 0x313bac5d
- (int)alarmCount;	// 0x313b9e5d
- (BOOL)allowsAlarmModifications;	// 0x313ba599
- (BOOL)allowsCalendarModifications;	// 0x313ba40d
- (BOOL)allowsRecurrenceModifications;	// 0x31379dfd
- (id)attachments;	// 0x31376f49
- (int)attendeeCount;	// 0x313b9e35
- (id)attendees;	// 0x31377621
// declared property getter: - (int)availability;	// 0x31378a09
// declared property getter: - (int)birthdayPersonID;	// 0x31370b31
- (id)birthdayTitleWithAddressBook:(void *)addressBook;	// 0x31370b85
- (BOOL)canBeRespondedTo;	// 0x313784f1
- (BOOL)canDetachSingleOccurrence;	// 0x313ba4a9
- (BOOL)canMoveToCalendar:(id)calendar fromCalendar:(id)calendar2 error:(id *)error;	// 0x313ba1d5
- (BOOL)canSetAvailability;	// 0x313789bd
- (void)clearInvitationStatus;	// 0x313ba04d
- (BOOL)commitWithSpan:(int)span error:(id *)error;	// 0x3137e0a1
- (id)committedValueForKey:(id)key;	// 0x31379659
- (int)compareStartDateWithEvent:(id)event;	// 0x3137b65d
- (BOOL)dateChanged;	// 0x313ba081
- (void)dealloc;	// 0x31376179
- (id)description;	// 0x313ba5e1
- (void)didCommit;	// 0x31382569
- (id)dirtyPropertiesToSkip;	// 0x313ba98d
- (double)duration;	// 0x313b9951
- (id)endCalendarDate;	// 0x31372d95
// declared property getter: - (id)endDate;	// 0x31371f95
- (XXStruct_lQVxyC)endDateGr;	// 0x31378841
- (XXStruct_lQVxyC)endDatePinnedForAllDay;	// 0x313b9ae5
// declared property getter: - (id)eventIdentifier;	// 0x31376afd
- (id)eventStore;	// 0x31371965
- (id)exportToICS;	// 0x313b97c5
- (id)externalId;	// 0x313ba51d
- (id)externalURI;	// 0x313b9695
- (id)externalURL;	// 0x313b96a5
- (BOOL)hasSelfAttendee;	// 0x313ba56d
- (unsigned)hash;	// 0x313715f9
- (id)initialEndDate;	// 0x313b9a05
- (id)initialStartDate;	// 0x313b99a9
// converted property getter: - (unsigned)invitationStatus;	// 0x313b9fd5
// declared property getter: - (BOOL)isAllDay;	// 0x31370b21
- (BOOL)isAllDayDirty;	// 0x313b984d
// declared property getter: - (BOOL)isDetached;	// 0x31379e85
- (BOOL)isDirtyIgnoringCalendar;	// 0x313b986d
- (BOOL)isEndDateDirty;	// 0x313b982d
- (BOOL)isEqual:(id)equal;	// 0x31371669
- (BOOL)isStartDateDirty;	// 0x313b980d
- (BOOL)isStatusDirty;	// 0x313b97ed
- (BOOL)isTentative;	// 0x313ba131
- (BOOL)locationChanged;	// 0x313ba105
// converted property getter: - (unsigned)modifiedProperties;	// 0x313b9b59
// converted property getter: - (BOOL)needsOccurrenceCacheUpdate;	// 0x313b9bd1
- (id)occurrenceDate;	// 0x31379dc5
// declared property getter: - (id)occurrenceEndDate;	// 0x31371fbd
// declared property getter: - (BOOL)occurrenceIsAllDay;	// 0x313bd819
// declared property getter: - (id)occurrenceStartDate;	// 0x31371655
// declared property getter: - (id)organizer;	// 0x31372a91
// declared property getter: - (id)originalOccurrenceEndDate;	// 0x3137ac4d
// declared property getter: - (id)originalOccurrenceIsAllDay;	// 0x3137ac75
// declared property getter: - (id)originalOccurrenceStartDate;	// 0x3137ac29
// converted property getter: - (int)participationStatus;	// 0x31372da5
- (int)pendingParticipationStatus;	// 0x313ba4f5
// converted property getter: - (id)recurrenceRule;	// 0x313b9e85
- (BOOL)refresh;	// 0x313ba721
- (BOOL)removeWithSpan:(int)span error:(id *)error;	// 0x313bcc2d
- (BOOL)requiresDetach;	// 0x3137cd25
// converted property getter: - (id)responseComment;	// 0x313b9f9d
- (BOOL)responseMustApplyToAll;	// 0x313ba481
- (void)revert;	// 0x313ba9e5
- (void)rollback;	// 0x3137a6f9
// declared property setter: - (void)setAllDay:(BOOL)day;	// 0x3137ac89
// declared property setter: - (void)setAvailability:(int)availability;	// 0x313b9f35
// declared property setter: - (void)setEndDate:(id)date;	// 0x3137b249
// converted property setter: - (void)setInvitationStatus:(unsigned)status;	// 0x313ba009
// converted property setter: - (void)setModifiedProperties:(unsigned)properties;	// 0x313b9b8d
// converted property setter: - (void)setNeedsOccurrenceCacheUpdate:(BOOL)update;	// 0x313b9bf5
// declared property setter: - (void)setOccurrenceEndDate:(id)date;	// 0x313727b9
// declared property setter: - (void)setOccurrenceIsAllDay:(BOOL)day;	// 0x3136eed5
// declared property setter: - (void)setOccurrenceStartDate:(id)date;	// 0x3136ed61
// declared property setter: - (void)setOriginalOccurrenceEndDate:(id)date;	// 0x3137b18d
// declared property setter: - (void)setOriginalOccurrenceIsAllDay:(id)day;	// 0x31379241
// declared property setter: - (void)setOriginalOccurrenceStartDate:(id)date;	// 0x3137b17d
// converted property setter: - (void)setParticipationStatus:(int)status;	// 0x313b9c39
// converted property setter: - (void)setRecurrenceRule:(id)rule;	// 0x313b9ed1
// converted property setter: - (void)setResponseComment:(id)comment;	// 0x313b9fb9
// declared property setter: - (void)setStartDate:(id)date;	// 0x3137af51
- (void)setTimeZone:(id)zone;	// 0x31379251
- (id)startCalendarDate;	// 0x31370b11
// declared property getter: - (id)startDate;	// 0x31371f75
- (XXStruct_lQVxyC)startDateGr;	// 0x31373971
- (XXStruct_lQVxyC)startDatePinnedForAllDay;	// 0x313b9a7d
// declared property getter: - (int)status;	// 0x31371abd
- (BOOL)timeChanged;	// 0x313ba0ad
- (BOOL)titleChanged;	// 0x313ba0d9
- (id)uniqueId;	// 0x313ba545
- (BOOL)validateWithSpan:(int)span error:(id *)error;	// 0x3137cf45
@end

