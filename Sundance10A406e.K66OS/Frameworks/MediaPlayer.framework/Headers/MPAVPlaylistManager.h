/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

#import "MPAVQueuePlayerFeederSource.h"
#import "MediaPlayer-Structs.h"
#import <NSObject.h> // Unknown library

@class NSString, MPAVQueuePlayerFeeder, MPQueuePlayer, MPAVItem;
@protocol MPAVPlaylistFeeder;

@interface MPAVPlaylistManager : NSObject <MPAVQueuePlayerFeederSource> {
	NSString *_audioSessionModeOverride;	// 4 = 0x4
	MPAVItem *_currentItem;	// 8 = 0x8
	MPAVQueuePlayerFeeder *_feeder;	// 12 = 0xc
	BOOL _goToTargetIndex;	// 16 = 0x10
	int _isChangingPlaylistFeeder;	// 20 = 0x14
	int _lastSelectionDirection;	// 24 = 0x18
	MPQueuePlayer *_player;	// 28 = 0x1c
	id<MPAVPlaylistFeeder> _playlistFeeder;	// 32 = 0x20
	int _repeatMode;	// 36 = 0x24
	int _retainCount;	// 40 = 0x28
	int _targetIndex;	// 44 = 0x2c
	BOOL _updatedAudioSessionMode;	// 48 = 0x30
}
@property(retain, nonatomic) NSString *audioSessionModeOverride;	// G=0x35d51979; S=0x35d51989; @synthesize=_audioSessionModeOverride
@property(readonly, assign, nonatomic) BOOL canChangePlaylistFeeder;	// G=0x35d51041; 
@property(readonly, assign) int currentIndex;	// G=0x35d50f65; 
@property(readonly, assign) MPAVItem *currentItem;	// G=0x35d51999; @synthesize=_currentItem
@property(assign, nonatomic) BOOL forceSynchronousQueueFilling;	// G=0x35d50a65; S=0x35d50aed; 
@property(readonly, assign, nonatomic) BOOL isChangingPlaylistFeeder;	// G=0x35d51029; 
@property(readonly, assign) int lastSelectionDirection;	// G=0x35d519d1; @synthesize=_lastSelectionDirection
@property(assign, nonatomic) BOOL managesSystemDownloads;	// G=0x35d50a89; S=0x35d50b0d; 
@property(assign, nonatomic) unsigned maxQueueDepth;	// G=0x35d50aad; S=0x35d50b2d; 
@property(assign, nonatomic) unsigned minQueueDepth;	// G=0x35d50acd; S=0x35d50b4d; 
@property(readonly, assign) MPQueuePlayer *player;	// G=0x35d519ad; @synthesize=_player
@property(retain, nonatomic) id<MPAVPlaylistFeeder> playlistFeeder;	// G=0x35d519c1; S=0x35d51059; @synthesize=_playlistFeeder
@property(assign) int repeatMode;	// G=0x35d50f99; S=0x35d50fa9; 
- (id)init;	// 0x35d50249
- (void)_assetCancelNotification:(id)notification;	// 0x35d50731
- (id)_audioSessionModeForMediaItem:(id)mediaItem;	// 0x35d5176d
- (id)_feeder;	// 0x35d5175d
- (id)_feederItemForIndex:(int)index;	// 0x35d50bcd
- (BOOL)_isDeallocating;	// 0x35d5021d
- (id)_itemToFollowItemIndex:(int)followItemIndex skipUnavailableContent:(BOOL)content;	// 0x35d51555
- (void)_mediaLibraryDisplayValuesDidChangeNotification:(id)_mediaLibraryDisplayValues;	// 0x35d50919
- (void)_networkTypeDidChangeNotification:(id)_networkType;	// 0x35d50995
- (int)_nextItemIndex:(int)index repeatMode:(int)mode;	// 0x35d51465
- (int)_prepareToQueuePlaybackIndex:(int)queuePlaybackIndex selectionDirection:(int)direction;	// 0x35d50cf5
- (void)_reloadQueuedItemsIfPathBecameAvailable;	// 0x35d511e1
- (BOOL)_tryRetain;	// 0x35d501cd
- (void)_updateAudioSessionMode;	// 0x35d517c1
// declared property getter: - (id)audioSessionModeOverride;	// 0x35d51979
// declared property getter: - (BOOL)canChangePlaylistFeeder;	// 0x35d51041
- (void)contentInvalidated;	// 0x35d51405
- (void)contentInvalidatedWithCurrentItemMovedToIndex:(unsigned)index;	// 0x35d513bd
- (void)contentInvalidatedWithNewIndex:(unsigned)newIndex;	// 0x35d51425
- (void)contentsDidChangeByRemovingRange:(NSRange)contents;	// 0x35d512f5
// declared property getter: - (int)currentIndex;	// 0x35d50f65
// declared property getter: - (id)currentItem;	// 0x35d51999
- (void)dealloc;	// 0x35d50439
// declared property getter: - (BOOL)forceSynchronousQueueFilling;	// 0x35d50a65
// declared property getter: - (BOOL)isChangingPlaylistFeeder;	// 0x35d51029
// declared property getter: - (int)lastSelectionDirection;	// 0x35d519d1
// declared property getter: - (BOOL)managesSystemDownloads;	// 0x35d50a89
// declared property getter: - (unsigned)maxQueueDepth;	// 0x35d50aad
// declared property getter: - (unsigned)minQueueDepth;	// 0x35d50acd
- (void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void *)context;	// 0x35d505b9
// declared property getter: - (id)player;	// 0x35d519ad
// declared property getter: - (id)playlistFeeder;	// 0x35d519c1
- (id)queuePlayerFeeder:(id)feeder itemToFollowItem:(id)followItem;	// 0x35d51639
- (BOOL)queuePlayerFeeder:(id)feeder willInsertItem:(id)item;	// 0x35d51675
- (void)queuePlayerFeeder:(id)feeder willRemoveItem:(id)item;	// 0x35d51671
- (void)queuePlayerFeederDidUpdateQueue:(id)queuePlayerFeeder queuedItems:(id)items dequeuedItems:(id)items3;	// 0x35d51679
- (void)queuePlayerFeederFailedToQueueAnyItems:(id)queueAnyItems;	// 0x35d516f1
- (oneway void)release;	// 0x35d50145
// declared property getter: - (int)repeatMode;	// 0x35d50f99
- (id)retain;	// 0x35d5010d
- (unsigned)retainCount;	// 0x35d501b9
// declared property setter: - (void)setAudioSessionModeOverride:(id)override;	// 0x35d51989
- (void)setCurrentIndex:(int)index selectionDirection:(int)direction;	// 0x35d50e89
// declared property setter: - (void)setForceSynchronousQueueFilling:(BOOL)filling;	// 0x35d50aed
// declared property setter: - (void)setManagesSystemDownloads:(BOOL)downloads;	// 0x35d50b0d
// declared property setter: - (void)setMaxQueueDepth:(unsigned)depth;	// 0x35d50b2d
// declared property setter: - (void)setMinQueueDepth:(unsigned)depth;	// 0x35d50b4d
// declared property setter: - (void)setPlaylistFeeder:(id)feeder;	// 0x35d51059
- (BOOL)setPlaylistFeeder:(id)feeder startIndex:(int)index;	// 0x35d51149
// declared property setter: - (void)setRepeatMode:(int)mode;	// 0x35d50fa9
- (void)updateForSoundCheckDefaultsChange;	// 0x35d50b6d
@end

