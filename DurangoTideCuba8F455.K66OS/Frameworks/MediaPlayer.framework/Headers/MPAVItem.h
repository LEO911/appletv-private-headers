/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

#import <AVItem.h> // Unknown library
#import "MediaPlayer-Structs.h"

@class NSMutableArray, MPQueueFeeder, NSURL, NSString, NSArray, NSData, MPAlternateTracks;

@interface MPAVItem : AVItem {
	MPQueueFeeder *_feeder;	// 8 = 0x8
	NSMutableArray *_chapterTimeMarkers;	// 12 = 0xc
	NSMutableArray *_artworkTimeMarkers;	// 16 = 0x10
	NSMutableArray *_urlTimeMarkers;	// 20 = 0x14
	MPAlternateTracks *_alternateTracks;	// 24 = 0x18
	unsigned _type;	// 28 = 0x1c
	double _cachedDuration;	// 32 = 0x20
	double _cachedPlayableDuration;	// 40 = 0x28
	float _defaultPlaybackRate;	// 48 = 0x30
	NSString *_videoID;	// 52 = 0x34
	unsigned _advancedDuringPlayback : 1;	// 56 = 0x38
	unsigned _handledFinishTime : 1;	// 56 = 0x38
	unsigned _hasPlayedThisSession : 1;	// 56 = 0x38
	unsigned _wasCountedAsSkipped : 1;	// 56 = 0x38
	unsigned _isStreamable : 2;	// 56 = 0x38
	unsigned _useCachedPlayableDuration : 1;	// 56 = 0x38
	unsigned _watchingAttributes : 1;	// 56 = 0x38
	unsigned _videoDisabled : 1;	// 57 = 0x39
	unsigned _lyricsAvailable : 1;	// 57 = 0x39
	unsigned _delayedInvalidateCachedPlayedDurationScheduled : 1;	// 57 = 0x39
}
@property(readonly, retain, nonatomic) NSString *album;	// G=0x335d4065; 
@property(readonly, retain, nonatomic) NSString *albumArtist;	// G=0x335d406d; 
@property(readonly, assign, nonatomic) unsigned albumTrackCount;	// G=0x335d4075; 
@property(readonly, assign, nonatomic) unsigned albumTrackNumber;	// G=0x335d4071; 
@property(readonly, retain, nonatomic) MPAlternateTracks *alternateTracks;	// G=0x335d4259; @synthesize=_alternateTracks
@property(readonly, retain, nonatomic) NSString *artist;	// G=0x335d4069; 
@property(readonly, retain, nonatomic) NSData *artworkImageData;	// G=0x335d4079; 
@property(readonly, retain, nonatomic) NSString *artworkMIMEType;	// G=0x335d407d; 
@property(readonly, retain, nonatomic) NSArray *artworkTimeMarkers;	// G=0x335d4a11; 
@property(readonly, retain, nonatomic) NSArray *chapterTimeMarkers;	// G=0x335d4a35; 
@property(readonly, retain, nonatomic) NSString *composer;	// G=0x335d4081; 
@property(readonly, assign, nonatomic) unsigned countForQueueFeeder;	// G=0x335d507d; 
@property(readonly, assign, nonatomic) double currentTimeDisplayOverride;	// G=0x335d4095; 
@property(assign, nonatomic) float defaultPlaybackRate;	// G=0x335d4219; S=0x335d4229; @synthesize=_defaultPlaybackRate
@property(readonly, assign, nonatomic) unsigned discCount;	// G=0x335d4089; 
@property(readonly, assign, nonatomic) unsigned discNumber;	// G=0x335d4085; 
@property(readonly, retain, nonatomic) NSString *displayableText;	// G=0x335d5029; 
@property(readonly, assign, nonatomic) BOOL displayableTextLoaded;	// G=0x335d503d; 
@property(readonly, assign, nonatomic) double durationFromExternalMetadata;	// G=0x335d4191; 
@property(readonly, assign, nonatomic) double durationIfAvailable;	// G=0x335d65d1; 
@property(readonly, assign, nonatomic) BOOL durationIsValid;	// G=0x335d6569; 
@property(readonly, assign, nonatomic) BOOL externalProtectionEnabled;	// G=0x335d45ed; 
@property(assign, nonatomic) MPQueueFeeder *feeder;	// G=0x335d4239; S=0x335d4249; @synthesize=_feeder
@property(readonly, retain, nonatomic) NSString *genre;	// G=0x335d4091; 
@property(readonly, assign, nonatomic) BOOL hasDataForItemArtwork;	// G=0x335d409d; 
@property(readonly, assign, nonatomic) BOOL hasDisplayableText;	// G=0x335d40a1; 
@property(assign, nonatomic) BOOL hasPlayedThisSession;	// G=0x335d40a5; S=0x335d40d5; 
@property(readonly, assign, nonatomic) unsigned indexInQueueFeeder;	// G=0x335d4f79; 
@property(readonly, retain, nonatomic) NSString *lyrics;	// G=0x335d4ff1; 
@property(readonly, retain, nonatomic) NSString *mainTitle;	// G=0x335d40cd; 
@property(readonly, assign, nonatomic) unsigned long long persistentID;	// G=0x335d417d; 
@property(readonly, assign, nonatomic) double playableDuration;	// G=0x335d44b9; 
@property(readonly, assign, nonatomic) double playableDurationIfAvailable;	// G=0x335d66ed; 
@property(assign, nonatomic) double playbackCheckpointCurrentTime;	// G=0x335d3fe5; S=0x335d3fed; 
@property(readonly, retain, nonatomic) NSURL *podcastURL;	// G=0x335d40d1; 
@property(readonly, assign, nonatomic) NSURL *protectedContentSupportStorageURL;	// G=0x335d418d; 
@property(readonly, assign, nonatomic) BOOL requiresExternalProtection;	// G=0x335d4649; 
@property(readonly, assign, nonatomic, getter=isStreamable) BOOL streamable;	// G=0x335d4ef9; 
@property(readonly, assign, nonatomic) double timeOfSeekableEnd;	// G=0x335d55a1; 
@property(readonly, assign, nonatomic) double timeOfSeekableStart;	// G=0x335d56a9; 
@property(readonly, assign, nonatomic) unsigned type;	// G=0x335d4169; 
@property(readonly, retain, nonatomic) NSArray *urlTimeMarkers;	// G=0x335d49dd; 
@property(readonly, assign, nonatomic) BOOL useEmbeddedChapterData;	// G=0x335d4131; 
@property(readonly, assign, nonatomic) float userRating;	// G=0x335d4179; 
@property(assign) BOOL userSkippedPlayback;	// G=0x335d404d; S=0x335d402d; converted property
@property(assign, nonatomic, getter=isVideoDisabled) BOOL videoDisabled;	// G=0x335d40b9; S=0x335d4109; 
@property(copy, nonatomic) NSString *videoID;	// G=0x335d4209; S=0x335d64bd; @synthesize=_videoID
@property(readonly, assign, nonatomic) BOOL wantsSubtitles;	// G=0x335d4189; 
+ (unsigned)defaultScaleMode;	// 0x335d3f65
+ (void)setDefaultScaleMode:(unsigned)mode;	// 0x335d3f71
- (id)init;	// 0x335d53ad
- (id)initWithPath:(id)path error:(id *)error;	// 0x335d536d
- (void)_blockingloadTimeMarkersForMarkerType:(int)markerType;	// 0x335d4abd
- (void)_checkAllowsBlockingDurationCall;	// 0x335d4ce1
- (void)_commonInit;	// 0x335d41c5
- (void)_delayedInvalidateCachedPlayedDuration;	// 0x335d419d
- (double)_durationFromExternalMetadataIfAvailable;	// 0x335d6589
- (BOOL)_insertEmbeddedTimeMarkerWithInfo:(id)info markerType:(int)type;	// 0x335d473d
- (void)_itemAttributeAvailableNotification:(id)notification;	// 0x335d42c5
- (id *)_ivarAddrForMarkerType:(int)markerType;	// 0x335d4135
- (id)_mutableTimeMarkersForMarkerType:(int)markerType;	// 0x335d4a59
- (id)_newBlockingLoadedTimeMarkersForMarkerType:(int)markerType;	// 0x335d5a95
- (void)_realoadEmbeddedTimeMarkers;	// 0x335d4df9
- (void)_releaseAllTimeMarkers;	// 0x335d5305
- (void)_updateForNaturalSizeChange;	// 0x335d6725
// declared property getter: - (id)album;	// 0x335d4065
// declared property getter: - (id)albumArtist;	// 0x335d406d
// declared property getter: - (unsigned)albumTrackCount;	// 0x335d4075
// declared property getter: - (unsigned)albumTrackNumber;	// 0x335d4071
- (BOOL)allowAutoChangingScaleModeToFill;	// 0x335d3f61
// declared property getter: - (id)alternateTracks;	// 0x335d4259
- (unsigned)alternatesCountForTypes:(unsigned)types;	// 0x335d4fa9
// declared property getter: - (id)artist;	// 0x335d4069
// declared property getter: - (id)artworkImageData;	// 0x335d4079
// declared property getter: - (id)artworkMIMEType;	// 0x335d407d
- (id)artworkTimeMarkerForTime:(double)time;	// 0x335d5885
// declared property getter: - (id)artworkTimeMarkers;	// 0x335d4a11
- (double)avDuration;	// 0x335d64e9
- (id)blockForDirectAVControllerNotificationReferencingItem:(id)directAVControllerNotificationReferencingItem;	// 0x335d4269
- (id)blockingAttributeForKey:(id)key;	// 0x335d4be9
- (id)chapterTimeMarkerForTime:(double)time;	// 0x335d598d
// declared property getter: - (id)chapterTimeMarkers;	// 0x335d4a35
// declared property getter: - (id)composer;	// 0x335d4081
// declared property getter: - (unsigned)countForQueueFeeder;	// 0x335d507d
// declared property getter: - (double)currentTimeDisplayOverride;	// 0x335d4095
- (void)dealloc;	// 0x335d5201
// declared property getter: - (float)defaultPlaybackRate;	// 0x335d4219
// declared property getter: - (unsigned)discCount;	// 0x335d4089
// declared property getter: - (unsigned)discNumber;	// 0x335d4085
// declared property getter: - (id)displayableText;	// 0x335d5029
// declared property getter: - (BOOL)displayableTextLoaded;	// 0x335d503d
- (double)duration;	// 0x335d51c5
// declared property getter: - (double)durationFromExternalMetadata;	// 0x335d4191
// declared property getter: - (double)durationIfAvailable;	// 0x335d65d1
// declared property getter: - (BOOL)durationIsValid;	// 0x335d6569
// declared property getter: - (BOOL)externalProtectionEnabled;	// 0x335d45ed
// declared property getter: - (id)feeder;	// 0x335d4239
- (void)flushNowPlayingCaches;	// 0x335d51d9
- (id)formatDetailsForTracks;	// 0x335d5155
// declared property getter: - (id)genre;	// 0x335d4091
- (BOOL)hasAlternatesForTypes:(unsigned)types;	// 0x335d4fcd
// declared property getter: - (BOOL)hasDataForItemArtwork;	// 0x335d409d
// declared property getter: - (BOOL)hasDisplayableText;	// 0x335d40a1
// declared property getter: - (BOOL)hasPlayedThisSession;	// 0x335d40a5
- (id)imageCacheRequestWithSize:(CGSize)size time:(double)time;	// 0x335d4b4d
// declared property getter: - (unsigned)indexInQueueFeeder;	// 0x335d4f79
- (BOOL)insertEmbeddedTimeMarkerWithInfo:(id)info markerType:(int)type;	// 0x335d5ddd
- (BOOL)isPlaceholderForItem:(id)item;	// 0x335d408d
// declared property getter: - (BOOL)isStreamable;	// 0x335d4ef9
- (BOOL)isSupportedDefaultPlaybackSpeed:(unsigned)speed;	// 0x335d3f85
// declared property getter: - (BOOL)isVideoDisabled;	// 0x335d40b9
- (void)loadFakeURLTimeMarkersIfNecessary;	// 0x335d5d61
- (id)localizedPositionInPlaylistString;	// 0x335d4679
// declared property getter: - (id)lyrics;	// 0x335d4ff1
// declared property getter: - (id)mainTitle;	// 0x335d40cd
- (id)newTimeMarkerWithInfo:(id)info markerType:(int)type;	// 0x335d53ed
- (id)newURLTimeMarkersByFakingWithChapterMarkers:(id)chapterMarkers;	// 0x335d5eb9
- (void)notePlaybackFinishedByHittingEnd;	// 0x335d3fd1
// declared property getter: - (unsigned long long)persistentID;	// 0x335d417d
// declared property getter: - (double)playableDuration;	// 0x335d44b9
// declared property getter: - (double)playableDurationIfAvailable;	// 0x335d66ed
// declared property getter: - (double)playbackCheckpointCurrentTime;	// 0x335d3fe5
- (float)playbackRateForLevel:(unsigned)level direction:(int)direction paused:(BOOL)paused;	// 0x335d4e75
// declared property getter: - (id)podcastURL;	// 0x335d40d1
- (void)postDurationDidChange;	// 0x335d50a1
// declared property getter: - (id)protectedContentSupportStorageURL;	// 0x335d418d
// declared property getter: - (BOOL)requiresExternalProtection;	// 0x335d4649
- (void)resetBookkeeping;	// 0x335d3f91
- (float)scanIntervalForLevel:(unsigned)level paused:(BOOL)paused;	// 0x335d4e25
- (void)setAlternateAudioTrackID:(unsigned)anId;	// 0x335d3fc9
// declared property setter: - (void)setDefaultPlaybackRate:(float)rate;	// 0x335d4229
// declared property setter: - (void)setFeeder:(id)feeder;	// 0x335d4249
// declared property setter: - (void)setHasPlayedThisSession:(BOOL)session;	// 0x335d40d5
- (void)setOverrideDuration:(double)duration;	// 0x335d40f5
// declared property setter: - (void)setPlaybackCheckpointCurrentTime:(double)time;	// 0x335d3fed
- (void)setPlaybackFinishedTime:(double)time;	// 0x335d3ff1
- (void)setPlaybackStoppedTime:(double)time;	// 0x335d3fcd
- (void)setRating:(float)rating;	// 0x335d4005
- (void)setSubtitleTrackID:(unsigned)anId;	// 0x335d4009
- (void)setUserAdvancedDuringPlayback:(BOOL)playback;	// 0x335d400d
- (void)setUserEnabledSubtitles:(BOOL)subtitles;	// 0x335d4029
// converted property setter: - (void)setUserSkippedPlayback:(BOOL)playback;	// 0x335d402d
// declared property setter: - (void)setVideoDisabled:(BOOL)disabled;	// 0x335d4109
// declared property setter: - (void)setVideoID:(id)anId;	// 0x335d64bd
- (void)setupPlaybackInfo;	// 0x335d50d9
// declared property getter: - (double)timeOfSeekableEnd;	// 0x335d55a1
// declared property getter: - (double)timeOfSeekableStart;	// 0x335d56a9
- (id)titlesForTime:(double)time;	// 0x335d412d
// declared property getter: - (unsigned)type;	// 0x335d4169
- (void)updateAttributesForDefaultsChange:(id)defaultsChange;	// 0x335d4061
- (id)urlTimeMarkerForTime:(double)time;	// 0x335d577d
// declared property getter: - (id)urlTimeMarkers;	// 0x335d49dd
- (BOOL)useAsyncEmbeddedChapterDataLoading;	// 0x335d4b35
- (BOOL)useBlockingEmbeddedChapterDataLoading;	// 0x335d4b15
// declared property getter: - (BOOL)useEmbeddedChapterData;	// 0x335d4131
// declared property getter: - (float)userRating;	// 0x335d4179
// converted property getter: - (BOOL)userSkippedPlayback;	// 0x335d404d
// declared property getter: - (id)videoID;	// 0x335d4209
// declared property getter: - (BOOL)wantsSubtitles;	// 0x335d4189
@end

