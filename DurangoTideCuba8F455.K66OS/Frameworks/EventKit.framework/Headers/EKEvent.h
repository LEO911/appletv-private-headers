/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/EventKit.framework/EventKit
 */

#import "EventKit-Structs.h"
#import <NSObject.h> // Unknown library

@class NSNumber, EKRecurrenceRule, NSDate, EKParticipant, NSURL, EKEventStore, NSMutableArray, EKCalendar, NSTimeZone, NSArray, NSString;

@interface EKEvent : NSObject {
@private
	EKEventStore *_store;	// 4 = 0x4
	void *_event;	// 8 = 0x8
	NSDate *_occurrenceDate;	// 12 = 0xc
	NSString *_eventId;	// 16 = 0x10
	NSNumber *_calendarId;	// 20 = 0x14
	NSDate *_dateStamp;	// 24 = 0x18
	NSURL *_url;	// 28 = 0x1c
	BOOL _allDay;	// 32 = 0x20
	BOOL _detached;	// 33 = 0x21
	BOOL _unread;	// 34 = 0x22
	NSString *_title;	// 36 = 0x24
	NSString *_location;	// 40 = 0x28
	NSString *_notes;	// 44 = 0x2c
	NSMutableArray *_alarms;	// 48 = 0x30
	NSMutableArray *_attendees;	// 52 = 0x34
	EKParticipant *_organizer;	// 56 = 0x38
	NSDate *_startDate;	// 60 = 0x3c
	NSDate *_endDate;	// 64 = 0x40
	double _duration;	// 68 = 0x44
	EKCalendar *_calendar;	// 76 = 0x4c
	int _status;	// 80 = 0x50
	int _partStatus;	// 84 = 0x54
	int _availability;	// 88 = 0x58
	NSString *_responseComment;	// 92 = 0x5c
	NSTimeZone *_timeZone;	// 96 = 0x60
	NSDate *_originalStartDate;	// 100 = 0x64
	NSArray *_exceptionDates;	// 104 = 0x68
	NSArray *_recurrenceRules;	// 108 = 0x6c
	int _birthdayId;	// 112 = 0x70
	unsigned long long _loadFlags;	// 116 = 0x74
	unsigned long long _dirtyFlags;	// 124 = 0x7c
}
@property(retain) id URL;	// G=0x32e7cf01; S=0x32e7bf69; converted property
@property(readonly, assign, nonatomic) NSDate *_startDate;	// G=0x32e47d29; 
@property(copy, nonatomic) NSArray *alarms;	// G=0x32e4d0ed; S=0x32e7ba59; 
@property(assign, nonatomic, getter=isAllDay) BOOL allDay;	// G=0x32e47b21; S=0x32e4d745; 
@property(readonly, assign, nonatomic) NSArray *attendees;	// G=0x32e50181; 
@property(assign, nonatomic) int availability;	// G=0x32e7d73d; S=0x32e7b721; 
@property(readonly, assign) int birthdayId;	// G=0x32e7d65d; converted property
@property(retain, nonatomic) EKCalendar *calendar;	// G=0x32e481e1; S=0x32e4c0c9; 
@property(readonly, assign) double duration;	// G=0x32e48001; converted property
@property(copy, nonatomic) NSDate *endDate;	// G=0x32e47edd; S=0x32e4bcf1; 
@property(readonly, assign, nonatomic) NSString *eventIdentifier;	// G=0x32e4ba51; 
@property(readonly, retain) NSArray *exceptionDates;	// G=0x32e7d8f9; converted property
@property(readonly, assign, nonatomic) BOOL isDetached;	// G=0x32e4ca51; 
@property(readonly, assign, nonatomic) NSDate *lastModifiedDate;	// G=0x32e7bdd9; 
@property(copy, nonatomic) NSString *location;	// G=0x32e495fd; S=0x32e7bd39; 
@property(copy, nonatomic) NSString *notes;	// G=0x32e4cfa1; S=0x32e7c009; 
@property(readonly, retain) NSDate *occurrenceDate;	// G=0x32e4c7f5; converted property
@property(readonly, assign, nonatomic) EKParticipant *organizer;	// G=0x32e49a1d; 
@property(assign) int participationStatus;	// G=0x32e4980d; S=0x32e7b7f5; converted property
@property(retain, nonatomic) EKRecurrenceRule *recurrenceRule;	// G=0x32e4c9d1; S=0x32e7b895; 
@property(retain) NSString *responseComment;	// G=0x32e7d815; S=0x32e7b695; converted property
@property(copy, nonatomic) NSDate *startDate;	// G=0x32e481b1; S=0x32e4bba5; 
@property(readonly, assign, nonatomic) int status;	// G=0x32e49cf9; 
@property(retain) EKEventStore *store;	// G=0x32e4be11; S=0x32e7c489; converted property
@property(retain) NSTimeZone *timeZone;	// G=0x32e4ba81; S=0x32e4b881; converted property
@property(copy, nonatomic) NSString *title;	// G=0x32e493c5; S=0x32e7be51; 
@property(assign, getter=isUnread) BOOL unread;	// G=0x32e506a1; S=0x32e7b799; converted property
+ (void)addEvent:(id)event toStore:(id)store;	// 0x32e478e5
+ (void)daemonRestarted;	// 0x32e80f21
+ (id)eventWithEventStore:(id)eventStore;	// 0x32e4b815
+ (void)removeEvent:(id)event fromStore:(id)store;	// 0x32e4a6e9
+ (void)storeClosed:(id)closed;	// 0x32e80e31
+ (void)storeOpened:(id)opened;	// 0x32e453b9
- (id)init;	// 0x32e7c909
- (id)initWithCoder:(id)coder;	// 0x32e7c93d
- (id)initWithEventStore:(id)eventStore;	// 0x32e4d701
- (id)initWithEventStore:(id)eventStore event:(void *)event occurrenceDate:(id)date;	// 0x32e4b855
- (id)initWithEventStore:(id)eventStore event:(void *)event occurrenceDate:(id)date eventIdentifier:(id)identifier;	// 0x32e47609
// converted property getter: - (id)URL;	// 0x32e7cf01
- (id)_alarms;	// 0x32e4d11d
- (BOOL)_areAlarmsDirty;	// 0x32e7d499
- (BOOL)_areRecurrenceRulesDirty;	// 0x32e7d3b9
- (id)_attendees;	// 0x32e4cb51
- (id)_canMoveToCalendar:(id)calendar;	// 0x32e7c0ad
- (BOOL)_checkStartDateConstraintAgainstDate:(XXStruct_fhKmAA)date error:(id *)error;	// 0x32e80d5d
- (void)_clearCachedData;	// 0x32e4a521
- (BOOL)_commitAlarms:(id *)alarms;	// 0x32e7f909
- (BOOL)_commitAttendees:(id *)attendees;	// 0x32e7fa95
- (BOOL)_commitRecurrenceRule:(id *)rule;	// 0x32e7f7b1
- (void)_disassociate;	// 0x32e7cc45
- (void)_loadPropertyIfNeeded:(int)needed loader:(id)loader;	// 0x32e4943d
- (BOOL)_occurrenceExistsOnDate:(double)date;	// 0x32e7fff5
- (void)_reconnectCalendar;	// 0x32e7c425
- (void)_reconnectEvent;	// 0x32e7ce99
- (void)_reconnectToServer;	// 0x32e7c375
- (id)_recurrenceRules;	// 0x32e4c6a9
- (void)_sendModifiedNote;	// 0x32e4bb6d
- (void)_setStoreInternal:(id)internal;	// 0x32e47811
// declared property getter: - (id)_startDate;	// 0x32e47d29
- (void)_storeClosed;	// 0x32e7c3ad
- (BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(int)recurrenceInterval;	// 0x32e801e9
- (BOOL)_validateDatesAndRecurrencesGivenSpan:(int)span error:(id *)error;	// 0x32e7fb69
- (BOOL)_validateDurationConstrainedToRecurrenceInterval;	// 0x32e7fe75
- (void)addAlarm:(id)alarm;	// 0x32e7b9d5
- (int)alarmCount;	// 0x32e4d721
// declared property getter: - (id)alarms;	// 0x32e4d0ed
- (id)allRecurrenceRules;	// 0x32e7b865
- (int)attendeeCount;	// 0x32e4cb2d
// declared property getter: - (id)attendees;	// 0x32e50181
// declared property getter: - (int)availability;	// 0x32e7d73d
// converted property getter: - (int)birthdayId;	// 0x32e7d65d
- (id)birthdayTitleWithAddressBook:(void *)addressBook;	// 0x32e7bef1
// declared property getter: - (id)calendar;	// 0x32e481e1
- (BOOL)canAddAttendees;	// 0x32e4c415
- (BOOL)canAddRecurrence;	// 0x32e4ca11
- (BOOL)canBeRespondedTo;	// 0x32e50551
- (BOOL)canDetachSingleOccurrence;	// 0x32e7b611
- (BOOL)canSetAlarms;	// 0x32e7b521
- (BOOL)canSetAvailability;	// 0x32e7b5cd
- (void)clearUnreadState;	// 0x32e7b331
- (BOOL)commit:(int)commit error:(id *)error;	// 0x32e7e81d
- (int)compareStartDateWithEvent:(id)event;	// 0x32e47ced
- (id)copyState;	// 0x32e4d489
- (void)dealloc;	// 0x32e4a475
- (id)description;	// 0x32e7b3a5
- (id)detachedEvents;	// 0x32e7dae5
// converted property getter: - (double)duration;	// 0x32e48001
- (void)encodeWithCoder:(id)coder;	// 0x32e7c4e1
// declared property getter: - (id)endDate;	// 0x32e47edd
- (XXStruct_fhKmAA)endDateGr;	// 0x32e7d251
- (XXStruct_fhKmAA)endDatePinnedForAllDay;	// 0x32e7d309
// declared property getter: - (id)eventIdentifier;	// 0x32e4ba51
// converted property getter: - (id)exceptionDates;	// 0x32e7d8f9
- (id)exportToICS;	// 0x32e7ce15
- (id)externalId;	// 0x32e7dc3d
- (id)externalURL;	// 0x32e7ccb5
- (BOOL)hasActionWithExternalAndFolderID;	// 0x32e7dcd5
- (BOOL)hasAlarm;	// 0x32e7bbe5
- (BOOL)hasSelfAttendee;	// 0x32e7dd19
- (id)initialEndDate;	// 0x32e7bca9
- (id)initialStartDate;	// 0x32e7d1dd
// declared property getter: - (BOOL)isAllDay;	// 0x32e47b21
// declared property getter: - (BOOL)isDetached;	// 0x32e4ca51
- (BOOL)isDirty;	// 0x32e4d965
- (BOOL)isDirtyIgnoringCalendar;	// 0x32e7c22d
- (BOOL)isEditable;	// 0x32e4b989
- (BOOL)isEqual:(id)equal;	// 0x32e7c299
- (BOOL)isFloating;	// 0x32e7bd1d
- (BOOL)isInvite;	// 0x32e499cd
- (BOOL)isRecurring;	// 0x32e7b955
- (BOOL)isStatusDirty;	// 0x32e7b311
// converted property getter: - (BOOL)isUnread;	// 0x32e506a1
// declared property getter: - (id)lastModifiedDate;	// 0x32e7bdd9
// declared property getter: - (id)location;	// 0x32e495fd
- (id)nextAlarmDate;	// 0x32e7bb09
// declared property getter: - (id)notes;	// 0x32e4cfa1
- (void *)objectRef;	// 0x32e7b301
// converted property getter: - (id)occurrenceDate;	// 0x32e4c7f5
// declared property getter: - (id)organizer;	// 0x32e49a1d
- (id)originalEvent;	// 0x32e7da5d
// converted property getter: - (int)participationStatus;	// 0x32e4980d
- (int)pendingParticipationStatus;	// 0x32e7dbf9
// declared property getter: - (id)recurrenceRule;	// 0x32e4c9d1
- (int)recurrenceRuleCount;	// 0x32e4c685
- (int)recurrenceRuleCountInDB;	// 0x32e7d611
- (BOOL)refresh;	// 0x32e7dd61
- (BOOL)remove:(int)remove error:(id *)error;	// 0x32e7f699
- (void)removeAlarm:(id)alarm;	// 0x32e7b971
- (BOOL)requiresDetach;	// 0x32e7b64d
// converted property getter: - (id)responseComment;	// 0x32e7d815
- (BOOL)responseMustApplyToAll;	// 0x32e7d6f5
- (void)restoreState:(id)state;	// 0x32e4d9c5
- (void)revert;	// 0x32e7b369
- (id)rowId;	// 0x32e7cdb9
// declared property setter: - (void)setAlarms:(id)alarms;	// 0x32e7ba59
// declared property setter: - (void)setAllDay:(BOOL)day;	// 0x32e4d745
- (void)setAttendees:(id)attendees;	// 0x32e7bc01
// declared property setter: - (void)setAvailability:(int)availability;	// 0x32e7b721
// declared property setter: - (void)setCalendar:(id)calendar;	// 0x32e4c0c9
// declared property setter: - (void)setEndDate:(id)date;	// 0x32e4bcf1
// declared property setter: - (void)setLocation:(id)location;	// 0x32e7bd39
// declared property setter: - (void)setNotes:(id)notes;	// 0x32e7c009
// converted property setter: - (void)setParticipationStatus:(int)status;	// 0x32e7b7f5
// declared property setter: - (void)setRecurrenceRule:(id)rule;	// 0x32e7b895
// converted property setter: - (void)setResponseComment:(id)comment;	// 0x32e7b695
// declared property setter: - (void)setStartDate:(id)date;	// 0x32e4bba5
// converted property setter: - (void)setStore:(id)store;	// 0x32e7c489
// converted property setter: - (void)setTimeZone:(id)zone;	// 0x32e4b881
// declared property setter: - (void)setTitle:(id)title;	// 0x32e7be51
// converted property setter: - (void)setURL:(id)url;	// 0x32e7bf69
// converted property setter: - (void)setUnread:(BOOL)unread;	// 0x32e7b799
// declared property getter: - (id)startDate;	// 0x32e481b1
- (XXStruct_fhKmAA)startDateGr;	// 0x32e7d2ad
- (XXStruct_fhKmAA)startDatePinnedForAllDay;	// 0x32e7d361
// declared property getter: - (int)status;	// 0x32e49cf9
// converted property getter: - (id)store;	// 0x32e4be11
// converted property getter: - (id)timeZone;	// 0x32e4ba81
// declared property getter: - (id)title;	// 0x32e493c5
- (id)uniqueId;	// 0x32e7dc89
@end

