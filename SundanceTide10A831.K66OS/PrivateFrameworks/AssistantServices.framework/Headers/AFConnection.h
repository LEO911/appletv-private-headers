/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices
 */

#import <NSObject.h> // Unknown library
#import "AFManagedStore.h"

@class NSMutableDictionary, DKConnection, NSString;
@protocol AFAssistantUIService, AFSpeechDelegate;

@interface AFConnection : NSObject <AFManagedStore> {
	DKConnection *_connection;	// 4 = 0x4
	id<AFAssistantUIService> _delegate;	// 8 = 0x8
	id<AFSpeechDelegate> _speechDelegate;	// 12 = 0xc
	float _averagePower;	// 16 = 0x10
	float _peakPower;	// 20 = 0x14
	NSString *_outstandingRequestClass;	// 24 = 0x18
	unsigned _stateInSync : 1;	// 28 = 0x1c
	unsigned _shouldSpeak : 1;	// 28 = 0x1c
	unsigned _isCapturingSpeech : 1;	// 28 = 0x1c
	unsigned _hasOutstandingRequest : 1;	// 28 = 0x1c
	unsigned _replyContextMayInitiateCall : 1;	// 28 = 0x1c
	BOOL _hasActiveRequest;	// 29 = 0x1d
	NSMutableDictionary *_replies;	// 32 = 0x20
}
@property(readonly, assign) float averagePower;	// G=0x32c349fd; converted property
@property(assign, nonatomic) __weak id<AFAssistantUIService> delegate;	// G=0x32c35489; S=0x32c320f9; @synthesize=_delegate
@property(readonly, assign, nonatomic) BOOL isRecording;	// G=0x32c349d5; 
@property(readonly, assign) float peakPower;	// G=0x32c34a0d; converted property
@property(assign, nonatomic) __weak id<AFSpeechDelegate> speechDelegate;	// G=0x32c354a9; S=0x32c354c9; @synthesize=_speechDelegate
+ (void)_reachabilityDidChange:(id)_reachability;	// 0x32c33ca1
+ (BOOL)assistantIsEnabled;	// 0x32c33af5
+ (BOOL)assistantIsSupported;	// 0x32c33c95
+ (BOOL)assistantIsSupportedForLanguageCode:(id)languageCode error:(id *)error;	// 0x32c33b4d
+ (void)beginMonitoringAvailability;	// 0x32c33d2d
+ (void)defrost;	// 0x32c33f25
+ (void)initialize;	// 0x32c32051
+ (BOOL)isAvailable;	// 0x32c33d99
+ (void)stopMonitoringAvailability;	// 0x32c33e29
+ (BOOL)userDataSyncNeeded;	// 0x32c33e85
- (id)init;	// 0x32c32055
- (void).cxx_destruct;	// 0x32c354dd
- (void)_asyncBarrierWithBlock:(id)block;	// 0x32c35769
- (void)_barrier;	// 0x32c35731
- (void)_cancelRequestTimeout;	// 0x32c33811
- (void)_checkAndSetIsCapturingSpeech:(BOOL)speech;	// 0x32c32139
- (void)_clearAssistantInfoForAccountWithIdentifier:(id)identifier;	// 0x32c357b9
- (void)_clearConnection;	// 0x32c33541
- (id)_connection;	// 0x32c332cd
- (void)_handleMessage:(id)message;	// 0x32c331cd
- (void)_invokeRequestTimeout;	// 0x32c33769
- (void)_msgDismissAssistant:(id)assistant;	// 0x32c32c91
- (void)_msgDoCommand:(id)command;	// 0x32c328b9
- (void)_msgOpenURL:(id)url;	// 0x32c32a59
- (void)_msgReplyMayInitiateCall:(id)call;	// 0x32c32e8d
- (void)_msgRequestCompleted:(id)completed;	// 0x32c32a29
- (void)_msgRequestError:(id)error;	// 0x32c32d55
- (void)_msgSpeechLevelUpdate:(id)update;	// 0x32c32ed9
- (void)_msgSpeechRecognitionDidFail:(id)_msgSpeechRecognition;	// 0x32c3311d
- (void)_msgSpeechRecognized:(id)recognized;	// 0x32c3305d
- (void)_msgSpeechRecordingDidBegin:(id)_msgSpeechRecording;	// 0x32c32ec9
- (void)_msgSpeechRecordingDidCancel:(id)_msgSpeechRecording;	// 0x32c32fbd
- (void)_msgSpeechRecordingDidEnd:(id)_msgSpeechRecording;	// 0x32c32f8d
- (void)_msgSpeechRecordingDidFail:(id)_msgSpeechRecording;	// 0x32c32fed
- (void)_msgSpeechRecordingWillBegin:(id)_msgSpeechRecording;	// 0x32c32eb9
- (void)_msgStateUpdate:(id)update;	// 0x32c32df1
- (void)_requestDidEnd;	// 0x32c32259
- (void)_requestStateUpdate;	// 0x32c3384d
- (void)_requestWillBeginWithRequestClass:(id)_request logAggregateData:(BOOL)data;	// 0x32c32205
- (void)_scheduleRequestTimeout:(double)timeout;	// 0x32c337d5
- (void)_sendMessage:(id)message withReply:(id)reply;	// 0x32c35651
- (void)_sendMessage:(id)message withReplySync:(id)replySync;	// 0x32c356c9
- (void)_tellDelegateRequestFailed:(id)failed requestClass:(id)aClass;	// 0x32c322fd
- (void)_tellDelegateRequestFinished;	// 0x32c32299
- (void)_tellDelegateShouldSpeakChanged:(BOOL)_tellDelegate;	// 0x32c32391
- (void)_tellSpeechDelegateDidRecognizeSpeechPhrases:(id)_tellSpeechDelegate correctionIdentifier:(id)identifier;	// 0x32c325b1
- (void)_tellSpeechDelegateRecognitionDidFail:(id)_tellSpeechDelegateRecognition;	// 0x32c3284d
- (void)_tellSpeechDelegateRecordingDidBegin;	// 0x32c32449
- (void)_tellSpeechDelegateRecordingDidCancel;	// 0x32c324f1
- (void)_tellSpeechDelegateRecordingDidEnd;	// 0x32c3249d
- (void)_tellSpeechDelegateRecordingDidFail:(id)_tellSpeechDelegateRecording;	// 0x32c32545
- (void)_tellSpeechDelegateRecordingWillBegin;	// 0x32c323f5
- (void)_unhandledMessage:(id)message;	// 0x32c3315d
- (void)_willCancelRequest;	// 0x32c33a4d
- (void)_willCompleteRequest;	// 0x32c33abd
- (void)_willFailRequest;	// 0x32c33a85
- (void)_willStartRequest;	// 0x32c33a05
// converted property getter: - (float)averagePower;	// 0x32c349fd
- (void)cancelRequest;	// 0x32c347b5
- (void)cancelSpeech;	// 0x32c34519
- (void)clearAndSetApplicationContext;	// 0x32c34f25
- (void)clearAndSetApplicationContextWithBulletins:(id)bulletins;	// 0x32c34f39
- (void)clearContext;	// 0x32c34ea5
- (void)clearUndoStack;	// 0x32c350ed
- (void)dealloc;	// 0x32c320b9
// declared property getter: - (id)delegate;	// 0x32c35489
- (id)domainObjectForKey:(id)key;	// 0x32c3516d
- (void)endSession;	// 0x32c33e91
// declared property getter: - (BOOL)isRecording;	// 0x32c349d5
// converted property getter: - (float)peakPower;	// 0x32c34a0d
- (void)preheat;	// 0x32c33fed
- (void)redoRequest;	// 0x32c3506d
- (BOOL)replyContextMayInitiateCall;	// 0x32c34a1d
- (void)rollbackRequest;	// 0x32c34859
- (void)sendGenericAceCommand:(id)command;	// 0x32c34a31
- (void)sendGenericAceCommand:(id)command conflictHandler:(id)handler;	// 0x32c34a45
- (void)sendReplyCommand:(id)command;	// 0x32c34de5
// declared property setter: - (void)setDelegate:(id)delegate;	// 0x32c320f9
- (void)setDomainObject:(id)object forKey:(id)key;	// 0x32c35399
- (BOOL)setLanguageCode:(id)code error:(id *)error;	// 0x32c3406d
- (void)setLockState:(BOOL)state screenLocked:(BOOL)locked;	// 0x32c341bd
// declared property setter: - (void)setSpeechDelegate:(id)delegate;	// 0x32c354c9
- (BOOL)shouldSpeak;	// 0x32c349e9
// declared property getter: - (id)speechDelegate;	// 0x32c354a9
- (void)startRequestWithCorrectedText:(id)correctedText forSpeechIdentifier:(id)speechIdentifier;	// 0x32c348d9
- (void)startRequestWithText:(id)text;	// 0x32c343e1
- (void)startRequestWithText:(id)text timeout:(double)timeout;	// 0x32c342f1
- (void)startSpeechRequestWithOptions:(id)options;	// 0x32c34411
- (void)startSpeechRequestWithSpeechFileAtURL:(id)url;	// 0x32c35549
- (void)stopSpeech;	// 0x32c347a1
- (void)stopSpeechWithOptions:(id)options;	// 0x32c346b1
- (void)undoRequest;	// 0x32c34fed
- (void)updateSpeechOptions:(id)options;	// 0x32c345d1
@end

