/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/CoreData.framework/CoreData
 */

#import "CoreData-Structs.h"
#import <NSObject.h> // Unknown library

@class NSArray, NSSQLAdapter, NSSQLStatement;

@interface NSSQLConnection : NSObject {
	NSSQLAdapter *_adapter;	// 4 = 0x4
	BOOL _transactionIsOpen;	// 8 = 0x8
	BOOL _useSyntaxColoredLogging;	// 9 = 0x9
	int _debug;	// 12 = 0xc
	NSSQLStatement *_sqlStatement;	// 16 = 0x10
	NSArray *_columnsToFetch;	// 20 = 0x14
	NSArray *_metadataColumns;	// 24 = 0x18
}
@property(readonly, retain) NSSQLAdapter *adapter;	// G=0x33d1c6dd; converted property
@property(retain) NSArray *columnsToFetch;	// G=0x33d1de45; S=0x33d1de65; converted property
@property(readonly, retain) NSArray *metadataColumns;	// G=0x33d1dea9; converted property
@property(readonly, retain) NSSQLStatement *sqlStatement;	// G=0x33d1d7f9; converted property
+ (void)initialize;	// 0x33d19ce5
- (id)initWithAdapter:(id)adapter;	// 0x33d19f75
- (void)_forceDisconnectOnError;	// 0x33db09dd
- (void)_performPostSaveTasks;	// 0x33db21d1
- (void)_raiseOptimisticLockingExceptionWithReason:(id)reason;	// 0x33db0799
// converted property getter: - (id)adapter;	// 0x33d1c6dd
- (void)addPeerRange:(id)range;	// 0x33db2271
- (void)addPeerRangeForPeerID:(id)peerID entityName:(id)name rangeStart:(id)start rangeEnd:(id)end peerRangeStart:(id)start5 peerRangeEnd:(id)end6;	// 0x33db22a5
- (id)allPeerRanges;	// 0x33db22d9
- (void)awake;	// 0x33db097d
- (void)beginTransaction;	// 0x33db08ad
- (BOOL)canConnect;	// 0x33db0b01
// converted property getter: - (id)columnsToFetch;	// 0x33d1de45
- (void)commitTransaction;	// 0x33db08e1
- (void)connect;	// 0x33db0949
- (void)createIndexesForEntity:(id)entity;	// 0x33db1211
- (void)createManyToManyTablesForEntity:(id)entity;	// 0x33db1119
- (id)createMapOfEntityNameToPKMaxForEntities:(id)entities;	// 0x33db2375
- (id)createMapOfEntityNameToPKMaxForEntitiesFromPKTable:(id)pktable;	// 0x33db2341
- (id)createMapOfEntityNameToPKMaxForEntitiesFromUBRangeTable:(id)ubrangeTable;	// 0x33db230d
- (void)createMetadata;	// 0x33db1835
- (void)createPrimaryKeyTableForModel:(id)model knownEmpty:(BOOL)empty;	// 0x33db20b5
- (void)createSchema;	// 0x33db1909
- (void)createTableForEntity:(id)entity;	// 0x33db10a5
- (void)createTablesForEntities:(id)entities;	// 0x33db1795
- (BOOL)databaseIsEmpty;	// 0x33db0b35
- (void)dealloc;	// 0x33db0815
- (void)deleteCorrelation:(id)correlation;	// 0x33db0c39
- (void)deleteRow:(id)row;	// 0x33db0ca1
- (id)describeResults;	// 0x33db0de9
- (void)didCreateSchema;	// 0x33db1905
- (void)disconnect;	// 0x33db0985
- (void)endFetch;	// 0x33db0e85
- (void)endPrimaryKeyGeneration;	// 0x33db207d
- (void)execute;	// 0x33db0d09
- (long long)fetchMaxPrimaryKeyForEntity:(id)entity;	// 0x33db1c35
- (id)fetchMetadata;	// 0x33d1c1fd
- (int)fetchResultSet:(void *)set usingFetchPlan:(id)plan;	// 0x33db0e51
- (id)fetchTableCreationSQL;	// 0x33db1c9d
- (id)fetchTableNames;	// 0x33db1c69
- (id)fetchUbiquityKnowledgeVector;	// 0x33db21d5
- (void)finalize;	// 0x33db07d5
- (void)forceTransactionClosed;	// 0x33db09c9
- (long long)generatePrimaryKeysForEntity:(id)entity batch:(unsigned)batch;	// 0x33db2071
- (BOOL)hasMetadataTable;	// 0x33db1cd1
- (BOOL)hasOpenTransaction;	// 0x33db09b9
- (BOOL)hasPrimaryKeyTable;	// 0x33db2081
- (void)insertCorrelation:(id)correlation;	// 0x33db0bd1
- (void)insertRow:(id)row;	// 0x33db0b9d
- (BOOL)isFetchInProgress;	// 0x33db0db5
- (BOOL)isOpen;	// 0x33db0b69
// converted property getter: - (id)metadataColumns;	// 0x33d1dea9
- (id)newFetchedArray;	// 0x33db0e1d
- (void)performAdapterOperation:(id)operation;	// 0x33db0eb9
- (void)performAdapterOperations:(id)operations;	// 0x33db0fed
- (void)prepareAndExecuteSQLStatement:(id)statement;	// 0x33db0d69
- (void)prepareForPrimaryKeyGeneration;	// 0x33db2079
- (void)prepareSQLStatement:(id)statement;	// 0x33d1ce85
- (CFArrayRef)rawIntegerRowsForSQL:(id)sql;	// 0x33db1c01
- (void)releaseSQLStatement;	// 0x33d1ed51
- (void)resetSQLStatement;	// 0x33db0d3d
- (void)rollbackTransaction;	// 0x33db0915
- (void)saveMetadata:(id)metadata;	// 0x33db1d05
- (void)selectAttributes:(id)attributes fetchRequest:(id)request lock:(BOOL)lock entity:(id)entity;	// 0x33db0cd5
// converted property setter: - (void)setColumnsToFetch:(id)fetch;	// 0x33d1de65
- (void)setExclusiveLockingMode:(BOOL)mode;	// 0x33db0db1
- (void)setUbiquityTableValue:(id)value forKey:(id)key;	// 0x33db23a9
- (void)sleep;	// 0x33db0981
// converted property getter: - (id)sqlStatement;	// 0x33d1d7f9
- (void)transactionDidBegin;	// 0x33db09ed
- (void)transactionDidCommit;	// 0x33db0a49
- (void)transactionDidRollback;	// 0x33db0aa5
- (id)ubiquityTableKeysAndValues;	// 0x33db23dd
- (id)ubiquityTableValueForKey:(id)key;	// 0x33db2411
- (void)updateCorrelation:(id)correlation;	// 0x33db0c05
- (void)updateRow:(id)row;	// 0x33db0c6d
- (void)updateUbiquityKnowledgeForPeerWithID:(id)anId andTransactionNumber:(id)number;	// 0x33db223d
- (void)updateUbiquityKnowledgeVector:(id)vector;	// 0x33db2209
- (void)willCreateSchema;	// 0x33db1901
@end

