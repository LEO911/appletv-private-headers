/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/EventKit.framework/EventKit
 */

#import "EventKit-Structs.h"
#import <NSObject.h> // Unknown library
#import "NSCopying.h"
#import "NSMutableCopying.h"

@class EKTimeZone;

@interface EKCalendarDate : NSObject <NSCopying, NSMutableCopying> {
	XXStruct_lQVxyC _dateGr;	// 4 = 0x4
	double _dateAbs;	// 20 = 0x14
	EKTimeZone *_timeZone;	// 28 = 0x1c
	unsigned _flags;	// 32 = 0x20
}
@property(readonly, retain) EKTimeZone *timeZone;	// G=0x34ee8c95; converted property
+ (id)calendarDateWithAbsoluteTime:(double)absoluteTime timeZone:(id)zone;	// 0x34edb3b1
+ (id)calendarDateWithDate:(id)date timeZone:(id)zone;	// 0x34edcac1
+ (id)calendarDateWithDateComponents:(id)dateComponents timeZone:(id)zone;	// 0x34ed93b5
+ (id)calendarDateWithGregorianDate:(XXStruct_lQVxyC)gregorianDate timeZone:(id)zone;	// 0x34ee9699
- (id)initWithAbsoluteTime:(double)absoluteTime internalTimeZone:(id)zone;	// 0x34f4147d
- (id)initWithAbsoluteTime:(double)absoluteTime timeZone:(id)zone;	// 0x34edb3f9
- (id)initWithDate:(id)date timeZone:(id)zone;	// 0x34edcb05
- (id)initWithDateComponents:(id)dateComponents timeZone:(id)zone;	// 0x34ed93f5
- (id)initWithGregorianDate:(XXStruct_lQVxyC)gregorianDate internalTimeZone:(id)zone;	// 0x34edaad1
- (id)initWithGregorianDate:(XXStruct_lQVxyC)gregorianDate timeZone:(id)zone;	// 0x34ee96ed
- (double)absoluteTime;	// 0x34edac9d
- (id)calendarDateByAddingDays:(int)days;	// 0x34ed9f59
- (id)calendarDateByAddingGregorianUnits:(XXStruct_mY3THC)units;	// 0x34ed9f89
- (id)calendarDateByAddingWeeks:(int)weeks;	// 0x34f41825
- (id)calendarDateForDay;	// 0x34ed9dd9
- (id)calendarDateForEndOfDay;	// 0x34edab69
- (id)calendarDateForEndOfMonth;	// 0x34ee1191
- (id)calendarDateForEndOfWeekWithWeekStart:(unsigned)weekStart;	// 0x34ee12cd
- (id)calendarDateForMonth;	// 0x34ee0ee5
- (id)calendarDateForWeekWithWeekStart:(unsigned)weekStart;	// 0x34ee0fc9
- (id)calendarDateForWeekWithWeekStart:(unsigned)weekStart daysSinceWeekStart:(int *)start;	// 0x34ee0fdd
- (id)calendarDateForYear;	// 0x34f41bfd
- (id)calendarDateInTimeZone:(id)timeZone;	// 0x34f41855
- (id)calendarDateWithDate:(id)date;	// 0x34f418b1
- (int)compare:(id)compare;	// 0x34ee9495
- (id)components;	// 0x34f416a9
- (id)copyWithZone:(NSZone *)zone;	// 0x34edcb69
- (id)date;	// 0x34edac61
- (unsigned)day;	// 0x34f419f1
- (unsigned)dayOfWeek;	// 0x34f41ad1
- (unsigned)dayOfYear;	// 0x34f41b01
- (unsigned)daysInMonth;	// 0x34ee1299
- (unsigned)daysInYear;	// 0x34f41b65
- (void)dealloc;	// 0x34edb4b5
- (id)description;	// 0x34f4159d
- (XXStruct_mY3THC)differenceAsGregorianUnits:(id)units flags:(unsigned long)flags;	// 0x34ee0145
- (int)differenceInDays:(id)days;	// 0x34ee0ea9
- (int)differenceInMonths:(id)months;	// 0x34f4192d
- (int)differenceInYears:(id)years;	// 0x34f418f1
- (id)earlierDate:(id)date;	// 0x34f41ced
- (XXStruct_lQVxyC)gregorianDate;	// 0x34ed9eb5
- (unsigned)hour;	// 0x34f41a25
- (BOOL)isEqual:(id)equal;	// 0x34ee93d5
- (id)laterDate:(id)date;	// 0x34f41d35
- (unsigned)minute;	// 0x34f41a59
- (unsigned)month;	// 0x34f419bd
- (id)mutableCopyWithZone:(NSZone *)zone;	// 0x34f414f9
- (double)second;	// 0x34f41a91
- (int)secondsFromGMT;	// 0x34f417e5
// converted property getter: - (id)timeZone;	// 0x34ee8c95
- (unsigned)weekOfYear;	// 0x34f41b31
- (unsigned)weeksInYear;	// 0x34f41bad
- (unsigned)year;	// 0x34f4198d
@end

