/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/OfficeImport.framework/OfficeImport
 */

#import "OfficeImport-Structs.h"
#import "NSCopying.h"
#import <NSObject.h> // Unknown library


@interface NSBezierPathStub : NSObject <NSCopying> {
	int _segmentCount;	// 4 = 0x4
	int _segmentMax;	// 8 = 0x8
	PATHSEGMENT *_head;	// 12 = 0xc
	int _lastSubpathIndex;	// 16 = 0x10
	int _elementCount;	// 20 = 0x14
	float _lineWidth;	// 24 = 0x18
	CGRect _controlPointBounds;	// 28 = 0x1c
	float _miterLimit;	// 44 = 0x2c
	float _flatness;	// 48 = 0x30
	float *_dashedLinePattern;	// 52 = 0x34
	unsigned _dashedLineCount;	// 56 = 0x38
	float _dashedLinePhase;	// 60 = 0x3c
	void *_path;	// 64 = 0x40
	id _private[4];	// 68 = 0x44
	struct {
		unsigned _flags : 8;
		unsigned _pathState : 2;
		unsigned _unused : 22;
	} _bpFlags;	// 84 = 0x54
}
@property(assign) BOOL cachesBezierPath;	// G=0x31e66fa5; S=0x31e66fa9; converted property
@property(readonly, assign) CGRect controlPointBounds;	// G=0x31e658ad; converted property
@property(readonly, assign) int elementCount;	// G=0x31e65b11; converted property
@property(assign) float flatness;	// G=0x31e64c95; S=0x31e64ca5; converted property
@property(assign) unsigned lineCapStyle;	// G=0x31e64bd9; S=0x31e64bed; converted property
@property(assign) unsigned lineJoinStyle;	// G=0x31e64c0d; S=0x31e64c21; converted property
@property(assign) float lineWidth;	// G=0x31e64bb9; S=0x31e64bc9; converted property
@property(assign) float miterLimit;	// G=0x31e64c75; S=0x31e64c85; converted property
@property(assign) unsigned windingRule;	// G=0x31e64c41; S=0x31e64c55; converted property
+ (id)bezierPath;	// 0x31e63e31
+ (id)bezierPathWithOvalInRect:(CGRect)rect;	// 0x31e63ea9
+ (id)bezierPathWithRect:(CGRect)rect;	// 0x31e63e69
+ (id)bezierPathWithRoundedRect:(CGRect)roundedRect xRadius:(float)radius yRadius:(float)radius3;	// 0x31e63ee9
+ (void)clipRect:(CGRect)rect;	// 0x31e640ad
+ (CGContextRef)currentCGContext;	// 0x31e63de1
+ (float)defaultFlatness;	// 0x31e64219
+ (unsigned)defaultLineCapStyle;	// 0x31e64259
+ (unsigned)defaultLineJoinStyle;	// 0x31e64279
+ (float)defaultLineWidth;	// 0x31e64299
+ (float)defaultMiterLimit;	// 0x31e641f9
+ (unsigned)defaultWindingRule;	// 0x31e64239
+ (void)drawPackedGlyphs:(const char *)glyphs atPoint:(CGPoint)point;	// 0x31e64195
+ (void)drawString:(id)string atPoint:(CGPoint)point withFontName:(id)fontName andHeight:(float)height color:(id)color alignToTop:(BOOL)top currentTransformStruct:(CGAffineTransform)aStruct;	// 0x31e642f5
+ (void)fillRect:(CGRect)rect;	// 0x31e63f3d
+ (float)flatness;	// 0x31e67419
+ (void)initialize;	// 0x31e63d49
+ (unsigned)lineCapStyle;	// 0x31e67459
+ (unsigned)lineJoinStyle;	// 0x31e67479
+ (float)lineWidth;	// 0x31e67499
+ (float)miterLimit;	// 0x31e673f9
+ (void)setCurrentCGContext:(CGContextRef)context;	// 0x31e63d8d
+ (void)setDefaultFlatness:(float)flatness;	// 0x31e64209
+ (void)setDefaultLineCapStyle:(unsigned)style;	// 0x31e64249
+ (void)setDefaultLineJoinStyle:(unsigned)style;	// 0x31e64269
+ (void)setDefaultLineWidth:(float)width;	// 0x31e64289
+ (void)setDefaultMiterLimit:(float)limit;	// 0x31e641e9
+ (void)setDefaultWindingRule:(unsigned)rule;	// 0x31e64229
+ (void)setFlatness:(float)flatness;	// 0x31e67409
+ (void)setLineCapStyle:(unsigned)style;	// 0x31e67449
+ (void)setLineJoinStyle:(unsigned)style;	// 0x31e67469
+ (void)setLineWidth:(float)width;	// 0x31e67489
+ (void)setMiterLimit:(float)limit;	// 0x31e673e9
+ (void)setWindingRule:(unsigned)rule;	// 0x31e67429
+ (void)strokeLineFromPoint:(CGPoint)point toPoint:(CGPoint)point2;	// 0x31e6410d
+ (void)strokeRect:(CGRect)rect;	// 0x31e63f9d
+ (unsigned)windingRule;	// 0x31e67439
- (id)init;	// 0x31e644b1
- (id).cxx_construct;	// 0x31e66fad
- (void)_addPathSegment:(int)segment point:(CGPoint)point;	// 0x31e66fb1
- (void)_appendArcSegmentWithCenter:(CGPoint)center radius:(double)radius angle1:(double)a1 angle2:(double)a2;	// 0x31e66125
- (id)_copyFlattenedPath;	// 0x31e65509
- (void)_deviceClosePath;	// 0x31e6723d
- (void)_deviceCurveToPoint:(CGPoint)point controlPoint1:(CGPoint)a1 controlPoint2:(CGPoint)a2;	// 0x31e671b9
- (void)_deviceLineToPoint:(CGPoint)point;	// 0x31e67169
- (void)_deviceMoveToPoint:(CGPoint)point;	// 0x31e67091
- (void)_doPath;	// 0x31e64e21
- (void)_doUserPathWithOp:(unsigned char)op inContext:(CGContextRef)context;	// 0x31e672fd
- (int)_locationOfPoint:(CGPoint)point;	// 0x31e66b0d
- (int)_segmentIndexForElementIndex:(int)elementIndex;	// 0x31e65b89
- (void)addClip;	// 0x31e65099
- (void)appendBezierPath:(id)path;	// 0x31e65db9
- (void)appendBezierPathWithArcFromPoint:(CGPoint)point toPoint:(CGPoint)point2 radius:(float)radius;	// 0x31e66569
- (void)appendBezierPathWithArcWithCenter:(CGPoint)center radius:(float)radius startAngle:(float)angle endAngle:(float)angle4;	// 0x31e66529
- (void)appendBezierPathWithArcWithCenter:(CGPoint)center radius:(float)radius startAngle:(float)angle endAngle:(float)angle4 clockwise:(BOOL)clockwise;	// 0x31e662a9
- (void)appendBezierPathWithOvalInRect:(CGRect)rect;	// 0x31e65fcd
- (void)appendBezierPathWithPoints:(CGPoint *)points count:(int)count;	// 0x31e65f51
- (void)appendBezierPathWithRect:(CGRect)rect;	// 0x31e65ec5
- (void)appendBezierPathWithRoundedRect:(CGRect)roundedRect xRadius:(float)radius yRadius:(float)radius3;	// 0x31e66889
- (id)bezierPathByFlatteningPath;	// 0x31e65471
- (id)bezierPathByReversingPath;	// 0x31e6555d
- (CGRect)bounds;	// 0x31e65a35
// converted property getter: - (BOOL)cachesBezierPath;	// 0x31e66fa5
- (void)closePath;	// 0x31e649a9
- (BOOL)containsPoint:(CGPoint)point;	// 0x31e66f15
// converted property getter: - (CGRect)controlPointBounds;	// 0x31e658ad
- (id)copyWithZone:(NSZone *)zone;	// 0x31e64711
- (CGPoint)currentPoint;	// 0x31e65829
- (void)curveToPoint:(CGPoint)point controlPoint1:(CGPoint)a1 controlPoint2:(CGPoint)a2;	// 0x31e64915
- (void)dealloc;	// 0x31e64601
- (id)description;	// 0x31e674a9
- (unsigned)elementAtIndex:(int)index;	// 0x31e65b75
- (unsigned)elementAtIndex:(int)index associatedPoints:(CGPoint *)points;	// 0x31e65c71
// converted property getter: - (int)elementCount;	// 0x31e65b11
- (void)fill;	// 0x31e65021
- (void)finalize;	// 0x31e64689
// converted property getter: - (float)flatness;	// 0x31e64c95
- (void)flattenIntoPath:(id)path;	// 0x31e65369
- (void)getLineDash:(float *)dash count:(int *)count phase:(float *)phase;	// 0x31e64d9d
- (BOOL)isEmpty;	// 0x31e65811
- (BOOL)isHitByPath:(id)path;	// 0x31e66f95
- (BOOL)isHitByPoint:(CGPoint)point;	// 0x31e66f79
- (BOOL)isHitByRect:(CGRect)rect;	// 0x31e66f91
- (BOOL)isStrokeHitByPath:(id)path;	// 0x31e66fa1
- (BOOL)isStrokeHitByPoint:(CGPoint)point;	// 0x31e66f99
- (BOOL)isStrokeHitByRect:(CGRect)rect;	// 0x31e66f9d
// converted property getter: - (unsigned)lineCapStyle;	// 0x31e64bd9
// converted property getter: - (unsigned)lineJoinStyle;	// 0x31e64c0d
- (void)lineToPoint:(CGPoint)point;	// 0x31e648a5
// converted property getter: - (float)lineWidth;	// 0x31e64bb9
// converted property getter: - (float)miterLimit;	// 0x31e64c75
- (void)moveToPoint:(CGPoint)point;	// 0x31e64895
- (void)relativeCurveToPoint:(CGPoint)point controlPoint1:(CGPoint)a1 controlPoint2:(CGPoint)a2;	// 0x31e64b05
- (void)relativeLineToPoint:(CGPoint)point;	// 0x31e64a9d
- (void)relativeMoveToPoint:(CGPoint)point;	// 0x31e64a35
- (void)removeAllPoints;	// 0x31e649b9
- (void)setAssociatedPoints:(CGPoint *)points atIndex:(int)index;	// 0x31e65d01
// converted property setter: - (void)setCachesBezierPath:(BOOL)path;	// 0x31e66fa9
- (void)setClip;	// 0x31e65119
// converted property setter: - (void)setFlatness:(float)flatness;	// 0x31e64ca5
// converted property setter: - (void)setLineCapStyle:(unsigned)style;	// 0x31e64bed
- (void)setLineDash:(const float *)dash count:(int)count phase:(float)phase;	// 0x31e64cb5
// converted property setter: - (void)setLineJoinStyle:(unsigned)style;	// 0x31e64c21
// converted property setter: - (void)setLineWidth:(float)width;	// 0x31e64bc9
// converted property setter: - (void)setMiterLimit:(float)limit;	// 0x31e64c85
// converted property setter: - (void)setWindingRule:(unsigned)rule;	// 0x31e64c55
- (void)stroke;	// 0x31e64f35
- (void)subdivideBezierWithFlatness:(float)flatness startPoint:(CGPoint)point controlPoint1:(CGPoint)a1 controlPoint2:(CGPoint)a2 endPoint:(CGPoint)point5;	// 0x31e65171
- (void)transformUsingAffineTransform:(id)transform;	// 0x31e65751
// converted property getter: - (unsigned)windingRule;	// 0x31e64c41
@end

