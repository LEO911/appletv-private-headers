/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices
 */

#import <NSObject.h> // Unknown library
#import "AFManagedStore.h"

@class NSMutableDictionary, DKConnection, NSString;
@protocol AFAssistantUIService, AFSpeechDelegate;

@interface AFConnection : NSObject <AFManagedStore> {
	DKConnection *_connection;	// 4 = 0x4
	id<AFAssistantUIService> _delegate;	// 8 = 0x8
	id<AFSpeechDelegate> _speechDelegate;	// 12 = 0xc
	float _averagePower;	// 16 = 0x10
	float _peakPower;	// 20 = 0x14
	NSString *_outstandingRequestClass;	// 24 = 0x18
	unsigned _stateInSync : 1;	// 28 = 0x1c
	unsigned _shouldSpeak : 1;	// 28 = 0x1c
	unsigned _isCapturingSpeech : 1;	// 28 = 0x1c
	unsigned _hasOutstandingRequest : 1;	// 28 = 0x1c
	unsigned _replyContextMayInitiateCall : 1;	// 28 = 0x1c
	NSMutableDictionary *_replies;	// 32 = 0x20
}
@property(readonly, assign) float averagePower;	// G=0x33fa2e19; converted property
@property(assign, nonatomic) __weak id<AFAssistantUIService> delegate;	// G=0x33fa36ed; S=0x33fa05f1; @synthesize=_delegate
@property(readonly, assign, nonatomic) BOOL isRecording;	// G=0x33fa2df1; 
@property(readonly, assign) float peakPower;	// G=0x33fa2e29; converted property
@property(assign, nonatomic) __weak id<AFSpeechDelegate> speechDelegate;	// G=0x33fa370d; S=0x33fa372d; @synthesize=_speechDelegate
+ (void)_reachabilityDidChange:(id)_reachability;	// 0x33fa2101
+ (BOOL)assistantIsEnabled;	// 0x33fa1f55
+ (BOOL)assistantIsSupported;	// 0x33fa20f5
+ (BOOL)assistantIsSupportedForLanguageCode:(id)languageCode error:(id *)error;	// 0x33fa1fad
+ (void)beginMonitoringAvailability;	// 0x33fa218d
+ (void)defrost;	// 0x33fa2371
+ (void)initialize;	// 0x33fa0549
+ (BOOL)isAvailable;	// 0x33fa21f9
+ (void)stopMonitoringAvailability;	// 0x33fa2289
+ (BOOL)userDataSyncNeeded;	// 0x33fa22e5
- (id)init;	// 0x33fa054d
- (void).cxx_destruct;	// 0x33fa3741
- (void)_asyncBarrierWithBlock:(id)block;	// 0x33fa39d9
- (void)_barrier;	// 0x33fa39a1
- (void)_cancelRequestTimeout;	// 0x33fa1d61
- (void)_checkAndSetIsCapturingSpeech:(BOOL)speech;	// 0x33fa0631
- (void)_clearAssistantInfoForAccountWithIdentifier:(id)identifier;	// 0x33fa3a29
- (void)_clearConnection;	// 0x33fa1a91
- (id)_connection;	// 0x33fa181d
- (void)_handleMessage:(id)message;	// 0x33fa1721
- (void)_invokeRequestTimeout;	// 0x33fa1cb9
- (void)_msgDismissAssistant:(id)assistant;	// 0x33fa1255
- (void)_msgDoCommand:(id)command;	// 0x33fa0d75
- (void)_msgOpenURL:(id)url;	// 0x33fa0f15
- (void)_msgReplyMayInitiateCall:(id)call;	// 0x33fa13e1
- (void)_msgRequestCompleted:(id)completed;	// 0x33fa0ee5
- (void)_msgRequestCurrentBulletins:(id)bulletins;	// 0x33fa114d
- (void)_msgRequestError:(id)error;	// 0x33fa12a9
- (void)_msgSpeechLevelUpdate:(id)update;	// 0x33fa142d
- (void)_msgSpeechRecognitionDidFail:(id)_msgSpeechRecognition;	// 0x33fa1671
- (void)_msgSpeechRecognized:(id)recognized;	// 0x33fa15b1
- (void)_msgSpeechRecordingDidBegin:(id)_msgSpeechRecording;	// 0x33fa141d
- (void)_msgSpeechRecordingDidCancel:(id)_msgSpeechRecording;	// 0x33fa1511
- (void)_msgSpeechRecordingDidEnd:(id)_msgSpeechRecording;	// 0x33fa14e1
- (void)_msgSpeechRecordingDidFail:(id)_msgSpeechRecording;	// 0x33fa1541
- (void)_msgSpeechRecordingWillBegin:(id)_msgSpeechRecording;	// 0x33fa140d
- (void)_msgStateUpdate:(id)update;	// 0x33fa1345
- (void)_requestDidEnd;	// 0x33fa0739
- (void)_requestStateUpdate;	// 0x33fa1d9d
- (void)_requestWillBeginWithRequestClass:(id)_request;	// 0x33fa06fd
- (void)_scheduleRequestTimeout:(double)timeout;	// 0x33fa1d25
- (void)_sendMessage:(id)message withReply:(id)reply;	// 0x33fa38b5
- (void)_sendMessage:(id)message withReplySync:(id)replySync;	// 0x33fa3939
- (void)_tellDelegateRequestFailed:(id)failed requestClass:(id)aClass;	// 0x33fa07cd
- (void)_tellDelegateRequestFinished;	// 0x33fa0779
- (void)_tellDelegateShouldSpeakChanged:(BOOL)_tellDelegate;	// 0x33fa084d
- (void)_tellSpeechDelegateDidRecognizeSpeechPhrases:(id)_tellSpeechDelegate correctionIdentifier:(id)identifier;	// 0x33fa0a6d
- (void)_tellSpeechDelegateRecognitionDidFail:(id)_tellSpeechDelegateRecognition;	// 0x33fa0d09
- (void)_tellSpeechDelegateRecordingDidBegin;	// 0x33fa0905
- (void)_tellSpeechDelegateRecordingDidCancel;	// 0x33fa09ad
- (void)_tellSpeechDelegateRecordingDidEnd;	// 0x33fa0959
- (void)_tellSpeechDelegateRecordingDidFail:(id)_tellSpeechDelegateRecording;	// 0x33fa0a01
- (void)_tellSpeechDelegateRecordingWillBegin;	// 0x33fa08b1
- (void)_unhandledMessage:(id)message;	// 0x33fa16b1
// converted property getter: - (float)averagePower;	// 0x33fa2e19
- (void)cancelRequest;	// 0x33fa2be5
- (void)cancelSpeech;	// 0x33fa2959
- (void)clearAndSetApplicationContext;	// 0x33fa31d1
- (void)clearContext;	// 0x33fa3151
- (void)clearUndoStack;	// 0x33fa3351
- (void)dealloc;	// 0x33fa05b1
// declared property getter: - (id)delegate;	// 0x33fa36ed
- (id)domainObjectForKey:(id)key;	// 0x33fa33d1
- (void)endSession;	// 0x33fa22f1
// declared property getter: - (BOOL)isRecording;	// 0x33fa2df1
// converted property getter: - (float)peakPower;	// 0x33fa2e29
- (void)preheat;	// 0x33fa2431
- (void)redoRequest;	// 0x33fa32d1
- (BOOL)replyContextMayInitiateCall;	// 0x33fa2e39
- (void)rollbackRequest;	// 0x33fa2c79
- (void)sendGenericAceCommand:(id)command;	// 0x33fa2e4d
- (void)sendGenericAceCommand:(id)command conflictHandler:(id)handler;	// 0x33fa2e61
- (void)sendReplyCommand:(id)command;	// 0x33fa3091
// declared property setter: - (void)setDelegate:(id)delegate;	// 0x33fa05f1
- (void)setDomainObject:(id)object forKey:(id)key;	// 0x33fa35fd
- (BOOL)setLanguageCode:(id)code error:(id *)error;	// 0x33fa24b1
- (void)setLockState:(BOOL)state screenLocked:(BOOL)locked;	// 0x33fa2601
// declared property setter: - (void)setSpeechDelegate:(id)delegate;	// 0x33fa372d
- (BOOL)shouldSpeak;	// 0x33fa2e05
// declared property getter: - (id)speechDelegate;	// 0x33fa370d
- (void)startRequestWithCorrectedText:(id)correctedText forSpeechIdentifier:(id)speechIdentifier;	// 0x33fa2cf9
- (void)startRequestWithText:(id)text;	// 0x33fa2821
- (void)startRequestWithText:(id)text timeout:(double)timeout;	// 0x33fa2735
- (void)startSpeechRequestWithOptions:(id)options;	// 0x33fa2851
- (void)startSpeechRequestWithSpeechFileAtURL:(id)url;	// 0x33fa37ad
- (void)stopSpeech;	// 0x33fa2bd1
- (void)stopSpeechWithOptions:(id)options;	// 0x33fa2ae1
- (void)undoRequest;	// 0x33fa3251
- (void)updateSpeechOptions:(id)options;	// 0x33fa2a01
@end

