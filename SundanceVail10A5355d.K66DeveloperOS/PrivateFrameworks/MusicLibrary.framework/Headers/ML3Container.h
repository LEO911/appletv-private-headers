/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

#import "ML3Entity.h"
#import "MusicLibrary-Structs.h"

@class NSArray, NSString, ML3Predicate;

@interface ML3Container : ML3Entity {
}
@property(readonly, assign) NSArray *cloudDisplayOrderingTerms;	// G=0x354844b5; 
@property(readonly, assign) NSArray *displayOrderingTerms;	// G=0x35484531; 
@property(readonly, assign) ML3Predicate *dynamicPredicate;	// G=0x35484155; 
@property(readonly, assign, getter=isLimitOrderingDescending) BOOL limitOrderingDescending;	// G=0x354841fd; 
@property(readonly, assign) NSArray *limitOrderingTerms;	// G=0x35484371; 
@property(readonly, assign) long long limitValue;	// G=0x354843ed; 
@property(readonly, assign, getter=isLimitedByCount) BOOL limitedByCount;	// G=0x354841b1; 
@property(readonly, assign) NSString *limitingProperty;	// G=0x354842e9; 
@property(readonly, assign) ML3Predicate *staticPredicate;	// G=0x354840f9; 
+ (void)_insertNewSmartPlaylist:(id)playlist criteriaBlob:(id)blob limited:(BOOL)limited trackOrder:(unsigned long)order distinguishedKind:(int)kind inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x35482f41
+ (id)autoCreatedBuiltInSmartPlaylistsPIDs:(id)smartPlaylistsPIDs;	// 0x35483ae9
+ (BOOL)createMissingBuiltInSmartPlaylists:(id)smartPlaylists;	// 0x35483341
+ (id)databaseTable;	// 0x35447ca9
+ (id)defaultOrderingProperties;	// 0x3545170d
+ (void)deleteAutoCreatedBuiltInSmartPlaylistsPIDs:(id)smartPlaylistsPIDs inLibrary:(id)library;	// 0x35483e31
+ (id)extraTablesToDelete;	// 0x354822cd
+ (id)foreignColumnForProperty:(id)property;	// 0x354822b1
+ (id)foreignDatabaseTableForProperty:(id)property;	// 0x35482295
+ (BOOL)hasCriterionInCriteriaList:(SearchCriteriaList *)criteriaList forITDBTrackField:(int)itdbtrackField;	// 0x35482bb1
+ (void)initialize;	// 0x3544692d
+ (id)joinClausesForProperty:(id)property;	// 0x354821f1
+ (id)nextFilepathForPlaylistType:(int)playlistType withPersistentID:(unsigned long long)persistentID inLibrary:(id)library;	// 0x35453111
+ (id)persistentIDColumnForTable:(id)table;	// 0x354551cd
+ (void)populateDynamicContainersInLibrary:(id)library;	// 0x35485225
+ (void)populateDynamicContainersInLibrary:(id)library createBuiltinSmartPlaylists:(BOOL)playlists;	// 0x35485249
+ (void)populateDynamicContainersWithTrackPersistentID:(id)trackPersistentID inLibrary:(id)library;	// 0x3548526d
+ (void)populateDynamicContainersWithTrackPersistentID:(id)trackPersistentID inLibrary:(id)library createBuiltinSmartPlaylists:(BOOL)playlists;	// 0x35485291
+ (void)populateSortOrdersOfPropertyValues:(id)propertyValues inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x35453259
+ (void)populateStaticItemsOfDynamicContainersInLibrary:(id)library;	// 0x35484989
+ (id)predicateForCriteriaList:(SearchCriteriaList *)criteriaList dynamicCriteria:(BOOL)criteria;	// 0x35482c61
+ (int)revisionTrackingCode;	// 0x354551ed
+ (id)sectionPropertyForProperty:(id)property;	// 0x35482279
+ (BOOL)smartCriteriaCanBeEvaluated:(id)evaluated;	// 0x354822dd
- (id)initWithDictionary:(id)dictionary inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x35452a3d
- (void)_accessCurrentSwappedPersisentIDsUsingBlock:(id)block;	// 0x35485d45
- (BOOL)_setSwappedItemPersistentIDs:(const long long *)ids size:(int)size;	// 0x35485cfd
- (BOOL)_setSwappedItemPersistentIDs:(const long long *)ids size:(int)size notify:(BOOL)notify;	// 0x35485a11
- (BOOL)addTrackWithPersistentID:(long long)persistentID;	// 0x35486a89
- (BOOL)addTracksWithPersistentIDs:(long long *)persistentIDs count:(unsigned)count;	// 0x35486ab5
- (BOOL)addTracksWithPersistentIDs:(long long *)persistentIDs count:(unsigned)count notify:(BOOL)notify;	// 0x35486ad9
- (void)bindPopulateStatement:(id)statement withStaticTrackPersistentID:(id)staticTrackPersistentID;	// 0x354848fd
// declared property getter: - (id)cloudDisplayOrderingTerms;	// 0x354844b5
- (void)didChangeValueForProperties:(const id *)properties count:(unsigned)count;	// 0x35482a29
// declared property getter: - (id)displayOrderingTerms;	// 0x35484531
// declared property getter: - (id)dynamicPredicate;	// 0x35484155
- (SearchCriteriaList *)importedCriteriaList;	// 0x35484065
- (BOOL)isCustomContainerOrderingDescending;	// 0x3548429d
// declared property getter: - (BOOL)isLimitOrderingDescending;	// 0x354841fd
// declared property getter: - (BOOL)isLimitedByCount;	// 0x354841b1
// declared property getter: - (id)limitOrderingTerms;	// 0x35484371
// declared property getter: - (long long)limitValue;	// 0x354843ed
// declared property getter: - (id)limitingProperty;	// 0x354842e9
- (BOOL)moveTrackFromIndex:(unsigned)index toIndex:(unsigned)index2;	// 0x35486ea5
- (id)populateSQLWithStaticTrackPersistentID:(id)staticTrackPersistentID;	// 0x35484705
- (BOOL)removeAllTracks;	// 0x35485d21
- (BOOL)removeTracksAtIndexes:(id)indexes;	// 0x354868fd
- (BOOL)removeTracksAtIndexes:(id)indexes notify:(BOOL)notify;	// 0x354868d9
- (BOOL)removeTracksAtIndexes:(id)indexes notify:(BOOL)notify indexesTransformBlock:(id)block;	// 0x354860b5
- (BOOL)removeTracksWithPersistentIDs:(const long long *)persistentIDs atFilteredIndexes:(id)filteredIndexes;	// 0x3548691d
- (BOOL)setContainsTrack:(BOOL)track forPersistentID:(long long)persistentID notify:(BOOL)notify;	// 0x354865d9
- (BOOL)setTracksWithPersistentIDs:(const long long *)persistentIDs count:(unsigned)count;	// 0x354872e5
- (BOOL)setTracksWithPersistentIDs:(const long long *)persistentIDs count:(unsigned)count notify:(BOOL)notify;	// 0x35487309
- (BOOL)setTracksWithSwappedPersistentIDData:(id)swappedPersistentIDData;	// 0x35487681
- (BOOL)setValue:(id)value forProperty:(id)property;	// 0x35482549
// declared property getter: - (id)staticPredicate;	// 0x354840f9
@end

