/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/CoreData.framework/CoreData
 */

#import <NSObject.h> // Unknown library
#import "CoreData-Structs.h"

@class NSArray, NSSQLAdapter, NSSQLStatement;

@interface NSSQLConnection : NSObject {
	NSSQLAdapter *_adapter;	// 4 = 0x4
	BOOL _transactionIsOpen;	// 8 = 0x8
	BOOL _useSyntaxColoredLogging;	// 9 = 0x9
	int _debug;	// 12 = 0xc
	NSSQLStatement *_sqlStatement;	// 16 = 0x10
	NSArray *_columnsToFetch;	// 20 = 0x14
	NSArray *_metadataColumns;	// 24 = 0x18
}
@property(readonly, retain) NSSQLAdapter *adapter;	// G=0x3347e4e1; converted property
@property(retain) NSArray *columnsToFetch;	// G=0x334812f5; S=0x33481315; converted property
@property(readonly, retain) NSArray *metadataColumns;	// G=0x33481359; converted property
@property(readonly, retain) NSSQLStatement *sqlStatement;	// G=0x33480ca9; converted property
+ (void)initialize;	// 0x334a37cd
- (id)initWithAdapter:(id)adapter;	// 0x3347d9c5
- (void)_forceDisconnectOnError;	// 0x33519cd9
- (void)_performPostSaveTasks;	// 0x3351b4cd
- (void)_raiseOptimisticLockingExceptionWithReason:(id)reason;	// 0x33519b3d
// converted property getter: - (id)adapter;	// 0x3347e4e1
- (void)addPeerRange:(id)range;	// 0x3351b56d
- (void)addPeerRangeForPeerID:(id)peerID entityName:(id)name rangeStart:(id)start rangeEnd:(id)end peerRangeStart:(id)start5 peerRangeEnd:(id)end6;	// 0x3351b5a1
- (id)allPeerRanges;	// 0x3351b5d5
- (void)awake;	// 0x33519c89
- (void)beginTransaction;	// 0x33519bb9
- (BOOL)canConnect;	// 0x33519dfd
// converted property getter: - (id)columnsToFetch;	// 0x334812f5
- (void)commitTransaction;	// 0x33519bed
- (void)connect;	// 0x33519c55
- (void)createIndexesForEntity:(id)entity;	// 0x3351a50d
- (void)createManyToManyTablesForEntity:(id)entity;	// 0x3351a415
- (id)createMapOfEntityNameToPKMaxForEntities:(id)entities;	// 0x3351b671
- (id)createMapOfEntityNameToPKMaxForEntitiesFromPKTable:(id)pktable;	// 0x3351b63d
- (id)createMapOfEntityNameToPKMaxForEntitiesFromUBRangeTable:(id)ubrangeTable;	// 0x3351b609
- (void)createMetadata;	// 0x3351ab31
- (void)createPrimaryKeyTableForModel:(id)model knownEmpty:(BOOL)empty;	// 0x3351b3b1
- (void)createSchema;	// 0x3351ac05
- (void)createTableForEntity:(id)entity;	// 0x3351a3a1
- (void)createTablesForEntities:(id)entities;	// 0x3351aa91
- (BOOL)databaseIsEmpty;	// 0x33519e31
- (void)dealloc;	// 0x3349ca01
- (void)deleteCorrelation:(id)correlation;	// 0x33519f35
- (void)deleteRow:(id)row;	// 0x33519f9d
- (id)describeResults;	// 0x3351a0e5
- (void)didCreateSchema;	// 0x3351ac01
- (void)disconnect;	// 0x33519c91
- (void)endFetch;	// 0x3351a181
- (void)endPrimaryKeyGeneration;	// 0x3351b379
- (void)execute;	// 0x3351a005
- (long long)fetchMaxPrimaryKeyForEntity:(id)entity;	// 0x3351af31
- (id)fetchMetadata;	// 0x3347f6bd
- (int)fetchResultSet:(void *)set usingFetchPlan:(id)plan;	// 0x3351a14d
- (id)fetchTableCreationSQL;	// 0x3351af99
- (id)fetchTableNames;	// 0x3351af65
- (id)fetchUbiqiutyKnowledgeVector;	// 0x3351b4d1
- (void)finalize;	// 0x33519b79
- (void)forceTransactionClosed;	// 0x33519cc5
- (long long)generatePrimaryKeysForEntity:(id)entity batch:(unsigned)batch;	// 0x3351b36d
- (BOOL)hasMetadataTable;	// 0x3351afcd
- (BOOL)hasOpenTransaction;	// 0x3349c469
- (BOOL)hasPrimaryKeyTable;	// 0x3351b37d
- (void)insertCorrelation:(id)correlation;	// 0x33519ecd
- (void)insertRow:(id)row;	// 0x33519e99
- (BOOL)isFetchInProgress;	// 0x3351a0b1
- (BOOL)isOpen;	// 0x33519e65
// converted property getter: - (id)metadataColumns;	// 0x33481359
- (id)newFetchedArray;	// 0x3351a119
- (void)performAdapterOperation:(id)operation;	// 0x3351a1b5
- (void)performAdapterOperations:(id)operations;	// 0x3351a2e9
- (void)prepareAndExecuteSQLStatement:(id)statement;	// 0x3351a065
- (void)prepareForPrimaryKeyGeneration;	// 0x3351b375
- (void)prepareSQLStatement:(id)statement;	// 0x33480335
- (CFArrayRef)rawIntegerRowsForSQL:(id)sql;	// 0x3351aefd
- (void)releaseSQLStatement;	// 0x334821a1
- (void)resetSQLStatement;	// 0x3351a039
- (void)rollbackTransaction;	// 0x33519c21
- (void)saveMetadata:(id)metadata;	// 0x3351b001
- (void)selectAttributes:(id)attributes fetchRequest:(id)request lock:(BOOL)lock entity:(id)entity;	// 0x33519fd1
// converted property setter: - (void)setColumnsToFetch:(id)fetch;	// 0x33481315
- (void)setExclusiveLockingMode:(BOOL)mode;	// 0x3351a0ad
- (void)setUbiquityTableValue:(id)value forKey:(id)key;	// 0x3351b6a5
- (void)sleep;	// 0x33519c8d
// converted property getter: - (id)sqlStatement;	// 0x33480ca9
- (void)transactionDidBegin;	// 0x33519ce9
- (void)transactionDidCommit;	// 0x33519d45
- (void)transactionDidRollback;	// 0x33519da1
- (id)ubiquityTableKeysAndValues;	// 0x3351b6d9
- (id)ubiquityTableValueForKey:(id)key;	// 0x3351b70d
- (void)updateCorrelation:(id)correlation;	// 0x33519f01
- (void)updateRow:(id)row;	// 0x33519f69
- (void)updateUbiquityKnowledgeForPeerWithID:(id)anId andTransactionNumber:(id)number;	// 0x3351b539
- (void)updateUbiquityKnowledgeVector:(id)vector;	// 0x3351b505
- (void)willCreateSchema;	// 0x3351abfd
@end

