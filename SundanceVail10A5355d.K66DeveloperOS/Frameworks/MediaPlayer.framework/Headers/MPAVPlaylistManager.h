/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

#import "MPAVQueuePlayerFeederSource.h"
#import <NSObject.h> // Unknown library
#import "MediaPlayer-Structs.h"

@class NSString, MPAVItem, MPAVQueuePlayerFeeder, MPQueuePlayer;
@protocol MPAVPlaylistFeeder;

@interface MPAVPlaylistManager : NSObject <MPAVQueuePlayerFeederSource> {
	NSString *_audioSessionModeOverride;	// 4 = 0x4
	MPAVItem *_currentItem;	// 8 = 0x8
	MPAVQueuePlayerFeeder *_feeder;	// 12 = 0xc
	BOOL _goToTargetIndex;	// 16 = 0x10
	int _isChangingPlaylistFeeder;	// 20 = 0x14
	int _lastSelectionDirection;	// 24 = 0x18
	MPQueuePlayer *_player;	// 28 = 0x1c
	id<MPAVPlaylistFeeder> _playlistFeeder;	// 32 = 0x20
	int _repeatMode;	// 36 = 0x24
	int _retainCount;	// 40 = 0x28
	int _targetIndex;	// 44 = 0x2c
	BOOL _updatedAudioSessionMode;	// 48 = 0x30
}
@property(retain, nonatomic) NSString *audioSessionModeOverride;	// G=0x33760d29; S=0x33760d39; @synthesize=_audioSessionModeOverride
@property(readonly, assign, nonatomic) BOOL canChangePlaylistFeeder;	// G=0x337603e9; 
@property(readonly, assign) int currentIndex;	// G=0x3376030d; 
@property(readonly, assign) MPAVItem *currentItem;	// G=0x33760d49; @synthesize=_currentItem
@property(assign, nonatomic) BOOL forceSynchronousQueueFilling;	// G=0x3375fe0d; S=0x3375fe95; 
@property(readonly, assign, nonatomic) BOOL isChangingPlaylistFeeder;	// G=0x337603d1; 
@property(readonly, assign) int lastSelectionDirection;	// G=0x33760d81; @synthesize=_lastSelectionDirection
@property(assign, nonatomic) BOOL managesSystemDownloads;	// G=0x3375fe31; S=0x3375feb5; 
@property(assign, nonatomic) unsigned maxQueueDepth;	// G=0x3375fe55; S=0x3375fed5; 
@property(assign, nonatomic) unsigned minQueueDepth;	// G=0x3375fe75; S=0x3375fef5; 
@property(readonly, assign) MPQueuePlayer *player;	// G=0x33760d5d; @synthesize=_player
@property(retain, nonatomic) id<MPAVPlaylistFeeder> playlistFeeder;	// G=0x33760d71; S=0x33760401; @synthesize=_playlistFeeder
@property(assign) int repeatMode;	// G=0x33760341; S=0x33760351; 
- (id)init;	// 0x3375f5f1
- (void)_assetCancelNotification:(id)notification;	// 0x3375fad9
- (id)_audioSessionModeForMediaType:(int)mediaType;	// 0x33760b15
- (id)_feeder;	// 0x33760b05
- (id)_feederItemForIndex:(int)index;	// 0x3375ff75
- (BOOL)_isDeallocating;	// 0x3375f5c5
- (id)_itemToFollowItemIndex:(int)followItemIndex skipUnavailableContent:(BOOL)content;	// 0x337608fd
- (void)_mediaLibraryDisplayValuesDidChangeNotification:(id)_mediaLibraryDisplayValues;	// 0x3375fcc1
- (void)_networkTypeDidChangeNotification:(id)_networkType;	// 0x3375fd3d
- (int)_nextItemIndex:(int)index repeatMode:(int)mode;	// 0x3376080d
- (int)_prepareToQueuePlaybackIndex:(int)queuePlaybackIndex selectionDirection:(int)direction;	// 0x3376009d
- (void)_reloadQueuedItemsIfPathBecameAvailable;	// 0x33760589
- (BOOL)_tryRetain;	// 0x3375f575
- (void)_updateAudioSessionMode;	// 0x33760b55
// declared property getter: - (id)audioSessionModeOverride;	// 0x33760d29
// declared property getter: - (BOOL)canChangePlaylistFeeder;	// 0x337603e9
- (void)contentInvalidated;	// 0x337607ad
- (void)contentInvalidatedWithCurrentItemMovedToIndex:(unsigned)index;	// 0x33760765
- (void)contentInvalidatedWithNewIndex:(unsigned)newIndex;	// 0x337607cd
- (void)contentsDidChangeByRemovingRange:(NSRange)contents;	// 0x3376069d
// declared property getter: - (int)currentIndex;	// 0x3376030d
// declared property getter: - (id)currentItem;	// 0x33760d49
- (void)dealloc;	// 0x3375f7e1
// declared property getter: - (BOOL)forceSynchronousQueueFilling;	// 0x3375fe0d
// declared property getter: - (BOOL)isChangingPlaylistFeeder;	// 0x337603d1
// declared property getter: - (int)lastSelectionDirection;	// 0x33760d81
// declared property getter: - (BOOL)managesSystemDownloads;	// 0x3375fe31
// declared property getter: - (unsigned)maxQueueDepth;	// 0x3375fe55
// declared property getter: - (unsigned)minQueueDepth;	// 0x3375fe75
- (void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void *)context;	// 0x3375f961
// declared property getter: - (id)player;	// 0x33760d5d
// declared property getter: - (id)playlistFeeder;	// 0x33760d71
- (id)queuePlayerFeeder:(id)feeder itemToFollowItem:(id)followItem;	// 0x337609e1
- (BOOL)queuePlayerFeeder:(id)feeder willInsertItem:(id)item;	// 0x33760a1d
- (void)queuePlayerFeeder:(id)feeder willRemoveItem:(id)item;	// 0x33760a19
- (void)queuePlayerFeederDidUpdateQueue:(id)queuePlayerFeeder queuedItems:(id)items dequeuedItems:(id)items3;	// 0x33760a21
- (void)queuePlayerFeederFailedToQueueAnyItems:(id)queueAnyItems;	// 0x33760a99
- (oneway void)release;	// 0x3375f4ed
// declared property getter: - (int)repeatMode;	// 0x33760341
- (id)retain;	// 0x3375f4b5
- (unsigned)retainCount;	// 0x3375f561
// declared property setter: - (void)setAudioSessionModeOverride:(id)override;	// 0x33760d39
- (void)setCurrentIndex:(int)index selectionDirection:(int)direction;	// 0x33760231
// declared property setter: - (void)setForceSynchronousQueueFilling:(BOOL)filling;	// 0x3375fe95
// declared property setter: - (void)setManagesSystemDownloads:(BOOL)downloads;	// 0x3375feb5
// declared property setter: - (void)setMaxQueueDepth:(unsigned)depth;	// 0x3375fed5
// declared property setter: - (void)setMinQueueDepth:(unsigned)depth;	// 0x3375fef5
// declared property setter: - (void)setPlaylistFeeder:(id)feeder;	// 0x33760401
- (BOOL)setPlaylistFeeder:(id)feeder startIndex:(int)index;	// 0x337604f1
// declared property setter: - (void)setRepeatMode:(int)mode;	// 0x33760351
- (void)updateForSoundCheckDefaultsChange;	// 0x3375ff15
@end

