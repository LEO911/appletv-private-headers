/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/EventKit.framework/EventKit
 */

#import "EKCalendarItem.h"
#import "EventKit-Structs.h"

@class NSNumber, NSDate, EKParticipant, NSString, EKCalendarDate;

@interface EKEvent : EKCalendarItem {
	EKCalendarDate *_occurrenceStartDate;	// 40 = 0x28
	EKCalendarDate *_occurrenceEndDate;	// 44 = 0x2c
	BOOL _occurrenceIsAllDay;	// 48 = 0x30
	EKCalendarDate *_originalOccurrenceStartDate;	// 52 = 0x34
	EKCalendarDate *_originalOccurrenceEndDate;	// 56 = 0x38
	NSNumber *_originalOccurrenceIsAllDay;	// 60 = 0x3c
}
@property(assign, nonatomic, getter=isAllDay) BOOL allDay;	// G=0x31f60abd; S=0x31f69d41; 
@property(assign, nonatomic) int availability;	// G=0x31fac95d; S=0x31fac9b1; 
@property(readonly, assign, nonatomic) int birthdayPersonID;	// G=0x31fac835; 
@property(copy, nonatomic) NSDate *endDate;	// G=0x31f60c95; S=0x31f6a301; 
@property(readonly, assign, nonatomic) NSString *eventIdentifier;	// G=0x31f67b61; 
@property(assign) unsigned invitationStatus;	// G=0x31faca51; S=0x31faca85; converted property
@property(readonly, assign, nonatomic) BOOL isDetached;	// G=0x31f69b4d; 
@property(assign) unsigned modifiedProperties;	// G=0x31fac559; S=0x31fac58d; converted property
@property(assign) BOOL needsOccurrenceCacheUpdate;	// G=0x31fac5d1; S=0x31fac5f5; converted property
@property(copy, nonatomic) EKCalendarDate *occurrenceEndDate;	// G=0x31f60289; S=0x31f60aad; @synthesize=_occurrenceEndDate
@property(assign, nonatomic) BOOL occurrenceIsAllDay;	// G=0x31fafc7d; S=0x31f5fd19; @synthesize=_occurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *occurrenceStartDate;	// G=0x31f60a99; S=0x31f5fcb9; @synthesize=_occurrenceStartDate
@property(readonly, assign, nonatomic) EKParticipant *organizer;	// G=0x31f67d21; 
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate;	// G=0x31f6abb5; S=0x31f6a245; @synthesize=_originalOccurrenceEndDate
@property(copy, nonatomic) NSNumber *originalOccurrenceIsAllDay;	// G=0x31f6abdd; S=0x31f68c95; @synthesize=_originalOccurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate;	// G=0x31f6ab91; S=0x31f6a235; @synthesize=_originalOccurrenceStartDate
@property(assign) int participationStatus;	// G=0x31f68475; S=0x31fac639; converted property
@property(retain) id recurrenceRule;	// G=0x31fac8ad; S=0x31fac8f9; converted property
@property(retain) id responseComment;	// G=0x31faca19; S=0x31faca35; converted property
@property(copy, nonatomic) NSDate *startDate;	// G=0x31f60c75; S=0x31f6a009; 
@property(readonly, assign, nonatomic) int status;	// G=0x31f62525; 
+ (id)eventWithEventStore:(id)eventStore;	// 0x31f6b461
- (id)init;	// 0x31fabf25
- (id)initWithEventStore:(id)eventStore;	// 0x31f685e9
- (id)initWithPersistentObject:(id)persistentObject;	// 0x31fabf61
- (id)initWithPersistentObject:(id)persistentObject occurrenceDate:(id)date;	// 0x31f5f835
- (BOOL)_cancelWithSpan:(int)span error:(id *)error;	// 0x31faf041
- (BOOL)_checkStartDateConstraintAgainstDate:(XXStruct_lQVxyC)date timeZone:(id)zone error:(id *)error;	// 0x31f6e135
- (id)_dateForNextOccurrence;	// 0x31fad405
- (void)_deleteThisOccurrence;	// 0x31fae6b9
- (BOOL)_deleteWithSpan:(int)span error:(id *)error;	// 0x31f746a1
- (void)_detachWithStartDate:(id)startDate newStartDate:(id)date future:(BOOL)future;	// 0x31faf1c9
- (id)_effectiveTimeZone;	// 0x31f6a255
- (XXStruct_lQVxyC)_gregorianDateCorrectedForTimeZoneFromCalendarDate:(id)calendarDate orNSDate:(id)date;	// 0x31fac3a5
- (BOOL)_isAlarmAcknowledgedPropertyDirty;	// 0x31fad1a1
- (BOOL)_isAllDay;	// 0x31f5fcc9
- (BOOL)_isInitialOccurrenceDate:(id)date;	// 0x31f744b5
- (BOOL)_occurrenceExistsOnDate:(double)date timeZone:(id)zone;	// 0x31fae399
- (int)_parentParticipationStatus;	// 0x31fac7f5
- (id)_persistentEvent;	// 0x31f60369
- (void)_sendModifiedNote;	// 0x31f6b3cd
- (BOOL)_shouldCancelInsteadOfDeleteWithSpan:(int)span;	// 0x31f745a1
- (BOOL)_shouldDeclineInsteadOfDelete;	// 0x31fae5ed
- (BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(int)recurrenceInterval;	// 0x31fad76d
- (BOOL)_validateDatesAndRecurrencesGivenSpan:(int)span error:(id *)error;	// 0x31f6dd3d
- (BOOL)_validateDurationConstrainedToRecurrenceInterval;	// 0x31fad571
- (int)alarmCount;	// 0x31fac885
- (BOOL)allowsAlarmModifications;	// 0x31f6e231
- (BOOL)allowsCalendarModifications;	// 0x31face89
- (BOOL)allowsRecurrenceModifications;	// 0x31f69ac5
- (id)attachments;	// 0x31f67c2d
- (int)attendeeCount;	// 0x31fac85d
- (id)attendees;	// 0x31f67dc1
// declared property getter: - (int)availability;	// 0x31fac95d
// declared property getter: - (int)birthdayPersonID;	// 0x31fac835
- (id)birthdayTitleWithAddressBook:(void *)addressBook;	// 0x31fac1ed
- (BOOL)canBeRespondedTo;	// 0x31f68209
- (BOOL)canDetachSingleOccurrence;	// 0x31facf25
- (BOOL)canMoveToCalendar:(id)calendar fromCalendar:(id)calendar2 error:(id *)error;	// 0x31facc51
- (BOOL)canSetAvailability;	// 0x31facfe9
- (void)clearInvitationStatus;	// 0x31facac9
- (BOOL)commitWithSpan:(int)span error:(id *)error;	// 0x31f6e35d
- (id)committedValueForKey:(id)key;	// 0x31f6921d
- (int)compareStartDateWithEvent:(id)event;	// 0x31f60bf1
- (BOOL)dateChanged;	// 0x31facafd
- (void)dealloc;	// 0x31f68e29
- (id)description;	// 0x31fad061
- (void)didCommit;	// 0x31f72a9d
- (id)dirtyPropertiesToSkip;	// 0x31fad2a1
- (double)duration;	// 0x31f63aa9
- (id)endCalendarDate;	// 0x31f60279
// declared property getter: - (id)endDate;	// 0x31f60c95
- (XXStruct_lQVxyC)endDateGr;	// 0x31f63a4d
- (XXStruct_lQVxyC)endDatePinnedForAllDay;	// 0x31fac4e5
// declared property getter: - (id)eventIdentifier;	// 0x31f67b61
- (id)eventStore;	// 0x31f62791
- (id)exportToICS;	// 0x31fac0a5
- (id)externalId;	// 0x31facf99
- (id)externalURI;	// 0x31fabf75
- (id)externalURL;	// 0x31fabf85
- (BOOL)hasSelfAttendee;	// 0x31fad035
- (unsigned)hash;	// 0x31f60acd
- (id)initialEndDate;	// 0x31fac32d
- (id)initialStartDate;	// 0x31fac2d1
// converted property getter: - (unsigned)invitationStatus;	// 0x31faca51
// declared property getter: - (BOOL)isAllDay;	// 0x31f60abd
- (BOOL)isAllDayDirty;	// 0x31fac12d
// declared property getter: - (BOOL)isDetached;	// 0x31f69b4d
- (BOOL)isDirtyIgnoringCalendar;	// 0x31fac14d
- (BOOL)isEndDateDirty;	// 0x31fac10d
- (BOOL)isEqual:(id)equal;	// 0x31f60b29
- (BOOL)isStartDateDirty;	// 0x31fac0ed
- (BOOL)isStatusDirty;	// 0x31fac0cd
- (BOOL)isTentative;	// 0x31facbad
- (BOOL)locationChanged;	// 0x31facb81
// converted property getter: - (unsigned)modifiedProperties;	// 0x31fac559
// converted property getter: - (BOOL)needsOccurrenceCacheUpdate;	// 0x31fac5d1
- (id)occurrenceDate;	// 0x31f69989
// declared property getter: - (id)occurrenceEndDate;	// 0x31f60289
// declared property getter: - (BOOL)occurrenceIsAllDay;	// 0x31fafc7d
// declared property getter: - (id)occurrenceStartDate;	// 0x31f60a99
// declared property getter: - (id)organizer;	// 0x31f67d21
// declared property getter: - (id)originalOccurrenceEndDate;	// 0x31f6abb5
// declared property getter: - (id)originalOccurrenceIsAllDay;	// 0x31f6abdd
// declared property getter: - (id)originalOccurrenceStartDate;	// 0x31f6ab91
// converted property getter: - (int)participationStatus;	// 0x31f68475
- (int)pendingParticipationStatus;	// 0x31facf71
// converted property getter: - (id)recurrenceRule;	// 0x31fac8ad
- (BOOL)refresh;	// 0x31f6ac75
- (BOOL)removeWithSpan:(int)span error:(id *)error;	// 0x31f7437d
- (BOOL)requiresDetach;	// 0x31f6cead
// converted property getter: - (id)responseComment;	// 0x31faca19
- (BOOL)responseMustApplyToAll;	// 0x31facefd
- (void)revert;	// 0x31fad2f9
- (void)rollback;	// 0x31f6a5e9
// declared property setter: - (void)setAllDay:(BOOL)day;	// 0x31f69d41
// declared property setter: - (void)setAvailability:(int)availability;	// 0x31fac9b1
// declared property setter: - (void)setEndDate:(id)date;	// 0x31f6a301
// converted property setter: - (void)setInvitationStatus:(unsigned)status;	// 0x31faca85
// converted property setter: - (void)setModifiedProperties:(unsigned)properties;	// 0x31fac58d
// converted property setter: - (void)setNeedsOccurrenceCacheUpdate:(BOOL)update;	// 0x31fac5f5
// declared property setter: - (void)setOccurrenceEndDate:(id)date;	// 0x31f60aad
// declared property setter: - (void)setOccurrenceIsAllDay:(BOOL)day;	// 0x31f5fd19
// declared property setter: - (void)setOccurrenceStartDate:(id)date;	// 0x31f5fcb9
// declared property setter: - (void)setOriginalOccurrenceEndDate:(id)date;	// 0x31f6a245
// declared property setter: - (void)setOriginalOccurrenceIsAllDay:(id)day;	// 0x31f68c95
// declared property setter: - (void)setOriginalOccurrenceStartDate:(id)date;	// 0x31f6a235
// converted property setter: - (void)setParticipationStatus:(int)status;	// 0x31fac639
// converted property setter: - (void)setRecurrenceRule:(id)rule;	// 0x31fac8f9
// converted property setter: - (void)setResponseComment:(id)comment;	// 0x31faca35
// declared property setter: - (void)setStartDate:(id)date;	// 0x31f6a009
- (void)setTimeZone:(id)zone;	// 0x31f68ca5
- (id)startCalendarDate;	// 0x31f60269
// declared property getter: - (id)startDate;	// 0x31f60c75
- (XXStruct_lQVxyC)startDateGr;	// 0x31f639f1
- (XXStruct_lQVxyC)startDatePinnedForAllDay;	// 0x31fac47d
// declared property getter: - (int)status;	// 0x31f62525
- (BOOL)timeChanged;	// 0x31facb29
- (BOOL)titleChanged;	// 0x31facb55
- (id)uniqueId;	// 0x31facfc1
- (BOOL)validateWithSpan:(int)span error:(id *)error;	// 0x31f6d32d
@end

