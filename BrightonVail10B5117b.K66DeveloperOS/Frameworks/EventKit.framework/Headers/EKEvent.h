/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/EventKit.framework/EventKit
 */

#import "EventKit-Structs.h"
#import "EKCalendarItem.h"

@class NSString, EKCalendarDate, NSNumber, NSDate, EKParticipant;

@interface EKEvent : EKCalendarItem {
	EKCalendarDate *_occurrenceStartDate;	// 40 = 0x28
	EKCalendarDate *_occurrenceEndDate;	// 44 = 0x2c
	BOOL _occurrenceIsAllDay;	// 48 = 0x30
	EKCalendarDate *_originalOccurrenceStartDate;	// 52 = 0x34
	EKCalendarDate *_originalOccurrenceEndDate;	// 56 = 0x38
	NSNumber *_originalOccurrenceIsAllDay;	// 60 = 0x3c
}
@property(assign, nonatomic, getter=isAllDay) BOOL allDay;	// G=0x3188fd51; S=0x31899ef9; 
@property(assign, nonatomic) int availability;	// G=0x31897c79; S=0x318d940d; 
@property(readonly, assign, nonatomic) int birthdayPersonID;	// G=0x3188fd61; 
@property(copy, nonatomic) NSDate *endDate;	// G=0x318911c9; S=0x3189a4b9; 
@property(readonly, assign, nonatomic) NSString *eventIdentifier;	// G=0x31895d6d; 
@property(assign) unsigned invitationStatus;	// G=0x318d94ad; S=0x318d94e1; converted property
@property(readonly, assign, nonatomic) BOOL isDetached;	// G=0x318990f5; 
@property(assign) unsigned modifiedProperties;	// G=0x318d9031; S=0x318d9065; converted property
@property(assign) BOOL needsOccurrenceCacheUpdate;	// G=0x318d90a9; S=0x318d90cd; converted property
@property(copy, nonatomic) EKCalendarDate *occurrenceEndDate;	// G=0x318911f1; S=0x318919f1; @synthesize=_occurrenceEndDate
@property(assign, nonatomic) BOOL occurrenceIsAllDay;	// G=0x318dccf1; S=0x3188e105; @synthesize=_occurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *occurrenceStartDate;	// G=0x31890885; S=0x3188df91; @synthesize=_occurrenceStartDate
@property(readonly, assign, nonatomic) EKParticipant *organizer;	// G=0x31891cc9; 
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate;	// G=0x31899ebd; S=0x3189a3fd; @synthesize=_originalOccurrenceEndDate
@property(copy, nonatomic) NSNumber *originalOccurrenceIsAllDay;	// G=0x31899ee5; S=0x318984b1; @synthesize=_originalOccurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate;	// G=0x31899e99; S=0x3189a3ed; @synthesize=_originalOccurrenceStartDate
@property(assign) int participationStatus;	// G=0x31891fdd; S=0x318d9111; converted property
@property(retain) id recurrenceRule;	// G=0x318d935d; S=0x318d93a9; converted property
@property(retain) id responseComment;	// G=0x318d9475; S=0x318d9491; converted property
@property(copy, nonatomic) NSDate *startDate;	// G=0x318911a9; S=0x3189a1c1; 
@property(readonly, assign, nonatomic) int status;	// G=0x31890cf1; 
+ (id)eventWithEventStore:(id)eventStore;	// 0x3189aa39
- (id)init;	// 0x318d8b1d
- (id)initWithEventStore:(id)eventStore;	// 0x31897e09
- (id)initWithPersistentObject:(id)persistentObject;	// 0x318d8b59
- (id)initWithPersistentObject:(id)persistentObject occurrenceDate:(id)date;	// 0x3188dcd9
- (BOOL)_cancelWithSpan:(int)span error:(id *)error;	// 0x318dbe91
- (BOOL)_checkStartDateConstraintAgainstDate:(XXStruct_lQVxyC)date timeZone:(id)zone error:(id *)error;	// 0x3189cfb1
- (id)_dateForNextOccurrence;	// 0x318d9fc9
- (void)_deleteThisOccurrence;	// 0x318db509
- (BOOL)_deleteWithSpan:(int)span error:(id *)error;	// 0x318db369
- (void)_detachWithStartDate:(id)startDate newStartDate:(id)date future:(BOOL)future;	// 0x318dc23d
- (id)_effectiveTimeZone;	// 0x3189a40d
- (XXStruct_lQVxyC)_gregorianDateCorrectedForTimeZoneFromCalendarDate:(id)calendarDate orNSDate:(id)date;	// 0x31892c1d
- (BOOL)_isAlarmAcknowledgedPropertyDirty;	// 0x3189cab9
- (BOOL)_isAllDay;	// 0x3188dfb1
- (BOOL)_isInitialOccurrenceDate:(id)date;	// 0x318dc019
- (BOOL)_occurrenceExistsOnDate:(double)date timeZone:(id)zone;	// 0x318daf5d
- (int)_parentParticipationStatus;	// 0x318d92cd
- (id)_persistentEvent;	// 0x3188fd89
- (void)_sendModifiedNote;	// 0x318d8de5
- (BOOL)_shouldCancelInsteadOfDeleteWithSpan:(int)span;	// 0x318db1b1
- (BOOL)_shouldDeclineInsteadOfDelete;	// 0x318db29d
- (BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(int)recurrenceInterval;	// 0x318da331
- (BOOL)_validateDatesAndRecurrencesGivenSpan:(int)span error:(id *)error;	// 0x3189cbb9
- (BOOL)_validateDurationConstrainedToRecurrenceInterval;	// 0x318da135
- (int)alarmCount;	// 0x318d9335
- (BOOL)allowsAlarmModifications;	// 0x318d9a71
- (BOOL)allowsCalendarModifications;	// 0x318d98e5
- (BOOL)allowsRecurrenceModifications;	// 0x3189906d
- (id)attachments;	// 0x318961b9
- (int)attendeeCount;	// 0x318d930d
- (id)attendees;	// 0x31896891
// declared property getter: - (int)availability;	// 0x31897c79
// declared property getter: - (int)birthdayPersonID;	// 0x3188fd61
- (id)birthdayTitleWithAddressBook:(void *)addressBook;	// 0x3188fdb5
- (BOOL)canBeRespondedTo;	// 0x31897761
- (BOOL)canDetachSingleOccurrence;	// 0x318d9981
- (BOOL)canMoveToCalendar:(id)calendar fromCalendar:(id)calendar2 error:(id *)error;	// 0x318d96ad
- (BOOL)canSetAvailability;	// 0x31897c2d
- (void)clearInvitationStatus;	// 0x318d9525
- (BOOL)commitWithSpan:(int)span error:(id *)error;	// 0x3189d311
- (id)committedValueForKey:(id)key;	// 0x318988c9
- (int)compareStartDateWithEvent:(id)event;	// 0x3189a8cd
- (BOOL)dateChanged;	// 0x318d9559
- (void)dealloc;	// 0x318953e9
- (id)description;	// 0x318d9ab9
- (void)didCommit;	// 0x318a17e1
- (id)dirtyPropertiesToSkip;	// 0x318d9e65
- (double)duration;	// 0x318d8e29
- (id)endCalendarDate;	// 0x31891fcd
// declared property getter: - (id)endDate;	// 0x318911c9
- (XXStruct_lQVxyC)endDateGr;	// 0x31897ab1
- (XXStruct_lQVxyC)endDatePinnedForAllDay;	// 0x318d8fbd
// declared property getter: - (id)eventIdentifier;	// 0x31895d6d
- (id)eventStore;	// 0x31890b95
- (id)exportToICS;	// 0x318d8c9d
- (id)externalId;	// 0x318d99f5
- (id)externalURI;	// 0x318d8b6d
- (id)externalURL;	// 0x318d8b7d
- (BOOL)hasSelfAttendee;	// 0x318d9a45
- (unsigned)hash;	// 0x31890829
- (id)initialEndDate;	// 0x318d8edd
- (id)initialStartDate;	// 0x318d8e81
// converted property getter: - (unsigned)invitationStatus;	// 0x318d94ad
// declared property getter: - (BOOL)isAllDay;	// 0x3188fd51
- (BOOL)isAllDayDirty;	// 0x318d8d25
// declared property getter: - (BOOL)isDetached;	// 0x318990f5
- (BOOL)isDirtyIgnoringCalendar;	// 0x318d8d45
- (BOOL)isEndDateDirty;	// 0x318d8d05
- (BOOL)isEqual:(id)equal;	// 0x31890899
- (BOOL)isStartDateDirty;	// 0x318d8ce5
- (BOOL)isStatusDirty;	// 0x318d8cc5
- (BOOL)isTentative;	// 0x318d9609
- (BOOL)locationChanged;	// 0x318d95dd
// converted property getter: - (unsigned)modifiedProperties;	// 0x318d9031
// converted property getter: - (BOOL)needsOccurrenceCacheUpdate;	// 0x318d90a9
- (id)occurrenceDate;	// 0x31899035
// declared property getter: - (id)occurrenceEndDate;	// 0x318911f1
// declared property getter: - (BOOL)occurrenceIsAllDay;	// 0x318dccf1
// declared property getter: - (id)occurrenceStartDate;	// 0x31890885
// declared property getter: - (id)organizer;	// 0x31891cc9
// declared property getter: - (id)originalOccurrenceEndDate;	// 0x31899ebd
// declared property getter: - (id)originalOccurrenceIsAllDay;	// 0x31899ee5
// declared property getter: - (id)originalOccurrenceStartDate;	// 0x31899e99
// converted property getter: - (int)participationStatus;	// 0x31891fdd
- (int)pendingParticipationStatus;	// 0x318d99cd
// converted property getter: - (id)recurrenceRule;	// 0x318d935d
- (BOOL)refresh;	// 0x318d9bf9
- (BOOL)removeWithSpan:(int)span error:(id *)error;	// 0x318dc105
- (BOOL)requiresDetach;	// 0x3189bf95
// converted property getter: - (id)responseComment;	// 0x318d9475
- (BOOL)responseMustApplyToAll;	// 0x318d9959
- (void)revert;	// 0x318d9ebd
- (void)rollback;	// 0x31899969
// declared property setter: - (void)setAllDay:(BOOL)day;	// 0x31899ef9
// declared property setter: - (void)setAvailability:(int)availability;	// 0x318d940d
// declared property setter: - (void)setEndDate:(id)date;	// 0x3189a4b9
// converted property setter: - (void)setInvitationStatus:(unsigned)status;	// 0x318d94e1
// converted property setter: - (void)setModifiedProperties:(unsigned)properties;	// 0x318d9065
// converted property setter: - (void)setNeedsOccurrenceCacheUpdate:(BOOL)update;	// 0x318d90cd
// declared property setter: - (void)setOccurrenceEndDate:(id)date;	// 0x318919f1
// declared property setter: - (void)setOccurrenceIsAllDay:(BOOL)day;	// 0x3188e105
// declared property setter: - (void)setOccurrenceStartDate:(id)date;	// 0x3188df91
// declared property setter: - (void)setOriginalOccurrenceEndDate:(id)date;	// 0x3189a3fd
// declared property setter: - (void)setOriginalOccurrenceIsAllDay:(id)day;	// 0x318984b1
// declared property setter: - (void)setOriginalOccurrenceStartDate:(id)date;	// 0x3189a3ed
// converted property setter: - (void)setParticipationStatus:(int)status;	// 0x318d9111
// converted property setter: - (void)setRecurrenceRule:(id)rule;	// 0x318d93a9
// converted property setter: - (void)setResponseComment:(id)comment;	// 0x318d9491
// declared property setter: - (void)setStartDate:(id)date;	// 0x3189a1c1
- (void)setTimeZone:(id)zone;	// 0x318984c1
- (id)startCalendarDate;	// 0x3188fd41
// declared property getter: - (id)startDate;	// 0x318911a9
- (XXStruct_lQVxyC)startDateGr;	// 0x31892bc1
- (XXStruct_lQVxyC)startDatePinnedForAllDay;	// 0x318d8f55
// declared property getter: - (int)status;	// 0x31890cf1
- (BOOL)timeChanged;	// 0x318d9585
- (BOOL)titleChanged;	// 0x318d95b1
- (id)uniqueId;	// 0x318d9a1d
- (BOOL)validateWithSpan:(int)span error:(id *)error;	// 0x3189c1b1
@end

