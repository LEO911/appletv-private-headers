/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/CoreData.framework/CoreData
 */

#import "CoreData-Structs.h"
#import <NSObject.h> // Unknown library

@class NSArray, NSSQLAdapter, NSSQLStatement;

@interface NSSQLConnection : NSObject {
	NSSQLAdapter *_adapter;	// 4 = 0x4
	BOOL _transactionIsOpen;	// 8 = 0x8
	BOOL _useSyntaxColoredLogging;	// 9 = 0x9
	int _debug;	// 12 = 0xc
	NSSQLStatement *_sqlStatement;	// 16 = 0x10
	NSArray *_columnsToFetch;	// 20 = 0x14
	NSArray *_metadataColumns;	// 24 = 0x18
}
@property(readonly, retain) NSSQLAdapter *adapter;	// G=0x30ef17b5; converted property
@property(retain) NSArray *columnsToFetch;	// G=0x30ef2f1d; S=0x30ef2f3d; converted property
@property(readonly, retain) NSArray *metadataColumns;	// G=0x30ef2f81; converted property
@property(readonly, retain) NSSQLStatement *sqlStatement;	// G=0x30ef28d1; converted property
+ (void)initialize;	// 0x30eeedbd
- (id)initWithAdapter:(id)adapter;	// 0x30eef04d
- (void)_forceDisconnectOnError;	// 0x30f85ce5
- (void)_performPostSaveTasks;	// 0x30f874d9
- (void)_raiseOptimisticLockingExceptionWithReason:(id)reason;	// 0x30f85aa1
// converted property getter: - (id)adapter;	// 0x30ef17b5
- (void)addPeerRange:(id)range;	// 0x30f87579
- (void)addPeerRangeForPeerID:(id)peerID entityName:(id)name rangeStart:(id)start rangeEnd:(id)end peerRangeStart:(id)start5 peerRangeEnd:(id)end6;	// 0x30f875ad
- (id)allPeerRanges;	// 0x30f875e1
- (void)awake;	// 0x30f85c85
- (void)beginTransaction;	// 0x30f85bb5
- (BOOL)canConnect;	// 0x30f85e09
// converted property getter: - (id)columnsToFetch;	// 0x30ef2f1d
- (void)commitTransaction;	// 0x30f85be9
- (void)connect;	// 0x30f85c51
- (void)createIndexesForEntity:(id)entity;	// 0x30f86519
- (void)createManyToManyTablesForEntity:(id)entity;	// 0x30f86421
- (id)createMapOfEntityNameToPKMaxForEntities:(id)entities;	// 0x30f8767d
- (id)createMapOfEntityNameToPKMaxForEntitiesFromPKTable:(id)pktable;	// 0x30f87649
- (id)createMapOfEntityNameToPKMaxForEntitiesFromUBRangeTable:(id)ubrangeTable;	// 0x30f87615
- (void)createMetadata;	// 0x30f86b3d
- (void)createPrimaryKeyTableForModel:(id)model knownEmpty:(BOOL)empty;	// 0x30f873bd
- (void)createSchema;	// 0x30f86c11
- (void)createTableForEntity:(id)entity;	// 0x30f863ad
- (void)createTablesForEntities:(id)entities;	// 0x30f86a9d
- (BOOL)databaseIsEmpty;	// 0x30f85e3d
- (void)dealloc;	// 0x30f85b1d
- (void)deleteCorrelation:(id)correlation;	// 0x30f85f41
- (void)deleteRow:(id)row;	// 0x30f85fa9
- (id)describeResults;	// 0x30f860f1
- (void)didCreateSchema;	// 0x30f86c0d
- (void)disconnect;	// 0x30f85c8d
- (void)dropUbiquityTables;	// 0x30f8774d
- (void)endFetch;	// 0x30f8618d
- (void)endPrimaryKeyGeneration;	// 0x30f87385
- (void)execute;	// 0x30f86011
- (long long)fetchMaxPrimaryKeyForEntity:(id)entity;	// 0x30f86f3d
- (id)fetchMetadata;	// 0x30ef12d5
- (int)fetchResultSet:(void *)set usingFetchPlan:(id)plan;	// 0x30f86159
- (id)fetchTableCreationSQL;	// 0x30f86fa5
- (id)fetchTableNames;	// 0x30f86f71
- (id)fetchUbiquityKnowledgeVector;	// 0x30f874dd
- (void)finalize;	// 0x30f85add
- (void)forceTransactionClosed;	// 0x30f85cd1
- (long long)generatePrimaryKeysForEntity:(id)entity batch:(unsigned)batch;	// 0x30f87379
- (BOOL)hasMetadataTable;	// 0x30f86fd9
- (BOOL)hasOpenTransaction;	// 0x30f85cc1
- (BOOL)hasPrimaryKeyTable;	// 0x30f87389
- (void)insertCorrelation:(id)correlation;	// 0x30f85ed9
- (void)insertRow:(id)row;	// 0x30f85ea5
- (BOOL)isFetchInProgress;	// 0x30f860bd
- (BOOL)isOpen;	// 0x30f85e71
// converted property getter: - (id)metadataColumns;	// 0x30ef2f81
- (id)newFetchedArray;	// 0x30f86125
- (void)performAdapterOperation:(id)operation;	// 0x30f861c1
- (void)performAdapterOperations:(id)operations;	// 0x30f862f5
- (void)prepareAndExecuteSQLStatement:(id)statement;	// 0x30f86071
- (void)prepareForPrimaryKeyGeneration;	// 0x30f87381
- (void)prepareSQLStatement:(id)statement;	// 0x30ef1f5d
- (CFArrayRef)rawIntegerRowsForSQL:(id)sql;	// 0x30f86f09
- (void)releaseSQLStatement;	// 0x30ef3e29
- (void)resetSQLStatement;	// 0x30f86045
- (void)rollbackTransaction;	// 0x30f85c1d
- (void)saveMetadata:(id)metadata;	// 0x30f8700d
- (void)selectAttributes:(id)attributes fetchRequest:(id)request lock:(BOOL)lock entity:(id)entity;	// 0x30f85fdd
// converted property setter: - (void)setColumnsToFetch:(id)fetch;	// 0x30ef2f3d
- (void)setExclusiveLockingMode:(BOOL)mode;	// 0x30f860b9
- (void)setUbiquityTableValue:(id)value forKey:(id)key;	// 0x30f876b1
- (void)sleep;	// 0x30f85c89
// converted property getter: - (id)sqlStatement;	// 0x30ef28d1
- (void)transactionDidBegin;	// 0x30f85cf5
- (void)transactionDidCommit;	// 0x30f85d51
- (void)transactionDidRollback;	// 0x30f85dad
- (id)ubiquityTableKeysAndValues;	// 0x30f876e5
- (id)ubiquityTableValueForKey:(id)key;	// 0x30f87719
- (void)updateCorrelation:(id)correlation;	// 0x30f85f0d
- (void)updateRow:(id)row;	// 0x30f85f75
- (void)updateUbiquityKnowledgeForPeerWithID:(id)anId andTransactionNumber:(id)number;	// 0x30f87545
- (void)updateUbiquityKnowledgeVector:(id)vector;	// 0x30f87511
- (void)willCreateSchema;	// 0x30f86c09
@end

