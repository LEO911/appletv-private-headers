/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "AppleTV-Structs.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSMutableArray, NSDictionary, NSData, NSLock;

@interface NetflixPlaybackManager : XXUnknownSuperclass {
	BOOL openNotificationSent_;	// 4 = 0x4
	NSDictionary *movieDetails_;	// 8 = 0x8
	NSData *playReadyKey_;	// 12 = 0xc
	IMediaControl *mediaControl_;	// 16 = 0x10
	NetflixMediaControlListener *mediaControlListener_;	// 20 = 0x14
	NSMutableArray *errorStack_;	// 24 = 0x18
	NSDictionary *reportableActionId_;	// 28 = 0x1c
	NSLock *subtitlesProcessingLock_;	// 32 = 0x20
	BOOL subtitlesProcessing_;	// 36 = 0x24
	int subtitlesTrackIndex_;	// 40 = 0x28
	int audioTrackIndex_;	// 44 = 0x2c
	NSLock *playbackCommandLock_;	// 48 = 0x30
	BOOL playbackCommandInProgress_;	// 52 = 0x34
	int state_;	// 56 = 0x38
	unsigned lastKnownMappedVideoBitrate_;	// 60 = 0x3c
	unsigned lastNumAccessLogEvents_;	// 64 = 0x40
	long long totalBytesTransferred_;	// 68 = 0x44
	double observedBitrate_;	// 76 = 0x4c
	BOOL pollNetworkInterface_;	// 84 = 0x54
	long long pollBytesStart_;	// 88 = 0x58
	BwEntry *bwEntry_;	// 96 = 0x60
	double lastBwEntryTime_;	// 100 = 0x64
	long long lastBwEntryBytes_;	// 108 = 0x6c
	int networkInterfaceType_;	// 116 = 0x74
	long long bufferingStartBytes_;	// 120 = 0x78
	double bufferingStartTime_;	// 128 = 0x80
	double sampleReportWindow_;	// 136 = 0x88
	bool stalled_;	// 144 = 0x90
	int totalNumberOfStalls_;	// 148 = 0x94
	BOOL trickplayIsOn_;	// 152 = 0x98
}
@property(assign, nonatomic) int audioTrackIndex;	// G=0x4ff981; S=0x4ff991; @synthesize=audioTrackIndex_
@property(readonly, assign, nonatomic) unsigned bitrate;	// G=0x4ff4a9; 
@property(assign, nonatomic) long long bufferingStartBytes;	// G=0x4ffb9d; S=0x4ffbb5; @synthesize=bufferingStartBytes_
@property(assign, nonatomic) double bufferingStartTime;	// G=0x4ffbc9; S=0x4ffbe1; @synthesize=bufferingStartTime_
@property(assign, nonatomic) BwEntry *bwEntry;	// G=0x4ffb05; S=0x4ffb15; @synthesize=bwEntry_
@property(readonly, assign, nonatomic) long long bytes;	// G=0x4ff4ed; 
@property(readonly, assign, nonatomic) long long bytesForInterface;	// G=0x4ff551; 
@property(readonly, assign, nonatomic) unsigned currentStreamBitrate;	// G=0x4ff611; 
@property(retain, nonatomic) NSMutableArray *errorStack;	// G=0x4ff8cd; S=0x4ff8dd; @synthesize=errorStack_
@property(assign, nonatomic) long long lastBwEntryBytes;	// G=0x4ffb51; S=0x4ffb69; @synthesize=lastBwEntryBytes_
@property(assign, nonatomic) double lastBwEntryTime;	// G=0x4ffb25; S=0x4ffb3d; @synthesize=lastBwEntryTime_
@property(assign, nonatomic) unsigned lastKnownMappedVideoBitrate;	// G=0x4ffa21; S=0x4ffa31; @synthesize=lastKnownMappedVideoBitrate_
@property(assign, nonatomic) unsigned lastNumAccessLogEvents;	// G=0x4ffa41; S=0x4ffa51; @synthesize=lastNumAccessLogEvents_
@property(assign, nonatomic) IMediaControl *mediaControl;	// G=0x4ff8ad; S=0x4fae41; @synthesize=mediaControl_
@property(assign, nonatomic) NetflixMediaControlListener *mediaControlListener;	// G=0x4ff8bd; S=0x4faf55; @synthesize=mediaControlListener_
@property(retain) NSDictionary *movieDetails;	// G=0x4ff865; S=0x4ff879; @synthesize=movieDetails_
@property(assign, nonatomic) int networkInterfaceType;	// G=0x4ffb7d; S=0x4ffb8d; @synthesize=networkInterfaceType_
@property(assign, nonatomic) double observedBitrate;	// G=0x4ffa8d; S=0x4ffaa5; @synthesize=observedBitrate_
@property(assign, nonatomic) BOOL openNotificationSent;	// G=0x4ff845; S=0x4ff855; @synthesize=openNotificationSent_
@property(copy) NSData *playReadyKey;	// G=0x4ff889; S=0x4ff89d; @synthesize=playReadyKey_
@property(assign) BOOL playbackCommandInProgress;	// G=0x4ff9c5; S=0x4ff9dd; @synthesize=playbackCommandInProgress_
@property(retain) NSLock *playbackCommandLock;	// G=0x4ff9a1; S=0x4ff9b5; @synthesize=playbackCommandLock_
@property(assign, nonatomic) long long pollBytesStart;	// G=0x4ffad9; S=0x4ffaf1; @synthesize=pollBytesStart_
@property(assign, nonatomic) BOOL pollNetworkInterface;	// G=0x4ffab9; S=0x4ffac9; @synthesize=pollNetworkInterface_
@property(retain, nonatomic) NSDictionary *reportableActionId;	// G=0x4ff8ed; S=0x4ff8fd; @synthesize=reportableActionId_
@property(assign, nonatomic) double sampleReportWindow;	// G=0x4ffbf5; S=0x4ffc0d; @synthesize=sampleReportWindow_
@property(assign, nonatomic) bool stalled;	// G=0x4ffc21; S=0x4ffc35; @synthesize=stalled_
@property(assign) int state;	// G=0x4ff9f5; S=0x4ffa09; @synthesize=state_
@property(assign) BOOL subtitlesProcessing;	// G=0x4ff931; S=0x4ff949; @synthesize=subtitlesProcessing_
@property(retain) NSLock *subtitlesProcessingLock;	// G=0x4ff90d; S=0x4ff921; @synthesize=subtitlesProcessingLock_
@property(assign, nonatomic) int subtitlesTrackIndex;	// G=0x4ff961; S=0x4ff971; @synthesize=subtitlesTrackIndex_
@property(assign, nonatomic) long long totalBytesTransferred;	// G=0x4ffa61; S=0x4ffa79; @synthesize=totalBytesTransferred_
@property(assign, nonatomic) int totalNumberOfStalls;	// G=0x4ffc45; S=0x4ffc55; @synthesize=totalNumberOfStalls_
@property(assign) BOOL trickplay;	// G=0x4ff82d; S=0x4ff81d; converted property
@property(assign) BOOL trickplayIsOn;	// G=0x4ffc65; S=0x4ffc7d; @synthesize=trickplayIsOn_
+ (void)initialize;	// 0x4fab39
+ (id)sharedInstance;	// 0x4fab3d
- (id)init;	// 0x4fac29
- (void)audioSelect:(id)select;	// 0x4fc815
- (void)audioSelectAsync:(id)async;	// 0x4fc851
// declared property getter: - (int)audioTrackIndex;	// 0x4ff981
// declared property getter: - (unsigned)bitrate;	// 0x4ff4a9
- (void)buffering:(double)buffering;	// 0x4fb4e9
- (void)bufferingComplete:(double)complete;	// 0x4fb601
// declared property getter: - (long long)bufferingStartBytes;	// 0x4ffb9d
// declared property getter: - (double)bufferingStartTime;	// 0x4ffbc9
// declared property getter: - (BwEntry *)bwEntry;	// 0x4ffb05
// declared property getter: - (long long)bytes;	// 0x4ff4ed
// declared property getter: - (long long)bytesForInterface;	// 0x4ff551
- (id)capitalizeAudioTracksArray:(id)array;	// 0x4fcd31
- (id)capitalizeSubtitlesForMovieDetails:(id)movieDetails;	// 0x4fce21
- (id)capitalizeSubtitlesForTrackCombinationArray:(id)trackCombinationArray;	// 0x4fcc41
- (id)capitalizeTrackCombination:(id)combination;	// 0x4fcb6d
- (id)capitalizeTracks:(id)tracks;	// 0x4fca7d
- (void)clearErrorStack;	// 0x4ff7f5
- (void)close;	// 0x4fb3f1
- (id)createErrorFromStack;	// 0x4fd16d
// declared property getter: - (unsigned)currentStreamBitrate;	// 0x4ff611
- (void)dealloc;	// 0x4fad2d
- (void)end:(double)end reason:(id)reason;	// 0x4fb211
// declared property getter: - (id)errorStack;	// 0x4ff8cd
- (int)fetchBookmark:(id)bookmark;	// 0x4ff1b9
// declared property getter: - (long long)lastBwEntryBytes;	// 0x4ffb51
// declared property getter: - (double)lastBwEntryTime;	// 0x4ffb25
// declared property getter: - (unsigned)lastKnownMappedVideoBitrate;	// 0x4ffa21
// declared property getter: - (unsigned)lastNumAccessLogEvents;	// 0x4ffa41
// declared property getter: - (IMediaControl *)mediaControl;	// 0x4ff8ad
// declared property getter: - (NetflixMediaControlListener *)mediaControlListener;	// 0x4ff8bd
- (void)mediaDidAcquireLicense;	// 0x4fd77d
- (void)mediaDidAuthorize;	// 0x4fd64d
- (void)mediaDidBuildPlaylists;	// 0x4fd815
- (void)mediaDidCdnSelect;	// 0x4fd6e5
- (void)mediaDidClose;	// 0x4fcfb9
- (void)mediaDidFailLoadSubtitles:(int)media error:(id)error;	// 0x4fda75
- (void)mediaDidFailOpen:(id)media;	// 0x4fd4c5
- (void)mediaDidFailSelectAudio:(int)media error:(id)error;	// 0x4ff72d
- (void)mediaDidHandleNccpError:(id)media;	// 0x4fd02d
- (void)mediaDidLoadSubtitles:(id)media;	// 0x4fd941
- (void)mediaDidSelectAudio:(id)media;	// 0x4ff649
- (void)mediaDidSetSpeed:(float)media;	// 0x4fd861
- (void)mediaOpenComplete:(id)complete;	// 0x4fcef9
- (void)mediaWillAcquireLicense;	// 0x4fd731
- (void)mediaWillAuthorize;	// 0x4fd601
- (void)mediaWillBuildPlaylists;	// 0x4fd7c9
- (void)mediaWillCdnSelect;	// 0x4fd699
- (void)mediaWillLoadSubtitles;	// 0x4fd8f5
// declared property getter: - (id)movieDetails;	// 0x4ff865
// declared property getter: - (int)networkInterfaceType;	// 0x4ffb7d
- (void)networkSelection:(id)selection;	// 0x4fc605
- (int)networkTypeStringToType:(id)type;	// 0x4fc591
// declared property getter: - (double)observedBitrate;	// 0x4ffa8d
- (void)open:(id)open;	// 0x4faf79
- (void)openAsync:(id)async;	// 0x4fdee9
// declared property getter: - (BOOL)openNotificationSent;	// 0x4ff845
- (void)pause:(double)pause;	// 0x4fb031
- (void)play:(double)play;	// 0x4fafb9
// declared property getter: - (id)playReadyKey;	// 0x4ff889
// declared property getter: - (BOOL)playbackCommandInProgress;	// 0x4ff9c5
// declared property getter: - (id)playbackCommandLock;	// 0x4ff9a1
- (id)playlistForIndicatedBitrate:(double)indicatedBitrate;	// 0x4ff33d
- (id)playlistForRequestedM3u8:(id)requestedM3u8;	// 0x4fc221
// declared property getter: - (long long)pollBytesStart;	// 0x4ffad9
// declared property getter: - (BOOL)pollNetworkInterface;	// 0x4ffab9
- (void)postMediaCloseFailure;	// 0x4fdde5
- (void)postMediaOpenFailure:(int)failure;	// 0x4fdc35
- (void)postMediaOpenFailure:(id)failure clearProgress:(BOOL)progress;	// 0x4fdd0d
- (void)postMediaOpenSuccess:(id)success;	// 0x4fdb99
// declared property getter: - (id)reportableActionId;	// 0x4ff8ed
- (void)reposition:(double)reposition;	// 0x4fb121
// declared property getter: - (double)sampleReportWindow;	// 0x4ffbf5
- (void)selectedPlaylist:(id)playlist;	// 0x4fc331
// declared property setter: - (void)setAudioTrackIndex:(int)index;	// 0x4ff991
// declared property setter: - (void)setBufferingStartBytes:(long long)bytes;	// 0x4ffbb5
// declared property setter: - (void)setBufferingStartTime:(double)time;	// 0x4ffbe1
// declared property setter: - (void)setBwEntry:(BwEntry *)entry;	// 0x4ffb15
// declared property setter: - (void)setErrorStack:(id)stack;	// 0x4ff8dd
// declared property setter: - (void)setLastBwEntryBytes:(long long)bytes;	// 0x4ffb69
// declared property setter: - (void)setLastBwEntryTime:(double)time;	// 0x4ffb3d
// declared property setter: - (void)setLastKnownMappedVideoBitrate:(unsigned)bitrate;	// 0x4ffa31
// declared property setter: - (void)setLastNumAccessLogEvents:(unsigned)events;	// 0x4ffa51
// declared property setter: - (void)setMediaControl:(IMediaControl *)control;	// 0x4fae41
// declared property setter: - (void)setMediaControlListener:(NetflixMediaControlListener *)listener;	// 0x4faf55
// declared property setter: - (void)setMovieDetails:(id)details;	// 0x4ff879
// declared property setter: - (void)setNetworkInterfaceType:(int)type;	// 0x4ffb8d
// declared property setter: - (void)setObservedBitrate:(double)bitrate;	// 0x4ffaa5
// declared property setter: - (void)setOpenNotificationSent:(BOOL)sent;	// 0x4ff855
// declared property setter: - (void)setPlayReadyKey:(id)key;	// 0x4ff89d
// declared property setter: - (void)setPlaybackCommandInProgress:(BOOL)progress;	// 0x4ff9dd
// declared property setter: - (void)setPlaybackCommandLock:(id)lock;	// 0x4ff9b5
// declared property setter: - (void)setPollBytesStart:(long long)start;	// 0x4ffaf1
// declared property setter: - (void)setPollNetworkInterface:(BOOL)interface;	// 0x4ffac9
// declared property setter: - (void)setReportableActionId:(id)anId;	// 0x4ff8fd
// declared property setter: - (void)setSampleReportWindow:(double)window;	// 0x4ffc0d
// declared property setter: - (void)setStalled:(bool)stalled;	// 0x4ffc35
// declared property setter: - (void)setState:(int)state;	// 0x4ffa09
// declared property setter: - (void)setSubtitlesProcessing:(BOOL)processing;	// 0x4ff949
// declared property setter: - (void)setSubtitlesProcessingLock:(id)lock;	// 0x4ff921
// declared property setter: - (void)setSubtitlesTrackIndex:(int)index;	// 0x4ff971
// declared property setter: - (void)setTotalBytesTransferred:(long long)transferred;	// 0x4ffa79
// declared property setter: - (void)setTotalNumberOfStalls:(int)stalls;	// 0x4ffc55
// converted property setter: - (void)setTrickplay:(BOOL)trickplay;	// 0x4ff81d
// declared property setter: - (void)setTrickplayIsOn:(BOOL)on;	// 0x4ffc7d
// declared property getter: - (bool)stalled;	// 0x4ffc21
// declared property getter: - (int)state;	// 0x4ff9f5
- (void)stop:(double)stop;	// 0x4fb199
- (void)streamSelected:(int)selected streamIndex:(int)index;	// 0x4fb7a1
- (void)subtitlesDisable;	// 0x4fc50d
- (void)subtitlesDisableAsync;	// 0x4ff089
// declared property getter: - (BOOL)subtitlesProcessing;	// 0x4ff931
// declared property getter: - (id)subtitlesProcessingLock;	// 0x4ff90d
- (void)subtitlesSelect:(id)select;	// 0x4fc4d1
- (void)subtitlesSelectAbort;	// 0x4fc549
- (void)subtitlesSelectAsync:(id)async;	// 0x4fec81
// declared property getter: - (int)subtitlesTrackIndex;	// 0x4ff961
// declared property getter: - (long long)totalBytesTransferred;	// 0x4ffa61
// declared property getter: - (int)totalNumberOfStalls;	// 0x4ffc45
- (id)trackWithCapitalizedDescriptionFromTrack:(id)track;	// 0x4fc99d
// converted property getter: - (BOOL)trickplay;	// 0x4ff82d
// declared property getter: - (BOOL)trickplayIsOn;	// 0x4ffc65
- (void)unpause:(double)unpause;	// 0x4fb0a9
- (void)updatePts:(double)pts;	// 0x4fb829
- (void)updatePts:(double)pts accessLogEvents:(id)events;	// 0x4fbd89
@end

