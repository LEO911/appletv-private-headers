/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices
 */

#import <NSObject.h> // Unknown library
#import "AFManagedStore.h"

@class NSMutableDictionary, DKConnection, NSString;
@protocol AFAssistantUIService, AFSpeechDelegate;

@interface AFConnection : NSObject <AFManagedStore> {
	DKConnection *_connection;	// 4 = 0x4
	id<AFAssistantUIService> _delegate;	// 8 = 0x8
	id<AFSpeechDelegate> _speechDelegate;	// 12 = 0xc
	float _averagePower;	// 16 = 0x10
	float _peakPower;	// 20 = 0x14
	NSString *_outstandingRequestClass;	// 24 = 0x18
	unsigned _stateInSync : 1;	// 28 = 0x1c
	unsigned _shouldSpeak : 1;	// 28 = 0x1c
	unsigned _isCapturingSpeech : 1;	// 28 = 0x1c
	unsigned _hasOutstandingRequest : 1;	// 28 = 0x1c
	unsigned _replyContextMayInitiateCall : 1;	// 28 = 0x1c
	BOOL _hasActiveRequest;	// 29 = 0x1d
	NSMutableDictionary *_replies;	// 32 = 0x20
}
@property(readonly, assign) float averagePower;	// G=0x3369ea0d; converted property
@property(assign, nonatomic) __weak id<AFAssistantUIService> delegate;	// G=0x3369f499; S=0x3369c109; @synthesize=_delegate
@property(readonly, assign, nonatomic) BOOL isRecording;	// G=0x3369e9e5; 
@property(readonly, assign) float peakPower;	// G=0x3369ea1d; converted property
@property(assign, nonatomic) __weak id<AFSpeechDelegate> speechDelegate;	// G=0x3369f4b9; S=0x3369f4d9; @synthesize=_speechDelegate
+ (void)_reachabilityDidChange:(id)_reachability;	// 0x3369dcb1
+ (BOOL)assistantIsEnabled;	// 0x3369db05
+ (BOOL)assistantIsSupported;	// 0x3369dca5
+ (BOOL)assistantIsSupportedForLanguageCode:(id)languageCode error:(id *)error;	// 0x3369db5d
+ (void)beginMonitoringAvailability;	// 0x3369dd3d
+ (void)defrost;	// 0x3369df35
+ (void)initialize;	// 0x3369c061
+ (BOOL)isAvailable;	// 0x3369dda9
+ (void)stopMonitoringAvailability;	// 0x3369de39
+ (BOOL)userDataSyncNeeded;	// 0x3369de95
- (id)init;	// 0x3369c065
- (void).cxx_destruct;	// 0x3369f4ed
- (void)_asyncBarrierWithBlock:(id)block;	// 0x3369f779
- (void)_barrier;	// 0x3369f741
- (void)_cancelRequestTimeout;	// 0x3369d821
- (void)_checkAndSetIsCapturingSpeech:(BOOL)speech;	// 0x3369c149
- (void)_clearAssistantInfoForAccountWithIdentifier:(id)identifier;	// 0x3369f7c9
- (void)_clearConnection;	// 0x3369d551
- (id)_connection;	// 0x3369d2dd
- (void)_handleMessage:(id)message;	// 0x3369d1dd
- (void)_invokeRequestTimeout;	// 0x3369d779
- (void)_msgDismissAssistant:(id)assistant;	// 0x3369cca1
- (void)_msgDoCommand:(id)command;	// 0x3369c8c9
- (void)_msgOpenURL:(id)url;	// 0x3369ca69
- (void)_msgReplyMayInitiateCall:(id)call;	// 0x3369ce9d
- (void)_msgRequestCompleted:(id)completed;	// 0x3369ca39
- (void)_msgRequestError:(id)error;	// 0x3369cd65
- (void)_msgSpeechLevelUpdate:(id)update;	// 0x3369cee9
- (void)_msgSpeechRecognitionDidFail:(id)_msgSpeechRecognition;	// 0x3369d12d
- (void)_msgSpeechRecognized:(id)recognized;	// 0x3369d06d
- (void)_msgSpeechRecordingDidBegin:(id)_msgSpeechRecording;	// 0x3369ced9
- (void)_msgSpeechRecordingDidCancel:(id)_msgSpeechRecording;	// 0x3369cfcd
- (void)_msgSpeechRecordingDidEnd:(id)_msgSpeechRecording;	// 0x3369cf9d
- (void)_msgSpeechRecordingDidFail:(id)_msgSpeechRecording;	// 0x3369cffd
- (void)_msgSpeechRecordingWillBegin:(id)_msgSpeechRecording;	// 0x3369cec9
- (void)_msgStateUpdate:(id)update;	// 0x3369ce01
- (void)_requestDidEnd;	// 0x3369c269
- (void)_requestStateUpdate;	// 0x3369d85d
- (void)_requestWillBeginWithRequestClass:(id)_request logAggregateData:(BOOL)data;	// 0x3369c215
- (void)_scheduleRequestTimeout:(double)timeout;	// 0x3369d7e5
- (void)_sendMessage:(id)message withReply:(id)reply;	// 0x3369f661
- (void)_sendMessage:(id)message withReplySync:(id)replySync;	// 0x3369f6d9
- (void)_tellDelegateRequestFailed:(id)failed requestClass:(id)aClass;	// 0x3369c30d
- (void)_tellDelegateRequestFinished;	// 0x3369c2a9
- (void)_tellDelegateShouldSpeakChanged:(BOOL)_tellDelegate;	// 0x3369c3a1
- (void)_tellSpeechDelegateDidRecognizeSpeechPhrases:(id)_tellSpeechDelegate correctionIdentifier:(id)identifier;	// 0x3369c5c1
- (void)_tellSpeechDelegateRecognitionDidFail:(id)_tellSpeechDelegateRecognition;	// 0x3369c85d
- (void)_tellSpeechDelegateRecordingDidBegin;	// 0x3369c459
- (void)_tellSpeechDelegateRecordingDidCancel;	// 0x3369c501
- (void)_tellSpeechDelegateRecordingDidEnd;	// 0x3369c4ad
- (void)_tellSpeechDelegateRecordingDidFail:(id)_tellSpeechDelegateRecording;	// 0x3369c555
- (void)_tellSpeechDelegateRecordingWillBegin;	// 0x3369c405
- (void)_unhandledMessage:(id)message;	// 0x3369d16d
- (void)_willCancelRequest;	// 0x3369da5d
- (void)_willCompleteRequest;	// 0x3369dacd
- (void)_willFailRequest;	// 0x3369da95
- (void)_willStartRequest;	// 0x3369da15
// converted property getter: - (float)averagePower;	// 0x3369ea0d
- (void)cancelRequest;	// 0x3369e7c5
- (void)cancelSpeech;	// 0x3369e529
- (void)clearAndSetApplicationContext;	// 0x3369ef35
- (void)clearAndSetApplicationContextWithBulletins:(id)bulletins;	// 0x3369ef49
- (void)clearContext;	// 0x3369eeb5
- (void)clearUndoStack;	// 0x3369f0fd
- (void)dealloc;	// 0x3369c0c9
// declared property getter: - (id)delegate;	// 0x3369f499
- (id)domainObjectForKey:(id)key;	// 0x3369f17d
- (void)endSession;	// 0x3369dea1
// declared property getter: - (BOOL)isRecording;	// 0x3369e9e5
// converted property getter: - (float)peakPower;	// 0x3369ea1d
- (void)preheat;	// 0x3369dffd
- (void)redoRequest;	// 0x3369f07d
- (BOOL)replyContextMayInitiateCall;	// 0x3369ea2d
- (void)rollbackRequest;	// 0x3369e869
- (void)sendGenericAceCommand:(id)command;	// 0x3369ea41
- (void)sendGenericAceCommand:(id)command conflictHandler:(id)handler;	// 0x3369ea55
- (void)sendReplyCommand:(id)command;	// 0x3369edf5
// declared property setter: - (void)setDelegate:(id)delegate;	// 0x3369c109
- (void)setDomainObject:(id)object forKey:(id)key;	// 0x3369f3a9
- (BOOL)setLanguageCode:(id)code error:(id *)error;	// 0x3369e07d
- (void)setLockState:(BOOL)state screenLocked:(BOOL)locked;	// 0x3369e1cd
// declared property setter: - (void)setSpeechDelegate:(id)delegate;	// 0x3369f4d9
- (BOOL)shouldSpeak;	// 0x3369e9f9
// declared property getter: - (id)speechDelegate;	// 0x3369f4b9
- (void)startRequestWithCorrectedText:(id)correctedText forSpeechIdentifier:(id)speechIdentifier;	// 0x3369e8e9
- (void)startRequestWithText:(id)text;	// 0x3369e3f1
- (void)startRequestWithText:(id)text timeout:(double)timeout;	// 0x3369e301
- (void)startSpeechRequestWithOptions:(id)options;	// 0x3369e421
- (void)startSpeechRequestWithSpeechFileAtURL:(id)url;	// 0x3369f559
- (void)stopSpeech;	// 0x3369e7b1
- (void)stopSpeechWithOptions:(id)options;	// 0x3369e6c1
- (void)undoRequest;	// 0x3369effd
- (void)updateSpeechOptions:(id)options;	// 0x3369e5e1
@end

