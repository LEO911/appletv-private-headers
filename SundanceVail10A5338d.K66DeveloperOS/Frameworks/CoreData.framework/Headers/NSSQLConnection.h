/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/CoreData.framework/CoreData
 */

#import <NSObject.h> // Unknown library
#import "CoreData-Structs.h"

@class NSArray, NSSQLAdapter, NSSQLStatement;

@interface NSSQLConnection : NSObject {
	NSSQLAdapter *_adapter;	// 4 = 0x4
	BOOL _transactionIsOpen;	// 8 = 0x8
	BOOL _useSyntaxColoredLogging;	// 9 = 0x9
	int _debug;	// 12 = 0xc
	NSSQLStatement *_sqlStatement;	// 16 = 0x10
	NSArray *_columnsToFetch;	// 20 = 0x14
	NSArray *_metadataColumns;	// 24 = 0x18
}
@property(readonly, retain) NSSQLAdapter *adapter;	// G=0x3657b3b9; converted property
@property(retain) NSArray *columnsToFetch;	// G=0x3657e1cd; S=0x3657e1ed; converted property
@property(readonly, retain) NSArray *metadataColumns;	// G=0x3657e231; converted property
@property(readonly, retain) NSSQLStatement *sqlStatement;	// G=0x3657db81; converted property
+ (void)initialize;	// 0x365a06ad
- (id)initWithAdapter:(id)adapter;	// 0x3657a89d
- (void)_forceDisconnectOnError;	// 0x36616aa1
- (void)_performPostSaveTasks;	// 0x36618295
- (void)_raiseOptimisticLockingExceptionWithReason:(id)reason;	// 0x36616905
// converted property getter: - (id)adapter;	// 0x3657b3b9
- (void)addPeerRange:(id)range;	// 0x36618335
- (void)addPeerRangeForPeerID:(id)peerID entityName:(id)name rangeStart:(id)start rangeEnd:(id)end peerRangeStart:(id)start5 peerRangeEnd:(id)end6;	// 0x36618369
- (id)allPeerRanges;	// 0x3661839d
- (void)awake;	// 0x36616a51
- (void)beginTransaction;	// 0x36616981
- (BOOL)canConnect;	// 0x36616bc5
// converted property getter: - (id)columnsToFetch;	// 0x3657e1cd
- (void)commitTransaction;	// 0x366169b5
- (void)connect;	// 0x36616a1d
- (void)createIndexesForEntity:(id)entity;	// 0x366172d5
- (void)createManyToManyTablesForEntity:(id)entity;	// 0x366171dd
- (id)createMapOfEntityNameToPKMaxForEntities:(id)entities;	// 0x36618439
- (id)createMapOfEntityNameToPKMaxForEntitiesFromPKTable:(id)pktable;	// 0x36618405
- (id)createMapOfEntityNameToPKMaxForEntitiesFromUBRangeTable:(id)ubrangeTable;	// 0x366183d1
- (void)createMetadata;	// 0x366178f9
- (void)createPrimaryKeyTableForModel:(id)model knownEmpty:(BOOL)empty;	// 0x36618179
- (void)createSchema;	// 0x366179cd
- (void)createTableForEntity:(id)entity;	// 0x36617169
- (void)createTablesForEntities:(id)entities;	// 0x36617859
- (BOOL)databaseIsEmpty;	// 0x36616bf9
- (void)dealloc;	// 0x365998e9
- (void)deleteCorrelation:(id)correlation;	// 0x36616cfd
- (void)deleteRow:(id)row;	// 0x36616d65
- (id)describeResults;	// 0x36616ead
- (void)didCreateSchema;	// 0x366179c9
- (void)disconnect;	// 0x36616a59
- (void)endFetch;	// 0x36616f49
- (void)endPrimaryKeyGeneration;	// 0x36618141
- (void)execute;	// 0x36616dcd
- (long long)fetchMaxPrimaryKeyForEntity:(id)entity;	// 0x36617cf9
- (id)fetchMetadata;	// 0x3657c595
- (int)fetchResultSet:(void *)set usingFetchPlan:(id)plan;	// 0x36616f15
- (id)fetchTableCreationSQL;	// 0x36617d61
- (id)fetchTableNames;	// 0x36617d2d
- (id)fetchUbiqiutyKnowledgeVector;	// 0x36618299
- (void)finalize;	// 0x36616941
- (void)forceTransactionClosed;	// 0x36616a8d
- (long long)generatePrimaryKeysForEntity:(id)entity batch:(unsigned)batch;	// 0x36618135
- (BOOL)hasMetadataTable;	// 0x36617d95
- (BOOL)hasOpenTransaction;	// 0x36599351
- (BOOL)hasPrimaryKeyTable;	// 0x36618145
- (void)insertCorrelation:(id)correlation;	// 0x36616c95
- (void)insertRow:(id)row;	// 0x36616c61
- (BOOL)isFetchInProgress;	// 0x36616e79
- (BOOL)isOpen;	// 0x36616c2d
// converted property getter: - (id)metadataColumns;	// 0x3657e231
- (id)newFetchedArray;	// 0x36616ee1
- (void)performAdapterOperation:(id)operation;	// 0x36616f7d
- (void)performAdapterOperations:(id)operations;	// 0x366170b1
- (void)prepareAndExecuteSQLStatement:(id)statement;	// 0x36616e2d
- (void)prepareForPrimaryKeyGeneration;	// 0x3661813d
- (void)prepareSQLStatement:(id)statement;	// 0x3657d20d
- (CFArrayRef)rawIntegerRowsForSQL:(id)sql;	// 0x36617cc5
- (void)releaseSQLStatement;	// 0x3657f079
- (void)resetSQLStatement;	// 0x36616e01
- (void)rollbackTransaction;	// 0x366169e9
- (void)saveMetadata:(id)metadata;	// 0x36617dc9
- (void)selectAttributes:(id)attributes fetchRequest:(id)request lock:(BOOL)lock entity:(id)entity;	// 0x36616d99
// converted property setter: - (void)setColumnsToFetch:(id)fetch;	// 0x3657e1ed
- (void)setExclusiveLockingMode:(BOOL)mode;	// 0x36616e75
- (void)setUbiquityTableValue:(id)value forKey:(id)key;	// 0x3661846d
- (void)sleep;	// 0x36616a55
// converted property getter: - (id)sqlStatement;	// 0x3657db81
- (void)transactionDidBegin;	// 0x36616ab1
- (void)transactionDidCommit;	// 0x36616b0d
- (void)transactionDidRollback;	// 0x36616b69
- (id)ubiquityTableKeysAndValues;	// 0x366184a1
- (id)ubiquityTableValueForKey:(id)key;	// 0x366184d5
- (void)updateCorrelation:(id)correlation;	// 0x36616cc9
- (void)updateRow:(id)row;	// 0x36616d31
- (void)updateUbiquityKnowledgeForPeerWithID:(id)anId andTransactionNumber:(id)number;	// 0x36618301
- (void)updateUbiquityKnowledgeVector:(id)vector;	// 0x366182cd
- (void)willCreateSchema;	// 0x366179c5
@end

