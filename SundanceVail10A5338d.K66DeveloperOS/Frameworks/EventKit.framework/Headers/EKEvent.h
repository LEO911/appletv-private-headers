/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/EventKit.framework/EventKit
 */

#import "EKCalendarItem.h"
#import "EventKit-Structs.h"

@class NSNumber, NSDate, EKParticipant, NSString, EKCalendarDate;

@interface EKEvent : EKCalendarItem {
	EKCalendarDate *_occurrenceStartDate;	// 40 = 0x28
	EKCalendarDate *_occurrenceEndDate;	// 44 = 0x2c
	BOOL _occurrenceIsAllDay;	// 48 = 0x30
	EKCalendarDate *_originalOccurrenceStartDate;	// 52 = 0x34
	EKCalendarDate *_originalOccurrenceEndDate;	// 56 = 0x38
	NSNumber *_originalOccurrenceIsAllDay;	// 60 = 0x3c
}
@property(assign, nonatomic, getter=isAllDay) BOOL allDay;	// G=0x34b29025; S=0x34b32289; 
@property(assign, nonatomic) int availability;	// G=0x34b753bd; S=0x34b75411; 
@property(readonly, assign, nonatomic) int birthdayPersonID;	// G=0x34b75295; 
@property(copy, nonatomic) NSDate *endDate;	// G=0x34b291fd; S=0x34b32849; 
@property(readonly, assign, nonatomic) NSString *eventIdentifier;	// G=0x34b300a9; 
@property(assign) unsigned invitationStatus;	// G=0x34b754b1; S=0x34b754e5; converted property
@property(readonly, assign, nonatomic) BOOL isDetached;	// G=0x34b32095; 
@property(assign) unsigned modifiedProperties;	// G=0x34b74fdd; S=0x34b75011; converted property
@property(assign) BOOL needsOccurrenceCacheUpdate;	// G=0x34b75055; S=0x34b75079; converted property
@property(copy, nonatomic) EKCalendarDate *occurrenceEndDate;	// G=0x34b287f1; S=0x34b29015; @synthesize=_occurrenceEndDate
@property(assign, nonatomic) BOOL occurrenceIsAllDay;	// G=0x34b77d55; S=0x34b28281; @synthesize=_occurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *occurrenceStartDate;	// G=0x34b29001; S=0x34b28221; @synthesize=_occurrenceStartDate
@property(readonly, assign, nonatomic) EKParticipant *organizer;	// G=0x34b30269; 
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate;	// G=0x34b330fd; S=0x34b3278d; @synthesize=_originalOccurrenceEndDate
@property(copy, nonatomic) NSNumber *originalOccurrenceIsAllDay;	// G=0x34b33125; S=0x34b311dd; @synthesize=_originalOccurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate;	// G=0x34b330d9; S=0x34b3277d; @synthesize=_originalOccurrenceStartDate
@property(assign) int participationStatus;	// G=0x34b309bd; S=0x34b750bd; converted property
@property(retain) id recurrenceRule;	// G=0x34b7530d; S=0x34b75359; converted property
@property(retain) id responseComment;	// G=0x34b75479; S=0x34b75495; converted property
@property(copy, nonatomic) NSDate *startDate;	// G=0x34b291dd; S=0x34b32551; 
@property(readonly, assign, nonatomic) int status;	// G=0x34b2aa8d; 
+ (id)eventWithEventStore:(id)eventStore;	// 0x34b339a9
- (id)init;	// 0x34b749b9
- (id)initWithEventStore:(id)eventStore;	// 0x34b30b31
- (id)initWithPersistentObject:(id)persistentObject;	// 0x34b749f5
- (id)initWithPersistentObject:(id)persistentObject occurrenceDate:(id)date;	// 0x34b27d9d
- (BOOL)_cancelWithSpan:(int)span error:(id *)error;	// 0x34b77119
- (BOOL)_checkStartDateConstraintAgainstDate:(XXStruct_lQVxyC)date timeZone:(id)zone error:(id *)error;	// 0x34b3667d
- (id)_dateForNextOccurrence;	// 0x34b75e65
- (BOOL)_deleteWithSpan:(int)span error:(id *)error;	// 0x34b3cbe9
- (void)_detachWithStartDate:(id)startDate newStartDate:(id)date future:(BOOL)future;	// 0x34b772a1
- (id)_effectiveTimeZone;	// 0x34b3279d
- (XXStruct_lQVxyC)_gregorianDateCorrectedForTimeZoneFromCalendarDate:(id)calendarDate orNSDate:(id)date;	// 0x34b74e29
- (BOOL)_isAlarmAcknowledgedPropertyDirty;	// 0x34b75c01
- (BOOL)_isAllDay;	// 0x34b28231
- (BOOL)_isInitialOccurrenceDate:(id)date;	// 0x34b3c9fd
- (BOOL)_occurrenceExistsOnDate:(double)date timeZone:(id)zone;	// 0x34b76df9
- (int)_parentParticipationStatus;	// 0x34b75255
- (id)_persistentEvent;	// 0x34b288d1
- (void)_sendModifiedNote;	// 0x34b33915
- (BOOL)_shouldCancelInsteadOfDeleteWithSpan:(int)span;	// 0x34b3cae9
- (BOOL)_shouldDeclineInsteadOfDelete;	// 0x34b7704d
- (BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(int)recurrenceInterval;	// 0x34b761cd
- (BOOL)_validateDatesAndRecurrencesGivenSpan:(int)span error:(id *)error;	// 0x34b36285
- (BOOL)_validateDurationConstrainedToRecurrenceInterval;	// 0x34b75fd1
- (int)alarmCount;	// 0x34b752e5
- (BOOL)allowsAlarmModifications;	// 0x34b36779
- (BOOL)allowsCalendarModifications;	// 0x34b758e9
- (BOOL)allowsRecurrenceModifications;	// 0x34b3200d
- (id)attachments;	// 0x34b30175
- (int)attendeeCount;	// 0x34b752bd
- (id)attendees;	// 0x34b30309
// declared property getter: - (int)availability;	// 0x34b753bd
// declared property getter: - (int)birthdayPersonID;	// 0x34b75295
- (id)birthdayTitleWithAddressBook:(void *)addressBook;	// 0x34b74c71
- (BOOL)canBeRespondedTo;	// 0x34b30751
- (BOOL)canDetachSingleOccurrence;	// 0x34b75985
- (BOOL)canMoveToCalendar:(id)calendar fromCalendar:(id)calendar2 error:(id *)error;	// 0x34b756b1
- (BOOL)canSetAvailability;	// 0x34b75a49
- (void)clearInvitationStatus;	// 0x34b75529
- (BOOL)commitWithSpan:(int)span error:(id *)error;	// 0x34b368a5
- (id)committedValueForKey:(id)key;	// 0x34b31765
- (int)compareStartDateWithEvent:(id)event;	// 0x34b29159
- (BOOL)dateChanged;	// 0x34b7555d
- (void)dealloc;	// 0x34b31371
- (id)description;	// 0x34b75ac1
- (void)didCommit;	// 0x34b3afe5
- (id)dirtyPropertiesToSkip;	// 0x34b75d01
- (double)duration;	// 0x34b2c011
- (id)endCalendarDate;	// 0x34b287e1
// declared property getter: - (id)endDate;	// 0x34b291fd
- (XXStruct_lQVxyC)endDateGr;	// 0x34b2bfb5
- (XXStruct_lQVxyC)endDatePinnedForAllDay;	// 0x34b74f69
// declared property getter: - (id)eventIdentifier;	// 0x34b300a9
- (id)eventStore;	// 0x34b2acf9
- (id)exportToICS;	// 0x34b74b29
- (id)externalId;	// 0x34b759f9
- (id)externalURL;	// 0x34b74a09
- (BOOL)hasSelfAttendee;	// 0x34b75a95
- (unsigned)hash;	// 0x34b29035
- (id)initialEndDate;	// 0x34b74db1
- (id)initialStartDate;	// 0x34b74d55
// converted property getter: - (unsigned)invitationStatus;	// 0x34b754b1
// declared property getter: - (BOOL)isAllDay;	// 0x34b29025
- (BOOL)isAllDayDirty;	// 0x34b74bb1
// declared property getter: - (BOOL)isDetached;	// 0x34b32095
- (BOOL)isDirtyIgnoringCalendar;	// 0x34b74bd1
- (BOOL)isEndDateDirty;	// 0x34b74b91
- (BOOL)isEqual:(id)equal;	// 0x34b29091
- (BOOL)isStartDateDirty;	// 0x34b74b71
- (BOOL)isStatusDirty;	// 0x34b74b51
- (BOOL)isTentative;	// 0x34b7560d
- (BOOL)locationChanged;	// 0x34b755e1
// converted property getter: - (unsigned)modifiedProperties;	// 0x34b74fdd
// converted property getter: - (BOOL)needsOccurrenceCacheUpdate;	// 0x34b75055
- (id)occurrenceDate;	// 0x34b31ed1
// declared property getter: - (id)occurrenceEndDate;	// 0x34b287f1
// declared property getter: - (BOOL)occurrenceIsAllDay;	// 0x34b77d55
// declared property getter: - (id)occurrenceStartDate;	// 0x34b29001
// declared property getter: - (id)organizer;	// 0x34b30269
// declared property getter: - (id)originalOccurrenceEndDate;	// 0x34b330fd
// declared property getter: - (id)originalOccurrenceIsAllDay;	// 0x34b33125
// declared property getter: - (id)originalOccurrenceStartDate;	// 0x34b330d9
// converted property getter: - (int)participationStatus;	// 0x34b309bd
- (int)pendingParticipationStatus;	// 0x34b759d1
// converted property getter: - (id)recurrenceRule;	// 0x34b7530d
- (BOOL)refresh;	// 0x34b331bd
- (BOOL)removeWithSpan:(int)span error:(id *)error;	// 0x34b3c8c5
- (BOOL)requiresDetach;	// 0x34b353f5
// converted property getter: - (id)responseComment;	// 0x34b75479
- (BOOL)responseMustApplyToAll;	// 0x34b7595d
- (void)revert;	// 0x34b75d59
- (void)rollback;	// 0x34b32b31
// declared property setter: - (void)setAllDay:(BOOL)day;	// 0x34b32289
// declared property setter: - (void)setAvailability:(int)availability;	// 0x34b75411
// declared property setter: - (void)setEndDate:(id)date;	// 0x34b32849
// converted property setter: - (void)setInvitationStatus:(unsigned)status;	// 0x34b754e5
// converted property setter: - (void)setModifiedProperties:(unsigned)properties;	// 0x34b75011
// converted property setter: - (void)setNeedsOccurrenceCacheUpdate:(BOOL)update;	// 0x34b75079
// declared property setter: - (void)setOccurrenceEndDate:(id)date;	// 0x34b29015
// declared property setter: - (void)setOccurrenceIsAllDay:(BOOL)day;	// 0x34b28281
// declared property setter: - (void)setOccurrenceStartDate:(id)date;	// 0x34b28221
// declared property setter: - (void)setOriginalOccurrenceEndDate:(id)date;	// 0x34b3278d
// declared property setter: - (void)setOriginalOccurrenceIsAllDay:(id)day;	// 0x34b311dd
// declared property setter: - (void)setOriginalOccurrenceStartDate:(id)date;	// 0x34b3277d
// converted property setter: - (void)setParticipationStatus:(int)status;	// 0x34b750bd
// converted property setter: - (void)setRecurrenceRule:(id)rule;	// 0x34b75359
// converted property setter: - (void)setResponseComment:(id)comment;	// 0x34b75495
// declared property setter: - (void)setStartDate:(id)date;	// 0x34b32551
- (void)setTimeZone:(id)zone;	// 0x34b311ed
- (id)startCalendarDate;	// 0x34b287d1
// declared property getter: - (id)startDate;	// 0x34b291dd
- (XXStruct_lQVxyC)startDateGr;	// 0x34b2bf59
- (XXStruct_lQVxyC)startDatePinnedForAllDay;	// 0x34b74f01
// declared property getter: - (int)status;	// 0x34b2aa8d
- (BOOL)timeChanged;	// 0x34b75589
- (BOOL)titleChanged;	// 0x34b755b5
- (id)uniqueId;	// 0x34b75a21
- (BOOL)validateWithSpan:(int)span error:(id *)error;	// 0x34b35875
@end

