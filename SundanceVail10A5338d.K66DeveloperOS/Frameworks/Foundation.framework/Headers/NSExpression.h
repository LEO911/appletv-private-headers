/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/Foundation.framework/Foundation
 */

#import <NSObject.h> // Unknown library
#import "NSCopying.h"
#import "NSCoding.h"
#import "Foundation-Structs.h"


@interface NSExpression : NSObject <NSCoding, NSCopying> {
	void *_reserved;	// 4 = 0x4
	unsigned _expressionType;	// 8 = 0x8
}
@property(readonly, assign) unsigned expressionType;	// G=0x37325195; converted property
+ (id)_newKeyPathExpressionForString:(id)string;	// 0x3732513d
+ (id)expressionForAggregate:(id)aggregate;	// 0x373e3915
+ (id)expressionForBlock:(id)block arguments:(id)arguments;	// 0x373e3ba1
+ (id)expressionForConstantValue:(id)constantValue;	// 0x373433a9
+ (id)expressionForEvaluatedObject;	// 0x3733fbc1
+ (id)expressionForFunction:(id)function arguments:(id)arguments;	// 0x37341b79
+ (id)expressionForFunction:(id)function selectorName:(id)name arguments:(id)arguments;	// 0x373e39b1
+ (id)expressionForIntersectSet:(id)intersectSet with:(id)with;	// 0x373e3af9
+ (id)expressionForKeyPath:(id)keyPath;	// 0x373250d1
+ (id)expressionForMinusSet:(id)minusSet with:(id)with;	// 0x373e3b4d
+ (id)expressionForSubquery:(id)subquery usingIteratorVariable:(id)variable predicate:(id)predicate;	// 0x373e395d
+ (id)expressionForSymbolicString:(id)symbolicString;	// 0x373e38cd
+ (id)expressionForTernaryWithPredicate:(id)predicate trueExpression:(id)expression falseExpression:(id)expression3;	// 0x373e3a51
+ (id)expressionForUnionSet:(id)unionSet with:(id)with;	// 0x373e3aa5
+ (id)expressionForVariable:(id)variable;	// 0x373e3885
+ (id)expressionForVariableNameAssignment:(id)variableNameAssignment expression:(id)expression;	// 0x373e3a05
+ (id)expressionWithFormat:(id)format;	// 0x373e37f5
+ (id)expressionWithFormat:(id)format argumentArray:(id)array;	// 0x373e3791
+ (id)expressionWithFormat:(id)format arguments:(void *)arguments;	// 0x373e3821
- (id)initWithCoder:(id)coder;	// 0x3733ff39
- (id)initWithExpressionType:(unsigned)expressionType;	// 0x3731d439
- (id)_expressionWithSubstitutionVariables:(id)substitutionVariables;	// 0x373e3f19
- (BOOL)_shouldUseParensWithDescription;	// 0x373e3f15
- (void)acceptVisitor:(id)visitor flags:(unsigned)flags;	// 0x37340a11
- (id)arguments;	// 0x373e3dd1
- (id)collection;	// 0x373e3e61
- (id)constantValue;	// 0x373e3d1d
- (id)copyWithZone:(NSZone *)zone;	// 0x373e3c7d
- (id)description;	// 0x373e3cc5
- (void)encodeWithCoder:(id)coder;	// 0x373e3bf5
- (id)expressionBlock;	// 0x373e3ef1
// converted property getter: - (unsigned)expressionType;	// 0x37325195
- (id)expressionValueWithObject:(id)object context:(id)context;	// 0x373e3ca1
- (id)falseExpression;	// 0x373e3ecd
- (id)function;	// 0x373e3d65
- (id)keyPath;	// 0x373e3cf9
- (id)leftExpression;	// 0x373e3df5
- (id)operand;	// 0x373e3d89
- (id)predicate;	// 0x373e3e3d
- (id)predicateFormat;	// 0x373e3cd5
- (id)rightExpression;	// 0x373e3e19
- (SEL)selector;	// 0x373e3dad
- (id)subexpression;	// 0x373e3e85
- (id)trueExpression;	// 0x373e3ea9
- (id)variable;	// 0x373e3d41
@end

