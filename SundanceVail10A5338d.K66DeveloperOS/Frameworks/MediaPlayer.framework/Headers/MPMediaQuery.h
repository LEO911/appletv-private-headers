/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

#import "MediaPlayer-Structs.h"
#import "NSCoding.h"
#import <NSObject.h> // Unknown library
#import "NSCopying.h"

@class MPMediaItemCollection, NSSet, MPMediaLibrary, NSArray, MPMediaQuerySectionInfo;

@interface MPMediaQuery : NSObject <NSCoding, NSCopying> {
	MPMediaQueryInternal _internal;	// 4 = 0x4
}
@property(readonly, assign, nonatomic) unsigned _countOfCollections;	// G=0x34192875; 
@property(readonly, assign, nonatomic) unsigned _countOfItems;	// G=0x34192851; 
@property(readonly, assign, nonatomic) BOOL _hasCollections;	// G=0x34192825; 
@property(readonly, assign, nonatomic) BOOL _hasItems;	// G=0x341927f9; 
@property(assign, nonatomic) MPMediaQueryInternal _internal;	// G=0x3419386d; S=0x34193895; @synthesize
@property(readonly, assign, nonatomic) MPMediaItemCollection *collectionByJoiningCollections;	// G=0x341db245; 
@property(copy, nonatomic) NSSet *collectionPropertiesToFetch;	// G=0x3419275d; S=0x341927a5; 
@property(readonly, assign, nonatomic) MPMediaQuerySectionInfo *collectionSectionInfo;	// G=0x341928c1; 
@property(readonly, assign, nonatomic) NSArray *collectionSections;	// G=0x34192e2d; 
@property(readonly, assign, nonatomic) NSArray *collections;	// G=0x341920e5; 
@property(retain) id criteria;	// G=0x34193815; S=0x34193829; converted property
@property(readonly, assign, nonatomic) BOOL excludesEntitiesWithBlankNames;	// G=0x34192a29; 
@property(retain, nonatomic) NSSet *filterPredicates;	// G=0x34191de1; S=0x34191e29; 
@property(assign, nonatomic) int groupingType;	// G=0x3419211d; S=0x34192141; 
@property(copy, nonatomic) NSSet *itemPropertiesToFetch;	// G=0x341926e5; S=0x34192709; 
@property(readonly, assign, nonatomic) MPMediaQuerySectionInfo *itemSectionInfo;	// G=0x34192899; 
@property(readonly, assign, nonatomic) NSArray *itemSections;	// G=0x34192e05; 
@property(readonly, assign, nonatomic) NSArray *items;	// G=0x341920d1; 
@property(retain, nonatomic) MPMediaLibrary *mediaLibrary;	// G=0x34191f91; S=0x34191fa1; 
@property(copy, nonatomic, getter=_orderingProperties, setter=_setOrderingProperties:) NSArray *orderingProperties;	// G=0x3419293d; S=0x341928e9; 
@property(assign, nonatomic) BOOL sortItems;	// G=0x341929b5; S=0x34192985; 
@property(readonly, assign, nonatomic) BOOL specifiesPlaylistItems;	// G=0x34192d65; 
@property(assign, nonatomic) BOOL useSections;	// G=0x34192a05; S=0x341929e1; 
@property(readonly, assign, nonatomic) BOOL willGroupEntities;	// G=0x34192d91; 
+ (id)ITunesUAudioQuery;	// 0x34191a01
+ (id)activeGeniusPlaylist;	// 0x341dab91
+ (id)albumsQuery;	// 0x3419165d
+ (id)artistsQuery;	// 0x3419172d
+ (id)audibleAudiobooksQuery;	// 0x34191bdd
+ (id)audiobooksQuery;	// 0x34191b25
+ (id)compilationsQuery;	// 0x34191c59
+ (id)composersQuery;	// 0x34191d29
+ (id)geniusMixesQuery;	// 0x341925e5
+ (id)genresQuery;	// 0x34191d85
+ (void)initialize;	// 0x34190a69
+ (id)movieRentalsQuery;	// 0x341924b1
+ (id)moviesQuery;	// 0x341923f9
+ (id)musicVideosQuery;	// 0x34192289
+ (id)playlistsQuery;	// 0x341918d5
+ (id)podcastsQuery;	// 0x34191931
+ (void)setFilteringDisabled:(BOOL)disabled;	// 0x34192191
+ (id)songsQuery;	// 0x341917fd
+ (id)tvShowsQuery;	// 0x34192341
+ (id)videoPodcastsQuery;	// 0x3419252d
+ (id)videosQuery;	// 0x341921d1
- (id)init;	// 0x34190ab9
- (id)initWithCoder:(id)coder;	// 0x34191055
- (id)initWithCriteria:(id)criteria library:(id)library;	// 0x34190acd
- (id)initWithEntities:(id)entities entityType:(int)type;	// 0x34190c49
- (id)initWithFilterPredicates:(id)filterPredicates;	// 0x34190bd5
- (id)initWithFilterPredicatesInternal:(id)filterPredicatesInternal;	// 0x34190b41
// declared property getter: - (unsigned)_countOfCollections;	// 0x34192875
// declared property getter: - (unsigned)_countOfItems;	// 0x34192851
- (void)_enumerateCollectionsUsingBlock:(id)block;	// 0x341934ad
- (void)_enumerateItemsUsingBlock:(id)block;	// 0x3419331d
// declared property getter: - (BOOL)_hasCollections;	// 0x34192825
// declared property getter: - (BOOL)_hasItems;	// 0x341927f9
// declared property getter: - (MPMediaQueryInternal)_internal;	// 0x3419386d
- (BOOL)_isFilteringDisabled;	// 0x341932d1
- (id)_itemsImmediately:(BOOL)immediately;	// 0x34191fe5
// declared property getter: - (id)_orderingProperties;	// 0x3419293d
- (id)_sanitizedQuery;	// 0x34192e55
// declared property setter: - (void)_setOrderingProperties:(id)properties;	// 0x341928e9
- (BOOL)_updatePredicateForProperty:(id)property withPropertyPredicate:(id)propertyPredicate;	// 0x341db031
- (id)_valueForAggregateFunction:(id)aggregateFunction onProperty:(id)property entityType:(int)type;	// 0x34192ec5
- (void)addFilterPredicate:(id)predicate;	// 0x34191e7d
// declared property getter: - (id)collectionByJoiningCollections;	// 0x341db245
// declared property getter: - (id)collectionPropertiesToFetch;	// 0x3419275d
// declared property getter: - (id)collectionSectionInfo;	// 0x341928c1
// declared property getter: - (id)collectionSections;	// 0x34192e2d
// declared property getter: - (id)collections;	// 0x341920e5
- (id)copyByRemovingStaticEntities;	// 0x34191605
- (id)copyWithZone:(NSZone *)zone;	// 0x34191489
// converted property getter: - (id)criteria;	// 0x34193815
- (void)dealloc;	// 0x34190c99
- (id)description;	// 0x34190cf1
- (void)encodeWithCoder:(id)coder;	// 0x341912c1
// declared property getter: - (BOOL)excludesEntitiesWithBlankNames;	// 0x34192a29
// declared property getter: - (id)filterPredicates;	// 0x34191de1
- (unsigned)groupingThreshold;	// 0x34192d8d
// declared property getter: - (int)groupingType;	// 0x3419211d
- (unsigned)hash;	// 0x34191015
- (BOOL)isEqual:(id)equal;	// 0x34190f59
// declared property getter: - (id)itemPropertiesToFetch;	// 0x341926e5
// declared property getter: - (id)itemSectionInfo;	// 0x34192899
// declared property getter: - (id)itemSections;	// 0x34192e05
// declared property getter: - (id)items;	// 0x341920d1
// declared property getter: - (id)mediaLibrary;	// 0x34191f91
- (id)predicateForProperty:(id)property;	// 0x341dad3d
- (void)removeFilterPredicate:(id)predicate;	// 0x34191f05
- (void)removePredicatesForProperty:(id)property;	// 0x341dae65
// declared property setter: - (void)setCollectionPropertiesToFetch:(id)fetch;	// 0x341927a5
// converted property setter: - (void)setCriteria:(id)criteria;	// 0x34193829
- (void)setFilterPredicate:(id)predicate forProperty:(id)property;	// 0x341dafa1
// declared property setter: - (void)setFilterPredicates:(id)predicates;	// 0x34191e29
- (void)setFilterPropertyPredicate:(id)predicate;	// 0x341daffd
// declared property setter: - (void)setGroupingType:(int)type;	// 0x34192141
// declared property setter: - (void)setItemPropertiesToFetch:(id)fetch;	// 0x34192709
// declared property setter: - (void)setMediaLibrary:(id)library;	// 0x34191fa1
// declared property setter: - (void)setSortItems:(BOOL)items;	// 0x34192985
- (void)setStaticEntities:(id)entities entityType:(int)type;	// 0x341937cd
// declared property setter: - (void)setUseSections:(BOOL)sections;	// 0x341929e1
// declared property setter: - (void)set_internal:(MPMediaQueryInternal)internal;	// 0x34193895
// declared property getter: - (BOOL)sortItems;	// 0x341929b5
// declared property getter: - (BOOL)specifiesPlaylistItems;	// 0x34192d65
- (BOOL)updateFilterPredicatesToHideUnreachableWhenOfflineCloudContent:(BOOL)hideUnreachableWhenOfflineCloudContent;	// 0x341db0b1
// declared property getter: - (BOOL)useSections;	// 0x34192a05
- (id)valueForAggregateFunction:(id)aggregateFunction onCollectionsForProperty:(id)property;	// 0x341932ad
- (id)valueForAggregateFunction:(id)aggregateFunction onItemsForProperty:(id)property;	// 0x34193289
// declared property getter: - (BOOL)willGroupEntities;	// 0x34192d91
@end

