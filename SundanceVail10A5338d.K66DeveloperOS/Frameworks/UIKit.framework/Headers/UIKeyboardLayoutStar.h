/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/UIKit.framework/UIKit
 */

#import "UIKit-Structs.h"
#import "UIKeyboardLayout.h"

@class NSMutableSet, NSTimer, UIKBTree, CADisplayLink, NSMutableDictionary, UIKBKeyplaneView, UISwipeGestureRecognizer, NSString, UIKBBackgroundView, UIDelayedAction;
@protocol UIKeyboardRivenTransitionView;

__attribute__((visibility("hidden")))
@interface UIKeyboardLayoutStar : UIKeyboardLayout {
	UIKBTree *_keyboard;	// 104 = 0x68
	UIKBTree *_keyplane;	// 108 = 0x6c
	NSString *_keyboardName;	// 112 = 0x70
	NSString *_keyplaneName;	// 116 = 0x74
	int _appearance;	// 120 = 0x78
	UIKBTree *_activeKey;	// 124 = 0x7c
	UIKBKeyplaneView *_keyplaneView;	// 128 = 0x80
	UIKBBackgroundView *_backgroundView;	// 132 = 0x84
	int _keyboardType;	// 136 = 0x88
	CGPoint _initialDragPoint;	// 140 = 0x8c
	CGPoint _dragPrevPoint;	// 148 = 0x94
	float _dragValues[4];	// 156 = 0x9c
	float _dragVelocity;	// 172 = 0xac
	double _prevTouchUpTime;	// 176 = 0xb0
	double _prevTouchDownTime;	// 184 = 0xb8
	int _prevUpActions;	// 192 = 0xc0
	NSMutableDictionary *_keyboards;	// 196 = 0xc4
	NSMutableDictionary *_allKeyplaneViews;	// 200 = 0xc8
	NSMutableSet *_allKeyplaneKeycaps;	// 204 = 0xcc
	NSMutableSet *_validInputStrings;	// 208 = 0xd0
	NSString *_localizedInputKey;	// 212 = 0xd4
	CFDictionaryRef _extendedTouchInfoMap;	// 216 = 0xd8
	int _preferredTrackingChangeCount;	// 220 = 0xdc
	int _shiftTrackingChangeCount;	// 224 = 0xe0
	NSMutableSet *_accentInfo;	// 228 = 0xe4
	NSMutableSet *_hasAccents;	// 232 = 0xe8
	NSMutableDictionary *_delegatesForKeyplaneKeys;	// 236 = 0xec
	id _spaceTarget;	// 240 = 0xf0
	SEL _spaceAction;	// 244 = 0xf4
	SEL _spaceLongAction;	// 248 = 0xf8
	id _returnTarget;	// 252 = 0xfc
	SEL _returnAction;	// 256 = 0x100
	SEL _returnLongAction;	// 260 = 0x104
	id _deleteTarget;	// 264 = 0x108
	SEL _deleteAction;	// 268 = 0x10c
	SEL _deleteLongAction;	// 272 = 0x110
	BOOL _secureTextEntry;	// 276 = 0x114
	BOOL _shift;	// 277 = 0x115
	BOOL _autoshift;	// 278 = 0x116
	BOOL _settingShift;	// 279 = 0x117
	BOOL _didLongPress;	// 280 = 0x118
	BOOL _dragged;	// 281 = 0x119
	BOOL _dragChangedKey;	// 282 = 0x11a
	BOOL _touchDownInMoreKey;	// 283 = 0x11b
	BOOL _touchDownInShiftKey;	// 284 = 0x11c
	BOOL _touchDownInDeleteKey;	// 285 = 0x11d
	BOOL _wasShifted;	// 286 = 0x11e
	BOOL _dragDismissStarted;	// 287 = 0x11f
	BOOL _swipeDetected;	// 288 = 0x120
	BOOL _previousTouchInMore;	// 289 = 0x121
	BOOL _showIntlKey;	// 290 = 0x122
	BOOL _showDictationKey;	// 291 = 0x123
	BOOL _shiftLockReady;	// 292 = 0x124
	double _shiftLockFirstTapTime;	// 296 = 0x128
	UISwipeGestureRecognizer *_rightSwipeRecognizer;	// 304 = 0x130
	UISwipeGestureRecognizer *_leftSwipeRecognizer;	// 308 = 0x134
	UISwipeGestureRecognizer *_upSwipeRecognizer;	// 312 = 0x138
	UIView<UIKeyboardRivenTransitionView> *_transitionView;	// 316 = 0x13c
	float _initialSplitProgress;	// 320 = 0x140
	float _finalSplitProgress;	// 324 = 0x144
	float _initialPinchSeparation;	// 328 = 0x148
	float _pinchSeparationValues[4];	// 332 = 0x14c
	BOOL _pinchDetected;	// 348 = 0x15c
	double _autoSplitLastUpdate;	// 352 = 0x160
	float _autoSplitElapsedTime;	// 360 = 0x168
	CADisplayLink *_displayLink;	// 364 = 0x16c
	BOOL _ghostKeysEnabled;	// 368 = 0x170
	UIDelayedAction *_delayedCentroidUpdate;	// 372 = 0x174
	BOOL _isRebuilding;	// 376 = 0x178
	BOOL _preRotateShift;	// 377 = 0x179
	NSString *_preRotateKeyplaneName;	// 380 = 0x17c
	CGPoint _keyPeripheralInset;	// 384 = 0x180
	int _lastFlickDirection;	// 392 = 0x188
	UIView *_flickPopupView;	// 396 = 0x18c
	NSMutableDictionary *_compositeImages;	// 400 = 0x190
	NSTimer *_flickPopuptimer;	// 404 = 0x194
	id _touchInfo;	// 408 = 0x198
	BOOL _popupViewIsShown;	// 412 = 0x19c
	UIView *_dimKeyboardImageView;	// 416 = 0x1a0
	BOOL _keyboardImageViewIsDim;	// 420 = 0x1a4
	BOOL _isOutOfBounds;	// 421 = 0x1a5
}
@property(retain, nonatomic) UIKBTree *activeKey;	// G=0x30d5afe5; S=0x30d0c77d; @synthesize=_activeKey
@property(assign, nonatomic) BOOL autoShift;	// G=0x30ea4dbd; S=0x30ea4dcd; @synthesize=_autoshift
@property(assign, nonatomic) BOOL didLongPress;	// G=0x30ea4ddd; S=0x30ea4ded; @synthesize=_didLongPress
@property(readonly, assign, nonatomic) UIKBTree *keyboard;	// G=0x30d906a5; @synthesize=_keyboard
@property(copy, nonatomic) NSString *keyboardName;	// G=0x30ea4d85; S=0x30ea4d99; @synthesize=_keyboardName
@property(readonly, assign, nonatomic) UIKBTree *keyplane;	// G=0x30cee63d; @synthesize=_keyplane
@property(copy, nonatomic) NSString *keyplaneName;	// G=0x30cee651; S=0x30cee669; @synthesize=_keyplaneName
@property(copy, nonatomic) NSString *localizedInputKey;	// G=0x30ea4e1d; S=0x30cee629; @synthesize=_localizedInputKey
@property(readonly, assign, nonatomic) NSString *localizedInputMode;	// G=0x30cee5dd; 
@property(readonly, assign) BOOL pinchDetected;	// G=0x30cf6c85; converted property
@property(readonly, assign, nonatomic, getter=isRotating) BOOL rotating;	// G=0x30cf4fc1; 
@property(assign, nonatomic) BOOL shift;	// G=0x30ea4dad; S=0x30cf6611; @synthesize=_shift
@property(readonly, assign, nonatomic) BOOL showDictationKey;	// G=0x30ea4e0d; @synthesize=_showDictationKey
@property(assign, nonatomic) BOOL showIntlKey;	// G=0x30cf2e45; S=0x30ea4dfd; @synthesize=_showIntlKey
- (id)initWithFrame:(CGRect)frame;	// 0x30ced149
- (void)_autoSplit:(id)split;	// 0x30ea3f91
- (id)_keyplaneVariantsKeyForString:(id)string;	// 0x30ea20ed
- (void)activateCompositeKey:(id)key direction:(int)direction flickString:(id)string popupInfo:(id)info;	// 0x30ea67b9
- (id)activationIndicatorView;	// 0x30ea2955
// declared property getter: - (id)activeKey;	// 0x30d5afe5
- (id)activeTouchForKey:(id)key;	// 0x30d8c0c5
- (CGPoint)applyError:(CGPoint)error toKey:(id)key;	// 0x30d90d41
// declared property getter: - (BOOL)autoShift;	// 0x30ea4dbd
- (BOOL)backgroundNeedsRedraw;	// 0x30ea0ec1
- (id)baseKeyForString:(id)string;	// 0x30d90355
- (id)cacheIdentifierForKeyplaneNamed:(id)keyplaneNamed withVisualStyle:(int)visualStyle;	// 0x30cf2d81
- (id)cachedKeyplaneNameForKeyplane:(id)keyplane;	// 0x30cf2be1
- (BOOL)canProduceString:(id)string;	// 0x30d900b9
- (BOOL)canReuseKeyplaneView;	// 0x30d1d9ed
- (void)cancelTouchIfNecessaryForInfo:(id)info;	// 0x30d188d5
- (id)candidateList;	// 0x30cef5ad
- (void)changeToKeyplane:(id)keyplane;	// 0x30d90c4d
- (void)clearAllKeyDelegates;	// 0x30cef745
- (void)clearAllTouchInfo;	// 0x30cefb75
- (void)clearHandwritingStrokesIfNeeded;	// 0x30d09d09
- (void)clearInfoForTouch:(id)touch;	// 0x30d1888d
- (void)clearUnusedObjects:(BOOL)objects;	// 0x30e9fda9
- (id)compositeImageForKey:(id)key;	// 0x30ea5929
- (void)confirmAction;	// 0x30ea1af1
- (void)deactivateActiveKeys;	// 0x30d19805
- (void)deactivateActiveKeysClearingTouchInfo:(BOOL)info clearingDimming:(BOOL)dimming;	// 0x30ea12b9
- (void)dealloc;	// 0x30e9fb65
- (id)defaultNameForKeyplaneName:(id)keyplaneName;	// 0x30cef719
- (void)deleteAction;	// 0x30d8c1dd
- (void)didClearInput;	// 0x30d09cc5
// declared property getter: - (BOOL)didLongPress;	// 0x30ea4ddd
- (void)didRotate;	// 0x30ea4b8d
- (int)displayTypeHintForMoreKey;	// 0x30cf24b1
- (int)displayTypeHintForShiftKey;	// 0x30cf22f9
- (BOOL)doesKeyCharging;	// 0x30cf6a01
- (unsigned)downActionFlagsForKey:(id)key;	// 0x30d0ce91
- (void)downActionShiftWithKey:(id)key;	// 0x30d99fe9
- (CGSize)dragGestureSize;	// 0x30ea0319
- (void)finishSplit;	// 0x30ea3899
- (void)finishSplitTransition;	// 0x30ea3a91
- (void)finishSplitTransitionWithProgress:(float)progress;	// 0x30ea3bad
- (id)flickPopupStringForKey:(id)key withString:(id)string;	// 0x30ea5449
- (id)flickStringForInputKey:(id)inputKey direction:(int)direction;	// 0x30ea5485
- (void)flushKeyCache:(id)cache;	// 0x30ea00d5
- (CGRect)frameForKeyWithRepresentedString:(id)representedString;	// 0x30ea4f29
- (CGRect)frameForKeylayoutName:(id)keylayoutName;	// 0x30ea04c9
- (CGRect)frameForKeylayoutName:(id)keylayoutName onKeyplaneName:(id)name;	// 0x30ea0461
- (CGRect)frameForLastKeyWithRepresentedString:(id)representedString;	// 0x30ea51bd
- (id)generateInfoForTouch:(id)touch;	// 0x30d0bb21
- (BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;	// 0x30ea46d9
- (BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;	// 0x30ea45c9
- (id)getFlickCompositeImageForKey:(id)key direction:(int)direction rect:(CGRect)rect;	// 0x30ea5b8d
- (id)getPopupBackgroundImageForKey:(id)key direction:(int)direction popupInfo:(id)info rect:(CGRect)rect;	// 0x30ea5949
- (void)handleDismissFlickView:(id)view;	// 0x30ea6385
- (void)handleFlick:(id)flick;	// 0x30ea5531
- (void)handlePopupView:(id)view;	// 0x30ea62cd
- (SEL)handlerForNotification:(id)notification;	// 0x30ea020d
- (BOOL)handwritingPlane;	// 0x30d09d95
- (BOOL)hasCandidateKeys;	// 0x30ea16f1
- (float)hitBuffer;	// 0x30cfc209
- (BOOL)ignoresShiftState;	// 0x30d3bc39
- (id)infoForTouch:(id)touch;	// 0x30d15475
- (void)installGestureRecognizers;	// 0x30ced4e1
- (float)interpretPinchSeparationValues;	// 0x30ea34b9
- (void)interpretTouchesForSplit;	// 0x30ea3be9
- (BOOL)isLongPressedKey:(id)key;	// 0x30d15cfd
// declared property getter: - (BOOL)isRotating;	// 0x30cf4fc1
- (BOOL)isShiftKeyBeingHeld;	// 0x30cf65ad
- (BOOL)isShiftKeyPlaneChooser;	// 0x30cef62d
- (BOOL)keyHasAccentedVariants:(id)variants;	// 0x30ea4971
- (id)keyHitTest:(CGPoint)test;	// 0x30d0c0c5
- (id)keyHitTestClosestToPoint:(CGPoint)point;	// 0x30d5adf9
- (id)keyHitTestContainingPoint:(CGPoint)point;	// 0x30ea13ad
- (id)keyHitTestForTouchInfo:(id)touchInfo touchStage:(int)stage;	// 0x30d0bc01
- (id)keyHitTestWithoutCharging:(CGPoint)charging;	// 0x30d0b0c5
- (id)keyWithRepresentedString:(id)representedString;	// 0x30ea4e31
// declared property getter: - (id)keyboard;	// 0x30d906a5
// declared property getter: - (id)keyboardName;	// 0x30ea4d85
- (id)keyboardWithName:(id)name;	// 0x30cee215
- (int)keycodeForKey:(id)key;	// 0x30d0c6b5
// declared property getter: - (id)keyplane;	// 0x30cee63d
- (id)keyplaneForKey:(id)key;	// 0x30d906fd
// declared property getter: - (id)keyplaneName;	// 0x30cee651
- (id)keyplaneNamed:(id)named;	// 0x30ea4c29
- (double)lastTouchUpTimestamp;	// 0x30ea0801
// declared property getter: - (id)localizedInputKey;	// 0x30ea4e1d
// declared property getter: - (id)localizedInputMode;	// 0x30cee5dd
- (void)longPressAction;	// 0x30ea1b29
- (void)nextCandidatesAction;	// 0x30ea1abd
- (id)overlayCharacterImageForKey:(id)key direction:(int)direction rect:(CGRect)rect flickString:(id)string popupInfo:(id)info;	// 0x30ea5c0d
- (BOOL)performReturnAction;	// 0x30ea4299
- (BOOL)performSpaceAction;	// 0x30ea42d5
// converted property getter: - (BOOL)pinchDetected;	// 0x30cf6c85
- (BOOL)pinchSplitGestureEnabled;	// 0x30ea3bcd
- (BOOL)pointInside:(CGPoint)inside forEvent:(GSEventRef)event;	// 0x30d0b951
- (id)popupKeyViews;	// 0x30ea5305
- (void)prepareForSplitTransition;	// 0x30ea3609
- (void)rebuildSplitTransitionView;	// 0x30ea0b25
- (void)rebuildSplitTransitionViewFromKeyplane:(id)keyplane toKeyplane:(id)keyplane2;	// 0x30ea0819
- (void)refreshForDictationAvailablityDidChange;	// 0x30ea11e9
- (void)refreshForRivenPreferences;	// 0x30ea05c5
- (void)refreshGhostKeyState;	// 0x30d15489
- (void)removeFromSuperview;	// 0x30ea0019
- (CGImageRef)renderedImageWithStateFallbacksForToken:(id)token;	// 0x30ea0b39
- (CGImageRef)renderedImageWithToken:(id)token;	// 0x30ea0c51
- (CGImageRef)renderedKeyplaneWithToken:(id)token split:(BOOL)split;	// 0x30ea0df1
- (void)resizeForKeyplaneSize:(CGSize)keyplaneSize;	// 0x30cf03a9
- (void)restoreDefaultsForAllKeys;	// 0x30cf50a9
- (void)restoreDefaultsForKey:(id)key;	// 0x30cf50ed
- (id)scriptingInfoWithChildren;	// 0x30d8fd21
- (void)sendStringAction:(id)action forKey:(id)key isPopupVariant:(BOOL)variant;	// 0x30ea14f9
- (void)setAction:(SEL)action forKey:(id)key;	// 0x30ea176d
// declared property setter: - (void)setActiveKey:(id)key;	// 0x30d0c77d
// declared property setter: - (void)setAutoShift:(BOOL)shift;	// 0x30ea4dcd
- (void)setAutoshift:(BOOL)autoshift;	// 0x30cf69b9
- (void)setCompositeImage:(id)image forKey:(id)key;	// 0x30ea58fd
- (void)setCurrencyKeysForCurrentLocaleOnKeyplane:(id)currentLocaleOnKeyplane;	// 0x30cf289d
- (void)setDelegate:(id)delegate forKey:(id)key;	// 0x30ea17f5
// declared property setter: - (void)setDidLongPress:(BOOL)longPress;	// 0x30ea4ded
- (void)setKeyForTouchInfo:(id)touchInfo key:(id)key;	// 0x30ea5435
- (void)setKeyboardAppearance:(int)appearance;	// 0x30cef805
- (void)setKeyboardDim:(BOOL)dim;	// 0x30ea66b9
- (void)setKeyboardDim:(BOOL)dim amount:(float)amount withDuration:(float)duration;	// 0x30ea63d1
// declared property setter: - (void)setKeyboardName:(id)name;	// 0x30ea4d99
- (void)setKeyboardName:(id)name appearance:(int)appearance;	// 0x30ceded9
// declared property setter: - (void)setKeyplaneName:(id)name;	// 0x30cee669
- (void)setLabel:(id)label forKey:(id)key;	// 0x30cf519d
// declared property setter: - (void)setLocalizedInputKey:(id)key;	// 0x30cee629
- (void)setLongPressAction:(SEL)action forKey:(id)key;	// 0x30ea17b1
- (void)setReturnKeyEnabled:(BOOL)enabled withDisplayName:(id)displayName withType:(int)type;	// 0x30cf6105
// declared property setter: - (void)setShift:(BOOL)shift;	// 0x30cf6611
// declared property setter: - (void)setShowIntlKey:(BOOL)key;	// 0x30ea4dfd
- (void)setSplit:(BOOL)split animated:(BOOL)animated;	// 0x30ea4111
- (void)setSplitProgress:(float)progress;	// 0x30ea3f39
- (void)setState:(int)state forKey:(id)key;	// 0x30cf3419
- (void)setTarget:(id)target forKey:(id)key;	// 0x30ea1729
// declared property getter: - (BOOL)shift;	// 0x30ea4dad
- (BOOL)shouldHitTestKey:(id)key;	// 0x30cf5d21
- (BOOL)shouldPreventInputManagerHitTestingForKey:(id)key;	// 0x30d0c659
- (BOOL)shouldRetestKey:(id)key withKeyplane:(id)keyplane;	// 0x30d155a5
- (BOOL)shouldShowDictationKey;	// 0x30ea0fe1
- (BOOL)shouldShowIndicator;	// 0x30ea28f1
// declared property getter: - (BOOL)showDictationKey;	// 0x30ea4e0d
- (void)showFlickView:(int)view withKey:(id)key flickString:(id)string;	// 0x30ea58bd
// declared property getter: - (BOOL)showIntlKey;	// 0x30cf2e45
- (void)showKeyboardType:(int)type appearance:(int)appearance orientation:(id)orientation withShift:(BOOL)shift;	// 0x30ced87d
- (void)showPopupVariantsForKey:(id)key;	// 0x30ea2131
- (void)showPopupView:(int)view withKey:(id)key popupInfo:(id)info force:(BOOL)force;	// 0x30ea674d
- (void)showSplitTransitionView:(BOOL)view;	// 0x30ea36f1
- (id)simulateTouch:(CGPoint)touch;	// 0x30ea4c55
- (id)simulateTouchForCharacter:(id)character errorVector:(CGPoint)vector shouldTypeVariants:(BOOL)variants baseKeyForVariants:(BOOL)variants4;	// 0x30d909f5
- (id)splitNameForKeyplane:(id)keyplane;	// 0x30ea02c1
- (id)splitNameForKeyplaneName:(id)keyplaneName;	// 0x30ea0271
- (int)stateForKey:(id)key;	// 0x30ea1299
- (int)stateForKeyplaneSwitchKey:(id)keyplaneSwitchKey;	// 0x30ea106d
- (int)stateForShiftKey:(id)shiftKey;	// 0x30cf3d0d
- (void)swipeDetected:(id)detected;	// 0x30ea4851
- (void)touchCancelled:(id)cancelled;	// 0x30ea43f1
- (void)touchDown:(id)down;	// 0x30d0b601
- (void)touchDownWithKey:(id)key atPoint:(CGPoint)point;	// 0x30d0c791
- (void)touchDragged:(id)dragged;	// 0x30d59eb9
- (id)touchForKey:(id)key;	// 0x30d99f05
- (void)touchUp:(id)up;	// 0x30d13df1
- (void)uninstallGestureRecognizers;	// 0x30ea4761
- (unsigned)upActionFlagsForKey:(id)key;	// 0x30d15665
- (void)upActionShift;	// 0x30d9a259
- (void)updateBackgroundIfNeeded;	// 0x30cf311d
- (void)updateKeyCentroids;	// 0x30cf5721
- (void)updateKeyboardForKeyplane:(id)keyplane;	// 0x30cf00f5
- (BOOL)updateKeysWithDelegates;	// 0x30cf554d
- (void)updateLocalizedKeys:(BOOL)keys;	// 0x30cf0ff1
- (void)updateLocalizedKeysOnKeyplane:(id)keyplane;	// 0x30cf11dd
- (void)updateMoreAndInternationalKeys;	// 0x30cf0a5d
- (void)updateShiftKeyState;	// 0x30cf6735
- (void)updateTransitionWithFlags:(int)flags;	// 0x30cf63c5
- (BOOL)usesAutoShift;	// 0x30cf65dd
- (int)visualStyleForKeyboardIfSplit:(BOOL)keyboardIfSplit;	// 0x30ea0779
- (void)willRotate;	// 0x30ea4b3d
@end

