/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices
 */

#import <NSObject.h> // Unknown library
#import "AFManagedStore.h"

@class DKConnection, NSString, NSMutableDictionary;
@protocol AFAssistantUIService, AFSpeechDelegate;

@interface AFConnection : NSObject <AFManagedStore> {
	DKConnection *_connection;	// 4 = 0x4
	id<AFAssistantUIService> _delegate;	// 8 = 0x8
	id<AFSpeechDelegate> _speechDelegate;	// 12 = 0xc
	float _averagePower;	// 16 = 0x10
	float _peakPower;	// 20 = 0x14
	NSString *_outstandingRequestClass;	// 24 = 0x18
	unsigned _stateInSync : 1;	// 28 = 0x1c
	unsigned _shouldSpeak : 1;	// 28 = 0x1c
	unsigned _isCapturingSpeech : 1;	// 28 = 0x1c
	unsigned _hasOutstandingRequest : 1;	// 28 = 0x1c
	unsigned _replyContextMayInitiateCall : 1;	// 28 = 0x1c
	NSMutableDictionary *_replies;	// 32 = 0x20
}
@property(readonly, assign) float averagePower;	// G=0x33f76731; converted property
@property(assign, nonatomic) __weak id<AFAssistantUIService> delegate;	// G=0x33f77005; S=0x33f73f59; @synthesize=_delegate
@property(readonly, assign, nonatomic) BOOL isRecording;	// G=0x33f76709; 
@property(readonly, assign) float peakPower;	// G=0x33f76741; converted property
@property(assign, nonatomic) __weak id<AFSpeechDelegate> speechDelegate;	// G=0x33f77025; S=0x33f77045; @synthesize=_speechDelegate
+ (void)_reachabilityDidChange:(id)_reachability;	// 0x33f75961
+ (BOOL)assistantIsEnabled;	// 0x33f757b5
+ (BOOL)assistantIsSupported;	// 0x33f75955
+ (BOOL)assistantIsSupportedForLanguageCode:(id)languageCode error:(id *)error;	// 0x33f7580d
+ (void)beginMonitoringAvailability;	// 0x33f759ed
+ (void)defrost;	// 0x33f75bd1
+ (void)initialize;	// 0x33f73eb1
+ (BOOL)isAvailable;	// 0x33f75a59
+ (void)stopMonitoringAvailability;	// 0x33f75ae9
+ (BOOL)userDataSyncNeeded;	// 0x33f75b45
- (id)init;	// 0x33f73eb5
- (void).cxx_destruct;	// 0x33f77059
- (void)_asyncBarrierWithBlock:(id)block;	// 0x33f772f1
- (void)_barrier;	// 0x33f772b9
- (void)_cancelRequestTimeout;	// 0x33f755c1
- (void)_checkAndSetIsCapturingSpeech:(BOOL)speech;	// 0x33f73f99
- (void)_clearAssistantInfoForAccountWithIdentifier:(id)identifier;	// 0x33f77341
- (void)_clearConnection;	// 0x33f752f1
- (id)_connection;	// 0x33f7507d
- (void)_handleMessage:(id)message;	// 0x33f74f81
- (void)_invokeRequestTimeout;	// 0x33f75519
- (void)_msgDismissAssistant:(id)assistant;	// 0x33f74ab5
- (void)_msgDoCommand:(id)command;	// 0x33f746dd
- (void)_msgOpenURL:(id)url;	// 0x33f7487d
- (void)_msgReplyMayInitiateCall:(id)call;	// 0x33f74c41
- (void)_msgRequestCompleted:(id)completed;	// 0x33f7484d
- (void)_msgRequestError:(id)error;	// 0x33f74b09
- (void)_msgSpeechLevelUpdate:(id)update;	// 0x33f74c8d
- (void)_msgSpeechRecognitionDidFail:(id)_msgSpeechRecognition;	// 0x33f74ed1
- (void)_msgSpeechRecognized:(id)recognized;	// 0x33f74e11
- (void)_msgSpeechRecordingDidBegin:(id)_msgSpeechRecording;	// 0x33f74c7d
- (void)_msgSpeechRecordingDidCancel:(id)_msgSpeechRecording;	// 0x33f74d71
- (void)_msgSpeechRecordingDidEnd:(id)_msgSpeechRecording;	// 0x33f74d41
- (void)_msgSpeechRecordingDidFail:(id)_msgSpeechRecording;	// 0x33f74da1
- (void)_msgSpeechRecordingWillBegin:(id)_msgSpeechRecording;	// 0x33f74c6d
- (void)_msgStateUpdate:(id)update;	// 0x33f74ba5
- (void)_requestDidEnd;	// 0x33f740a1
- (void)_requestStateUpdate;	// 0x33f755fd
- (void)_requestWillBeginWithRequestClass:(id)_request;	// 0x33f74065
- (void)_scheduleRequestTimeout:(double)timeout;	// 0x33f75585
- (void)_sendMessage:(id)message withReply:(id)reply;	// 0x33f771cd
- (void)_sendMessage:(id)message withReplySync:(id)replySync;	// 0x33f77251
- (void)_tellDelegateRequestFailed:(id)failed requestClass:(id)aClass;	// 0x33f74135
- (void)_tellDelegateRequestFinished;	// 0x33f740e1
- (void)_tellDelegateShouldSpeakChanged:(BOOL)_tellDelegate;	// 0x33f741b5
- (void)_tellSpeechDelegateDidRecognizeSpeechPhrases:(id)_tellSpeechDelegate correctionIdentifier:(id)identifier;	// 0x33f743d5
- (void)_tellSpeechDelegateRecognitionDidFail:(id)_tellSpeechDelegateRecognition;	// 0x33f74671
- (void)_tellSpeechDelegateRecordingDidBegin;	// 0x33f7426d
- (void)_tellSpeechDelegateRecordingDidCancel;	// 0x33f74315
- (void)_tellSpeechDelegateRecordingDidEnd;	// 0x33f742c1
- (void)_tellSpeechDelegateRecordingDidFail:(id)_tellSpeechDelegateRecording;	// 0x33f74369
- (void)_tellSpeechDelegateRecordingWillBegin;	// 0x33f74219
- (void)_unhandledMessage:(id)message;	// 0x33f74f11
// converted property getter: - (float)averagePower;	// 0x33f76731
- (void)cancelRequest;	// 0x33f764fd
- (void)cancelSpeech;	// 0x33f761b1
- (void)clearAndSetApplicationContext;	// 0x33f76ae9
- (void)clearContext;	// 0x33f76a69
- (void)clearUndoStack;	// 0x33f76c69
- (void)dealloc;	// 0x33f73f19
// declared property getter: - (id)delegate;	// 0x33f77005
- (id)domainObjectForKey:(id)key;	// 0x33f76ce9
- (void)endSession;	// 0x33f75b51
// declared property getter: - (BOOL)isRecording;	// 0x33f76709
- (void)markBulletinAsReadForIdentifier:(id)identifier;	// 0x33f7643d
// converted property getter: - (float)peakPower;	// 0x33f76741
- (void)preheat;	// 0x33f75c89
- (void)redoRequest;	// 0x33f76be9
- (BOOL)replyContextMayInitiateCall;	// 0x33f76751
- (void)rollbackRequest;	// 0x33f76591
- (void)sendGenericAceCommand:(id)command;	// 0x33f76765
- (void)sendGenericAceCommand:(id)command conflictHandler:(id)handler;	// 0x33f76779
- (void)sendReplyCommand:(id)command;	// 0x33f769a9
// declared property setter: - (void)setDelegate:(id)delegate;	// 0x33f73f59
- (void)setDomainObject:(id)object forKey:(id)key;	// 0x33f76f15
- (BOOL)setLanguageCode:(id)code error:(id *)error;	// 0x33f75d09
- (void)setLockState:(BOOL)state screenLocked:(BOOL)locked;	// 0x33f75e59
// declared property setter: - (void)setSpeechDelegate:(id)delegate;	// 0x33f77045
- (BOOL)shouldSpeak;	// 0x33f7671d
// declared property getter: - (id)speechDelegate;	// 0x33f77025
- (void)startRequestWithCorrectedText:(id)correctedText forSpeechIdentifier:(id)speechIdentifier;	// 0x33f76611
- (void)startRequestWithText:(id)text;	// 0x33f76079
- (void)startRequestWithText:(id)text timeout:(double)timeout;	// 0x33f75f8d
- (void)startSpeechRequestWithOptions:(id)options;	// 0x33f760a9
- (void)startSpeechRequestWithSpeechFileAtURL:(id)url;	// 0x33f770c5
- (void)stopSpeech;	// 0x33f76429
- (void)stopSpeechWithOptions:(id)options;	// 0x33f76339
- (void)undoRequest;	// 0x33f76b69
- (void)updateSpeechOptions:(id)options;	// 0x33f76259
@end

