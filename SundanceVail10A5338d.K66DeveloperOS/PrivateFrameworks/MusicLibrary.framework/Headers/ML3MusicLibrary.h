/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

#import "MusicLibrary-Structs.h"
#import <NSObject.h> // Unknown library

@class NSArray, ML3DatabaseMetadata, ML3NondurableWriteSet, ML3UbiquitousDatabase, MLSQLiteConnection, ML3Container, ML3MusicLibrary_SQLiteDatabaseContext, NSString, NSCountedSet, NSMutableArray;
@protocol OS_dispatch_queue;

@interface ML3MusicLibrary : NSObject {
	NSString *_path;	// 4 = 0x4
	BOOL _enableWrites;	// 8 = 0x8
	ML3MusicLibrary_SQLiteDatabaseContext *_mainDatabaseContext;	// 12 = 0xc
	ML3MusicLibrary_SQLiteDatabaseContext *_backgroundDatabaseContext;	// 16 = 0x10
	MLSQLiteConnection *_inMemoryDatabaseConnection;	// 20 = 0x14
	NSObject<OS_dispatch_queue> *_atomicityQueue;	// 24 = 0x18
	ML3UbiquitousDatabase *_ubiquitousDatabase;	// 28 = 0x1c
	NSObject<OS_dispatch_queue> *_backgroundQueue;	// 32 = 0x20
	opaque_pthread_t *_backgroundQueueOwner;	// 36 = 0x24
	NSCountedSet *_notifyNamesToIgnore;	// 40 = 0x28
	NSMutableArray *_pendingNotifyPostNames;	// 44 = 0x2c
	NSString *_notifyName;	// 48 = 0x30
	int _notifyToken;	// 52 = 0x34
	NSString *_nonContentsNotifyName;	// 56 = 0x38
	int _nonContentsNotifyToken;	// 60 = 0x3c
	NSString *_invisiblePropertyNotifyName;	// 64 = 0x40
	int _invisiblePropertyNotifyToken;	// 68 = 0x44
	NSString *_displayValuesNotifyName;	// 72 = 0x48
	int _displayValuesNotifyToken;	// 76 = 0x4c
	NSString *_syncGenerationNotifyName;	// 80 = 0x50
	int _syncGenerationNotifyToken;	// 84 = 0x54
	BOOL _requiresProcessAssertion;	// 88 = 0x58
	int _backupDisabledCount;	// 92 = 0x5c
	BOOL _backupNeeded;	// 96 = 0x60
	BOOL _hasEverConnectedToDatabase;	// 97 = 0x61
	id _mcSettingsObserver;	// 100 = 0x64
	id _loggingObserver;	// 104 = 0x68
	NSObject<OS_dispatch_queue> *_nondurableConcurrentQueue;	// 108 = 0x6c
	ML3NondurableWriteSet *_nondurableWriteSet;	// 112 = 0x70
	NSString *_artworkDirectory;	// 116 = 0x74
	BOOL _artworkDirectoryFilesystemRepresentation[1024];	// 120 = 0x78
	BOOL _hasEverConnectedTo;	// 1144 = 0x478
	BOOL _keepPresignedValidyAfterVerification;	// 1145 = 0x479
}
@property(readonly, assign) long long autoFilledTracksTotalSize;	// G=0x30ae43dd; 
@property(readonly, assign) long long currentContentRevision;	// G=0x30ae30ad; 
@property(readonly, assign) long long currentRevision;	// G=0x30ae3091; 
@property(readonly, assign) ML3DatabaseMetadata *databaseInfo;	// G=0x30acb779; 
@property(readonly, assign, nonatomic) BOOL hasEverConnectedToDatabase;	// G=0x30ac6ba9; @synthesize=_hasEverConnectedTo
@property(assign, nonatomic) BOOL keepPresignedValidyAfterVerification;	// G=0x30ae8629; S=0x30ae8639; @synthesize=_keepPresignedValidyAfterVerification
@property(readonly, assign) NSArray *localizedSectionIndexTitles;	// G=0x30ac4fe5; 
@property(readonly, assign) BOOL mediaRestrictionEnabled;	// G=0x30ac4a55; 
@property(readonly, assign, nonatomic, getter=isNondurableWritingActive) BOOL nondurableWritingActive;	// G=0x30ac9699; 
@property(readonly, assign) NSString *path;	// G=0x30abd755; @synthesize=_path
@property(readonly, assign) long long persistentID;	// G=0x30ae3075; 
@property(readonly, assign) NSArray *preferredAudioTracks;	// G=0x30acb6f1; 
@property(readonly, assign) NSArray *preferredSubtitleTracks;	// G=0x30acb8b5; 
@property(readonly, assign) ML3Container *purchasedTracksPlaylist;	// G=0x30ae0cfd; 
@property(readonly, assign) BOOL requiresPostProcessing;	// G=0x30abd769; 
@property(assign) long long syncGenerationID;	// G=0x30ac675d; S=0x30ae30c9; 
@property(readonly, retain) ML3UbiquitousDatabase *ubiquitousDatabase;	// G=0x30abf489; converted property
@property(readonly, assign, nonatomic) BOOL writable;	// G=0x30abc4e1; 
+ (BOOL)_inTransactionUpdateSortMapOnConnection:(id)transactionUpdateSortMapOnConnection;	// 0x30b12f39
+ (id)_newDatabaseConnectionForPath:(id)path enableWrites:(BOOL)writes forLibrary:(id)library;	// 0x30addb45
+ (id)_purgeableTrackPredicateWithUrgency:(int)urgency;	// 0x30ae3ca9
+ (void)_stepStatement:(sqlite3_stmt *)statement hasRow:(BOOL *)row didFinish:(BOOL *)finish;	// 0x30abf28d
+ (id)allArtworkFormatSizes;	// 0x30ae4935
+ (id)allSchemaSQL;	// 0x30b0e5bd
+ (MLArtworkFormatSpec)artworkFormatSpecForArtworkFormatID:(unsigned)artworkFormatID;	// 0x30ac80c1
+ (void)beginDatabaseMigrationIfNecessary;	// 0x30b04e29
+ (BOOL)buildDatabaseTablesUsingConnection:(id)connection;	// 0x30b0ea31
+ (void)connection:(id)connection didOpenDBHandle:(sqlite3 *)handle;	// 0x30addb0d
+ (void)connection:(id)connection willCloseDBHandle:(sqlite3 *)handle;	// 0x30addb41
+ (id)controlDirectoryPathWithBasePath:(id)basePath;	// 0x30b298a5
+ (BOOL)createIndexesUsingConnection:(id)connection;	// 0x30b10bf5
+ (int)currentUserVersion;	// 0x30abf3e1
+ (BOOL)dropIndexesUsingConnection:(id)connection;	// 0x30b10bd5
+ (BOOL)dropIndexesUsingConnection:(id)connection tableNames:(const char *)names;	// 0x30b1097d
+ (void)enumerateSortMapTablesUsingBlock:(id)block;	// 0x30ae2aad
+ (BOOL)executeSQL:(id)sql usingHandle:(sqlite3 *)handle;	// 0x30ac4f2d
+ (BOOL)importationEnabled;	// 0x30adcd19
+ (id)indexSchemaSQL;	// 0x30b0e8f5
+ (void)initialize;	// 0x30abb905
+ (id)itemIndexSchemaSQL;	// 0x30b0e86d
+ (id)itemSchemaSQL;	// 0x30b0e5a5
+ (id)localizedSectionHeaderForSectionHeader:(id)sectionHeader;	// 0x30ac664d
+ (id)localizedSectionIndexTitleForSectionHeader:(id)sectionHeader;	// 0x30ac6205
+ (id)mainDatabasePath;	// 0x30abc4b9
+ (id)mediaFolderPath;	// 0x30b297ad
+ (id)mediaFolderRelativePath:(id)path;	// 0x30b297d5
+ (BOOL)migrateToCurrentUserVersionUsingConnection:(id)currentUserVersionUsingConnection;	// 0x30b0ef91
+ (id)newDatabaseConnectionForPath:(id)path enableWrites:(BOOL)writes;	// 0x30addae9
+ (unsigned)numberOfArtworkStyles;	// 0x30ae4ec9
+ (BOOL)orderingLanguageMatchesSystemUsingConnection:(id)connection;	// 0x30b0eeed
+ (id)pathForResourceFileOrFolder:(int)resourceFileOrFolder;	// 0x30b29f81
+ (id)pathForResourceFileOrFolder:(int)resourceFileOrFolder basePath:(id)path relativeToBase:(BOOL)base createParentFolderIfNecessary:(BOOL)necessary;	// 0x30b29fa5
+ (id)pathForResourceFileOrFolder:(int)resourceFileOrFolder basePath:(id)path relativeToBase:(BOOL)base isFolder:(BOOL *)folder;	// 0x30b298c1
+ (unsigned)readableArtworkFormatIDForArtworkFormatID:(unsigned)artworkFormatID;	// 0x30ae4b55
+ (id)sectionIndexTitleForSectionHeader:(id)sectionHeader;	// 0x30ac5e45
+ (id)sectionIndexTitles;	// 0x30ac5ddd
+ (void)setImportationEnabled:(BOOL)enabled;	// 0x30abbc25
+ (id)sharedLibrary;	// 0x30abbd79
+ (id)sortMapSchemaSQL;	// 0x30b0e58d
+ (BOOL)statementDidFinishAfterStepping:(sqlite3_stmt *)statement;	// 0x30acac71
+ (BOOL)statementHasRowAfterStepping:(sqlite3_stmt *)stepping;	// 0x30abf261
+ (id)storeLinkSchemaSQL;	// 0x30b0e575
+ (id)systemCurrentLanguage;	// 0x30abf3ed
+ (BOOL)updateSortMapOnConnection:(id)connection;	// 0x30b13949
+ (BOOL)updateTrackIntegrityOnConnection:(id)connection;	// 0x30add6e9
+ (BOOL)userVersionMatchesSystemUsingConnection:(id)connection;	// 0x30b0ee8d
+ (int)userVersionUsingConnection:(id)connection;	// 0x30b0ee45
- (id)initWithPath:(id)path enableWrites:(BOOL)writes;	// 0x30abbdad
- (void).cxx_destruct;	// 0x30ae8649
- (void)_accessAccountCacheDBForSQL:(id)sql usingBlock:(id)block;	// 0x30ae78dd
- (void)_accessDatabaseContextUsingBlock:(id)block;	// 0x30abe6a9
- (id)_albumArtistGroupingNameFromDataSource:(id)dataSource;	// 0x30b1d77d
- (long long)_albumArtistPIDFromDataSource:(id)dataSource sortableNames:(id)names existingAlbumArtistPIDsForGroupingKeys:(id)groupingKeys insertIntoAlbumArtistStatement:(id)statement;	// 0x30b1dadd
- (id)_albumGroupingIdentifierFromDataSource:(id)dataSource albumArtistPersistentID:(long long)anId groupingKeysForGroupingNames:(id)groupingNames;	// 0x30b1e001
- (long long)_albumPIDFromDataSource:(id)dataSource sortableNames:(id)names albumArtistPID:(long long)pid existingAlbumStatesForGroupingIdentifiers:(id)groupingIdentifiers insertIntoAlbumStatement:(id)statement groupingKeysForGroupingNames:(id)groupingNames;	// 0x30b1e42d
- (id)_artistGroupingNameFromDataSource:(id)dataSource;	// 0x30b1ce3d
- (long long)_artistPIDFromDataSource:(id)dataSource sortableNames:(id)names existingArtistPIDsForGroupingKeys:(id)groupingKeys insertIntoItemArtistStatement:(id)statement;	// 0x30b1d12d
- (long long)_baseLocationPIDFromDataSource:(id)dataSource;	// 0x30b1fa15
- (BOOL)_commitNondurableWrites;	// 0x30aca3a5
- (id)_composerGroupingNameFromDataSource:(id)dataSource;	// 0x30b1f205
- (long long)_composerPIDFromDataSource:(id)dataSource sortableNames:(id)names existingComposerPIDsForGroupingKeys:(id)groupingKeys insertIntoComposerStatement:(id)statement;	// 0x30b1f3e5
- (void)_delayableNotifyPost:(id)post localNotificationName:(id)name;	// 0x30ae275d
- (BOOL)_drawAndWriteImage:(CGImageRef)image outputWidth:(unsigned long)width outputHeight:(unsigned long)height colorSpace:(CGColorSpaceRef)space cacheID:(id)anId formatID:(unsigned)anId6 artworkStyle:(XXStruct_$eUQoB *)style resultingImageSubRect:(CGRect *)rect resultingLength:(unsigned *)length;	// 0x30adf0c1
- (void)_enumerateDatabaseContextsUsingBlock:(id)block;	// 0x30adc8d5
- (void)_enumeratePurgeableTracksForUrgency:(int)urgency respectSongMattress:(BOOL)mattress usingBlock:(id)block;	// 0x30ae3e51
- (id)_existingAlbumStatesForGroupingIdentifiers:(id)groupingIdentifiers;	// 0x30b22bcd
- (id)_existingCollectionPIDsForTable:(id)table groupingNames:(id)names groupingKeysForGroupingNames:(id)groupingNames;	// 0x30b223c5
- (id)_genreGroupingNameFromDataSource:(id)dataSource;	// 0x30b1eca5
- (long long)_genrePIDFromDataSource:(id)dataSource sortableNames:(id)names existingGenrePIDsForGroupingKeys:(id)groupingKeys insertIntoGenreStatement:(id)statement;	// 0x30b1ee6d
- (id)_insertIntoAlbumArtistStatement;	// 0x30b1d909
- (id)_insertIntoAlbumStatement;	// 0x30b1e1e5
- (id)_insertIntoChapterUsingVtabSQL;	// 0x30b21e39
- (id)_insertIntoComposerStatement;	// 0x30b1f225
- (id)_insertIntoGenreStatement;	// 0x30b1ecc5
- (id)_insertIntoItemArtistStatement;	// 0x30b1cf41
- (id)_insertIntoItemExtraUsingVtabSQL;	// 0x30b20cf5
- (id)_insertIntoItemStatsUsingVtabSQL;	// 0x30b21821
- (id)_insertIntoItemUsingVtabSQL;	// 0x30b20031
- (id)_insertIntoPurgeableListUsingVtabSQL;	// 0x30b21b21
- (id)_insertStringsIntoSortMapOrFail:(id)fail;	// 0x30b114e9
- (long long)_int64ValueForFirstRowAndColumnWithSQL:(id)sql;	// 0x30adebcd
- (long long)_locationKindPIDFromDataSource:(id)dataSource;	// 0x30b1f83d
- (BOOL)_migrateArtworkFrom:(unsigned)from to:(unsigned)to;	// 0x30ae6e11
- (BOOL)_mustProcessLanguageChange;	// 0x30ae2bf9
- (void)_onBackgroundQueuePerformBlock:(id)block;	// 0x30abf37d
- (void)_populateNameOrderForPID:(unordered_map<long long, ML3NameOrder, std::tr1::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, ML3NameOrder>>, false> *)pid table:(id)table nameSQL:(id)sql;	// 0x30b21fbd
- (void)_postChangeNotificationAndScheduleFlushLocalOnly:(BOOL)only;	// 0x30acb491
- (void)_postDisplayValuesChangeNotificationLocalOnly:(BOOL)only;	// 0x30ae2a79
- (void)_postInvisiblePropertyChangeNotificationAndScheduleFlushLocalOnly:(BOOL)only;	// 0x30ae2a45
- (void)_postLibraryNotification:(id)notification isSourceExternal:(BOOL)external userInfo:(id)info;	// 0x30add1e5
- (void)_postNonContentsChangeNotificationAndScheduleFlushLocalOnly:(BOOL)only;	// 0x30acc771
- (id)_replaceIntoPurgeableListUsingVtabSQL;	// 0x30b21cbd
- (BOOL)_runStatementWithSQL:(id)sql bindingValue:(id)value :(id)arg3;	// 0x30adeed9
- (void)_scheduleCommitNondurableWritesAfterTimeInterval:(double)interval;	// 0x30ae7f79
- (BOOL)_writeCGImage:(CGImageRef)image length:(unsigned long)length forCacheID:(id)cacheID formatID:(unsigned)anId imageSubRect:(CGRect)rect;	// 0x30adf4c9
- (BOOL)_writeImageBytes:(const void *)bytes length:(unsigned long)length formatID:(unsigned)anId cacheID:(id)anId4;	// 0x30adf75d
- (void)accessConnectionUsingBlock:(id)block;	// 0x30ade495
- (void)accessDatabaseUsingBlock:(id)block;	// 0x30abf319
- (void)accessSortKeyBuilder:(id)builder;	// 0x30ac577d
- (long long)addStringToSortMap:(id)sortMap;	// 0x30ae2c95
- (id)albumArtistForEffectiveAlbumArtistName:(id)effectiveAlbumArtistName;	// 0x30b041a1
- (id)albumForAlbumArtistPersistentID:(long long)albumArtistPersistentID albumName:(id)name feedURL:(id)url seasonNumber:(id)number compilation:(BOOL)compilation;	// 0x30af21b9
- (id)appleIDForDSID:(unsigned long long)dsid;	// 0x30ae7bdd
- (id)artistForArtistName:(id)artistName seriesName:(id)name;	// 0x30af122d
- (id)artistGroupingKeyForArtistName:(id)artistName seriesName:(id)name;	// 0x30af11bd
- (id)artworkDataForCacheID:(id)cacheID formatID:(unsigned)anId;	// 0x30ae4885
// declared property getter: - (long long)autoFilledTracksTotalSize;	// 0x30ae43dd
- (long long)autoFilledTracksTotalSizeWithUrgency:(int)urgency;	// 0x30ae43f1
- (long long)autoFilledTracksTotalSizeWithUrgency:(int)urgency respectSongMattress:(BOOL)mattress;	// 0x30ae4405
- (BOOL)buildDatabaseTables;	// 0x30b0ecf5
- (BOOL)coerceValidDatabase;	// 0x30b11041
- (BOOL)compactArtwork;	// 0x30ae6331
- (id)composerForComposerName:(id)composerName;	// 0x30b034b1
- (BOOL)createIndexes;	// 0x30b10e49
// declared property getter: - (long long)currentContentRevision;	// 0x30ae30ad
// declared property getter: - (long long)currentRevision;	// 0x30ae3091
// declared property getter: - (id)databaseInfo;	// 0x30acb779
- (void)dealloc;	// 0x30add89d
- (BOOL)deleteAllArtwork;	// 0x30ae594d
- (BOOL)deleteAndRecreateDatabaseUsingConnection:(id)connection;	// 0x30b10fbd
- (BOOL)deleteArtworkForCacheID:(id)cacheID;	// 0x30ae5b6d
- (BOOL)deleteArtworkForCacheID:(id)cacheID formatID:(unsigned)anId;	// 0x30ae5ff9
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)leastTotalSize;	// 0x30ae4561
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)leastTotalSize urgency:(int)urgency;	// 0x30ae4585
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)leastTotalSize urgency:(int)urgency respectSongMattress:(BOOL)mattress;	// 0x30ae45a9
- (BOOL)deleteDatabase;	// 0x30adea85
- (void)deletePresignedValidity;	// 0x30add305
- (BOOL)dropItemIndexes;	// 0x30b10ced
- (void)enumeratePersistentIDsAfterRevision:(long long)revision revisionTrackingCode:(unsigned)code usingBlock:(id)block;	// 0x30ae313d
- (void)enumeratePersistentIDsAfterRevision:(long long)revision usingBlock:(id)block;	// 0x30ae3671
- (BOOL)executeSQL:(id)sql;	// 0x30ade369
- (id)genreForGenre:(id)genre;	// 0x30af709d
- (void)getChangedPersistentIDsAfterRevision:(long long)revision revisionTrackingCode:(int)code usingBlock:(id)block;	// 0x30ae38a1
- (id)groupingKeyForString:(id)string;	// 0x30ade579
- (id)groupingKeysForStrings:(id)strings;	// 0x30ade78d
- (BOOL)handlePrepareDatabase;	// 0x30b047e5
- (BOOL)hasArtworkForCacheID:(id)cacheID;	// 0x30ae4b99
- (BOOL)hasArtworkForCacheID:(id)cacheID ensureArtworkFileExists:(BOOL)exists;	// 0x30ae4bb1
// declared property getter: - (BOOL)hasEverConnectedToDatabase;	// 0x30ac6ba9
- (BOOL)hasPresignedValidity;	// 0x30add361
- (BOOL)importTracksFromDataSource:(id)dataSource;	// 0x30b256d5
- (BOOL)importTracksFromDataSource:(id)dataSource progressHandler:(id)handler;	// 0x30b256f9
- (BOOL)insertArtworkWithImageData:(id)imageData forCacheID:(id)cacheID;	// 0x30ae57c5
- (long long)insertStringIntoSortMapNoTransaction:(id)transaction;	// 0x30aca779
- (id)insertStringsIntoSortMap:(id)map;	// 0x30b12891
// declared property getter: - (BOOL)isNondurableWritingActive;	// 0x30ac9699
- (BOOL)isReadable;	// 0x30ae2c91
// declared property getter: - (BOOL)keepPresignedValidyAfterVerification;	// 0x30ae8629
- (void)loadArtworkForCacheID:(id)cacheID formatID:(unsigned)anId completionHandler:(id)handler;	// 0x30acb641
- (id)localizedSectionHeaderForSectionIndex:(unsigned)sectionIndex;	// 0x30ac55dd
// declared property getter: - (id)localizedSectionIndexTitles;	// 0x30ac4fe5
- (id)locationKindForKind:(id)kind;	// 0x30b15ad1
// declared property getter: - (BOOL)mediaRestrictionEnabled;	// 0x30ac4a55
- (void)migrateAlbumGridBGRA1xToJPEG1x;	// 0x30ae75e1
- (void)migrateAlbumListJPEGToBGRA;	// 0x30ae7719
- (BOOL)migrateLegacyArtworkFromArtworkBlobFilePath:(id)artworkBlobFilePath;	// 0x30ae6901
- (void)migratePresignedValidity;	// 0x30add685
- (XXStruct_Cy4r_A)nameOrderForString:(id)string;	// 0x30ac9521
- (id)newDatabaseConnection;	// 0x30add975
- (id)nondurableWriteSetForReading;	// 0x30abf119
- (id)nondurableWriteSetForWriting;	// 0x30ac9b95
- (void)notifyContentsDidChange;	// 0x30acb435
- (void)notifyDisplayValuesPropertyDidChange;	// 0x30ae0c3d
- (void)notifyInvisiblePropertyDidChange;	// 0x30ae0b7d
- (void)notifyNonContentsPropertyDidChange;	// 0x30acc715
// declared property getter: - (id)path;	// 0x30abd755
- (void)performTransactionAllowingWrites:(BOOL)writes withBlock:(id)block;	// 0x30ac4c49
- (void)performTransactionKind:(int)kind waitIfBusy:(BOOL)busy withBlock:(id)block;	// 0x30ac4c75
- (void)performTransactionKind:(int)kind withBlock:(id)block;	// 0x30adfef5
- (void)performTransactionWithBlock:(id)block;	// 0x30acb029
// declared property getter: - (long long)persistentID;	// 0x30ae3075
- (BOOL)persistentID:(long long)anId changedAfterRevision:(long long)revision revisionTrackingCode:(int)code;	// 0x30ae36fd
- (BOOL)populateArtworkCacheWithArtworkData:(id)artworkData trackValues:(id)values;	// 0x30b0b039
- (BOOL)populateStaticItemsOfDynamicContainers;	// 0x30ade381
// declared property getter: - (id)preferredAudioTracks;	// 0x30acb6f1
// declared property getter: - (id)preferredSubtitleTracks;	// 0x30acb8b5
- (void)prepareStatementForSQL:(id)sql cache:(BOOL)cache usingBlock:(id)block;	// 0x30abe631
- (void)prepareStatementForSQL:(id)sql usingBlock:(id)block;	// 0x30abe60d
// declared property getter: - (id)purchasedTracksPlaylist;	// 0x30ae0cfd
- (void)reconnectToDatabase;	// 0x30ade3ad
- (void)removeOrphanedTracks;	// 0x30ae80e5
// declared property getter: - (BOOL)requiresPostProcessing;	// 0x30abd769
- (BOOL)resetAllContents;	// 0x30b139e1
- (void)resetUbiquitousMetadata;	// 0x30add729
- (BOOL)runStatementWithSQL:(id)sql bindingValue:(id)value;	// 0x30aded1d
- (void)savePlaylists;	// 0x30ae1ca1
- (void)savePlaylistsSinceRevision:(long long)revision withGrappaID:(unsigned)grappaID;	// 0x30ae1cc5
- (void)saveTrackMetadata;	// 0x30ae1261
- (void)saveTrackMetadataSinceRevision:(long long)revision withGrappaID:(unsigned)grappaID;	// 0x30ae1285
- (unsigned)sectionIndexTitleIndexForSectionIndex:(unsigned)sectionIndex;	// 0x30ac5859
- (BOOL)setAppleID:(id)anId forDSID:(unsigned long long)dsid;	// 0x30ae7a25
// declared property setter: - (void)setKeepPresignedValidyAfterVerification:(BOOL)verification;	// 0x30ae8639
// declared property setter: - (void)setSyncGenerationID:(long long)anId;	// 0x30ae30c9
- (BOOL)setValue:(id)value forDatabaseProperty:(id)databaseProperty;	// 0x30ae7e41
- (id)statementWithSQL:(id)sql;	// 0x30adf875
- (void)statementWithSQL:(id)sql cache:(BOOL)cache usingBlock:(id)block;	// 0x30adfbe1
- (void)statementWithSQL:(id)sql usingBlock:(id)block;	// 0x30adfb75
- (void)statementWithSQLPrefix:(id)sqlprefix inPersistentIDs:(const long long *)persistentIDs count:(unsigned)count usingBlock:(id)block;	// 0x30adbfb9
// declared property getter: - (long long)syncGenerationID;	// 0x30ac675d
// converted property getter: - (id)ubiquitousDatabase;	// 0x30abf489
- (BOOL)updateActivePlaylistNamesForCurrentLanguage;	// 0x30b05009
- (void)updateOrderingLanguagesForCurrentLanguage;	// 0x30b051b5
- (BOOL)updateSortMap;	// 0x30ae2e91
- (void)updateTrackIntegrity;	// 0x30add70d
- (id)valueForDatabaseProperty:(id)databaseProperty;	// 0x30ac67a9
- (BOOL)verifyPresignedValidity;	// 0x30add3d5
// declared property getter: - (BOOL)writable;	// 0x30abc4e1
- (BOOL)writeToDatabaseArtworkForCacheID:(id)cacheID length:(unsigned long)length formatID:(unsigned)anId imageSubRect:(CGRect)rect;	// 0x30ae54a5
- (BOOL)writeToDiskArtworkWithImageData:(id)imageData forCacheID:(id)cacheID resultingLengths:(unsigned **)lengths formatIDs:(unsigned **)ids imageSubRects:(CGRect **)rects count:(unsigned *)count;	// 0x30ae4ecd
@end

