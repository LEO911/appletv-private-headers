/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

#import "ML3Entity.h"
#import "MusicLibrary-Structs.h"

@class NSArray, NSString, ML3Predicate;

@interface ML3Container : ML3Entity {
}
@property(readonly, assign) NSArray *cloudDisplayOrderingTerms;	// G=0x30afa025; 
@property(readonly, assign) NSArray *displayOrderingTerms;	// G=0x30afa0a1; 
@property(readonly, assign) ML3Predicate *dynamicPredicate;	// G=0x30af9cc5; 
@property(readonly, assign, getter=isLimitOrderingDescending) BOOL limitOrderingDescending;	// G=0x30af9d6d; 
@property(readonly, assign) NSArray *limitOrderingTerms;	// G=0x30af9ee1; 
@property(readonly, assign) long long limitValue;	// G=0x30af9f5d; 
@property(readonly, assign, getter=isLimitedByCount) BOOL limitedByCount;	// G=0x30af9d21; 
@property(readonly, assign) NSString *limitingProperty;	// G=0x30af9e59; 
@property(readonly, assign) ML3Predicate *staticPredicate;	// G=0x30af9c69; 
+ (void)_insertNewSmartPlaylist:(id)playlist criteriaBlob:(id)blob limited:(BOOL)limited trackOrder:(unsigned long)order distinguishedKind:(int)kind inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x30af8ab1
+ (id)autoCreatedBuiltInSmartPlaylistsPIDs:(id)smartPlaylistsPIDs;	// 0x30af9659
+ (BOOL)createMissingBuiltInSmartPlaylists:(id)smartPlaylists;	// 0x30af8eb1
+ (id)databaseTable;	// 0x30abddc1
+ (id)defaultOrderingProperties;	// 0x30ac7975
+ (void)deleteAutoCreatedBuiltInSmartPlaylistsPIDs:(id)smartPlaylistsPIDs inLibrary:(id)library;	// 0x30af99a1
+ (id)extraTablesToDelete;	// 0x30af7e3d
+ (id)foreignColumnForProperty:(id)property;	// 0x30af7e21
+ (id)foreignDatabaseTableForProperty:(id)property;	// 0x30af7e05
+ (BOOL)hasCriterionInCriteriaList:(SearchCriteriaList *)criteriaList forITDBTrackField:(int)itdbtrackField;	// 0x30af8721
+ (void)initialize;	// 0x30abca41
+ (id)joinClausesForProperty:(id)property;	// 0x30af7d61
+ (id)nextFilepathForPlaylistType:(int)playlistType withPersistentID:(unsigned long long)persistentID inLibrary:(id)library;	// 0x30ac9351
+ (id)persistentIDColumnForTable:(id)table;	// 0x30acb409
+ (void)populateDynamicContainersInLibrary:(id)library;	// 0x30afad95
+ (void)populateDynamicContainersInLibrary:(id)library createBuiltinSmartPlaylists:(BOOL)playlists;	// 0x30afadb9
+ (void)populateDynamicContainersWithTrackPersistentID:(id)trackPersistentID inLibrary:(id)library;	// 0x30afaddd
+ (void)populateDynamicContainersWithTrackPersistentID:(id)trackPersistentID inLibrary:(id)library createBuiltinSmartPlaylists:(BOOL)playlists;	// 0x30afae01
+ (void)populateSortOrdersOfPropertyValues:(id)propertyValues inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x30ac9499
+ (void)populateStaticItemsOfDynamicContainersInLibrary:(id)library;	// 0x30afa4f9
+ (id)predicateForCriteriaList:(SearchCriteriaList *)criteriaList dynamicCriteria:(BOOL)criteria;	// 0x30af87d1
+ (int)revisionTrackingCode;	// 0x30acb429
+ (id)sectionPropertyForProperty:(id)property;	// 0x30af7de9
+ (BOOL)smartCriteriaCanBeEvaluated:(id)evaluated;	// 0x30af7e4d
- (id)initWithDictionary:(id)dictionary inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x30ac8c7d
- (void)_accessCurrentSwappedPersisentIDsUsingBlock:(id)block;	// 0x30afb8b5
- (BOOL)_setSwappedItemPersistentIDs:(const long long *)ids size:(int)size;	// 0x30afb86d
- (BOOL)_setSwappedItemPersistentIDs:(const long long *)ids size:(int)size notify:(BOOL)notify;	// 0x30afb581
- (BOOL)addTrackWithPersistentID:(long long)persistentID;	// 0x30afc5f9
- (BOOL)addTracksWithPersistentIDs:(long long *)persistentIDs count:(unsigned)count;	// 0x30afc625
- (BOOL)addTracksWithPersistentIDs:(long long *)persistentIDs count:(unsigned)count notify:(BOOL)notify;	// 0x30afc649
- (void)bindPopulateStatement:(id)statement withStaticTrackPersistentID:(id)staticTrackPersistentID;	// 0x30afa46d
// declared property getter: - (id)cloudDisplayOrderingTerms;	// 0x30afa025
- (void)didChangeValueForProperties:(const id *)properties count:(unsigned)count;	// 0x30af8599
// declared property getter: - (id)displayOrderingTerms;	// 0x30afa0a1
// declared property getter: - (id)dynamicPredicate;	// 0x30af9cc5
- (SearchCriteriaList *)importedCriteriaList;	// 0x30af9bd5
- (BOOL)isCustomContainerOrderingDescending;	// 0x30af9e0d
// declared property getter: - (BOOL)isLimitOrderingDescending;	// 0x30af9d6d
// declared property getter: - (BOOL)isLimitedByCount;	// 0x30af9d21
// declared property getter: - (id)limitOrderingTerms;	// 0x30af9ee1
// declared property getter: - (long long)limitValue;	// 0x30af9f5d
// declared property getter: - (id)limitingProperty;	// 0x30af9e59
- (BOOL)moveTrackFromIndex:(unsigned)index toIndex:(unsigned)index2;	// 0x30afca15
- (id)populateSQLWithStaticTrackPersistentID:(id)staticTrackPersistentID;	// 0x30afa275
- (BOOL)removeAllTracks;	// 0x30afb891
- (BOOL)removeTracksAtIndexes:(id)indexes;	// 0x30afc46d
- (BOOL)removeTracksAtIndexes:(id)indexes notify:(BOOL)notify;	// 0x30afc449
- (BOOL)removeTracksAtIndexes:(id)indexes notify:(BOOL)notify indexesTransformBlock:(id)block;	// 0x30afbc25
- (BOOL)removeTracksWithPersistentIDs:(const long long *)persistentIDs atFilteredIndexes:(id)filteredIndexes;	// 0x30afc48d
- (BOOL)setContainsTrack:(BOOL)track forPersistentID:(long long)persistentID notify:(BOOL)notify;	// 0x30afc149
- (BOOL)setTracksWithPersistentIDs:(const long long *)persistentIDs count:(unsigned)count;	// 0x30afce55
- (BOOL)setTracksWithPersistentIDs:(const long long *)persistentIDs count:(unsigned)count notify:(BOOL)notify;	// 0x30afce79
- (BOOL)setTracksWithSwappedPersistentIDData:(id)swappedPersistentIDData;	// 0x30afd1f1
- (BOOL)setValue:(id)value forProperty:(id)property;	// 0x30af80b9
// declared property getter: - (id)staticPredicate;	// 0x30af9c69
@end

