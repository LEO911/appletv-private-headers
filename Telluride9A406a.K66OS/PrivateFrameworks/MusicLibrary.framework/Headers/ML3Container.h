/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

#import "ML3Entity.h"
#import "MusicLibrary-Structs.h"

@class NSString, NSArray, ML3Predicate;

@interface ML3Container : ML3Entity {
}
@property(readonly, assign) ML3Predicate *dynamicPredicate;	// G=0x364df451; 
@property(readonly, assign, getter=isLimitOrderingDescending) BOOL limitOrderingDescending;	// G=0x364df551; 
@property(readonly, assign) NSArray *limitOrderingDirectionality;	// G=0x364df659; 
@property(readonly, assign) NSArray *limitOrderingProperties;	// G=0x364df609; 
@property(readonly, assign) long long limitValue;	// G=0x364df6ad; 
@property(readonly, assign, getter=isLimitedByCount) BOOL limitedByCount;	// G=0x364df4a5; 
@property(readonly, assign) NSString *limitingProperty;	// G=0x364df5a9; 
@property(readonly, assign) ML3Predicate *staticPredicate;	// G=0x364df3fd; 
+ (void)_insertNewSmartPlaylist:(id)playlist criteriaBlob:(id)blob limited:(BOOL)limited trackOrder:(unsigned long)order distinguishedKind:(int)kind inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x364de565
+ (id)autoCreatedBuiltInSmartPlaylistsPIDs:(id)smartPlaylistsPIDs;	// 0x364def05
+ (BOOL)createMissingBuiltInSmartPlaylists:(id)smartPlaylists;	// 0x364de885
+ (id)databaseTable;	// 0x364b0fed
+ (id)defaultOrderingProperties;	// 0x364b9b81
+ (void)deleteAutoCreatedBuiltInSmartPlaylistsPIDs:(id)smartPlaylistsPIDs inLibrary:(id)library;	// 0x364df1a9
+ (id)extraTablesToDelete;	// 0x364ddc2d
+ (id)foreignColumnForProperty:(id)property;	// 0x364ddc11
+ (id)foreignDatabaseTableForProperty:(id)property;	// 0x364ddbf5
+ (BOOL)hasCriterionInCriteriaList:(OpaqueSearchCriteriaList *)criteriaList forITDBTrackField:(int)itdbtrackField;	// 0x364de269
+ (void)initialize;	// 0x364afeb5
+ (id)joinClauseForProperty:(id)property;	// 0x364b0efd
+ (id)nextFilepathForPlaylistType:(int)playlistType withPersistentID:(unsigned long long)persistentID inLibrary:(id)library;	// 0x364bbb81
+ (id)persistentIDColumnForTable:(id)table;	// 0x364bdd91
+ (void)populateDynamicContainersInLibrary:(id)library;	// 0x364dffc1
+ (void)populateDynamicContainersWithTrackPersistentID:(id)trackPersistentID inLibrary:(id)library;	// 0x364dffd5
+ (void)populateSortOrdersOfPropertyValues:(id)propertyValues inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x364bc1dd
+ (void)populateStaticItemsOfDynamicContainersOnHandle:(sqlite3 *)dynamicContainersOnHandle;	// 0x364dfaf5
+ (id)predicateForCriteriaList:(OpaqueSearchCriteriaList *)criteriaList dynamicCriteria:(BOOL)criteria;	// 0x364de315
+ (int)revisionTrackingCode;	// 0x364bddf9
+ (id)sectionPropertyForProperty:(id)property;	// 0x364ddbd9
+ (BOOL)smartCriteriaCanBeEvaluated:(id)evaluated;	// 0x364ddc3d
- (id)initWithDictionary:(id)dictionary inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x364bb641
- (void)_accessCurrentSwappedPersisentIDsUsingBlock:(id)block;	// 0x364e08ad
- (BOOL)_isDescendingForTrackOrderProperty:(id)trackOrderProperty reverseOrderProperty:(id)property;	// 0x364df4e1
- (BOOL)_setSwappedItemPersistentIDs:(const long long *)ids size:(int)size;	// 0x364e0865
- (BOOL)_setSwappedItemPersistentIDs:(const long long *)ids size:(int)size notify:(BOOL)notify;	// 0x364e05d1
- (BOOL)addTrackWithPersistentID:(long long)persistentID;	// 0x364e1309
- (BOOL)addTracksWithPersistentIDs:(long long *)persistentIDs count:(unsigned)count;	// 0x364e1335
- (BOOL)addTracksWithPersistentIDs:(long long *)persistentIDs count:(unsigned)count notify:(BOOL)notify;	// 0x364e1359
- (void)bindPopulateStatement:(sqlite3_stmt *)statement withStaticTrackPersistentID:(id)staticTrackPersistentID;	// 0x364dfa95
// declared property getter: - (id)dynamicPredicate;	// 0x364df451
- (void)getDisplayOrderingProperties:(id *)properties isDescending:(BOOL *)descending;	// 0x364df741
- (OpaqueSearchCriteriaList *)importedCriteriaList;	// 0x364df385
- (BOOL)isCustomContainerOrderingDescending;	// 0x364df57d
// declared property getter: - (BOOL)isLimitOrderingDescending;	// 0x364df551
// declared property getter: - (BOOL)isLimitedByCount;	// 0x364df4a5
// declared property getter: - (id)limitOrderingDirectionality;	// 0x364df659
// declared property getter: - (id)limitOrderingProperties;	// 0x364df609
// declared property getter: - (long long)limitValue;	// 0x364df6ad
// declared property getter: - (id)limitingProperty;	// 0x364df5a9
- (BOOL)moveTrackFromIndex:(unsigned)index toIndex:(unsigned)index2;	// 0x364e16f5
- (id)populateSQLWithStaticTrackPersistentID:(id)staticTrackPersistentID;	// 0x364df8dd
- (BOOL)removeAllTracks;	// 0x364e0889
- (BOOL)removeTracksAtIndexes:(id)indexes;	// 0x364e11a9
- (BOOL)removeTracksAtIndexes:(id)indexes notify:(BOOL)notify;	// 0x364e1185
- (BOOL)removeTracksAtIndexes:(id)indexes notify:(BOOL)notify indexesTransformBlock:(id)block;	// 0x364e0a49
- (BOOL)removeTracksWithPersistentIDs:(const long long *)persistentIDs atFilteredIndexes:(id)filteredIndexes;	// 0x364e11c9
- (BOOL)setContainsTrack:(BOOL)track forPersistentID:(long long)persistentID notify:(BOOL)notify;	// 0x364e0eb5
- (BOOL)setTracksWithPersistentIDs:(const long long *)persistentIDs count:(unsigned)count;	// 0x364e1b01
- (BOOL)setTracksWithPersistentIDs:(const long long *)persistentIDs count:(unsigned)count notify:(BOOL)notify;	// 0x364e1b25
- (BOOL)setTracksWithSwappedPersistentIDData:(id)swappedPersistentIDData;	// 0x364e1e69
- (BOOL)setValue:(id)value forProperty:(id)property;	// 0x364dde45
// declared property getter: - (id)staticPredicate;	// 0x364df3fd
@end

