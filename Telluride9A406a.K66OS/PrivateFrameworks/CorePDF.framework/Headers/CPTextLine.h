/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/CorePDF.framework/CorePDF
 */

#import "CorePDF-Structs.h"
#import "CPDisposable.h"
#import "CPTextObject.h"

@class NSArray, CPCharSequence;

@interface CPTextLine : CPTextObject <CPDisposable> {
	CPCharSequence *charSequence;	// 76 = 0x4c
	XXStruct_NaTu4D *wordArray;	// 80 = 0x50
	unsigned wordCount;	// 84 = 0x54
	CPInlineContainer *inlineList;	// 88 = 0x58
	int lineNumber;	// 92 = 0x5c
	int columnNumber;	// 96 = 0x60
	float baseline;	// 100 = 0x64
	BOOL baseLineIsNull;	// 104 = 0x68
	BOOL hasBeenSplit;	// 105 = 0x69
	BOOL hasBeenProcessed;	// 106 = 0x6a
	BOOL maySplit;	// 107 = 0x6b
	BOOL hasTabs;	// 108 = 0x6c
	NSArray *columnBreaks;	// 112 = 0x70
	NSArray *xsegments;	// 116 = 0x74
	float minimumOffset;	// 120 = 0x78
	int levels;	// 124 = 0x7c
	float maximumLetterGap;	// 128 = 0x80
	float maximumWordGap;	// 132 = 0x84
	int tabsBefore;	// 136 = 0x88
	BOOL irregular;	// 140 = 0x8c
	unsigned leftSpacerIndex;	// 144 = 0x90
	unsigned rightSpacerIndex;	// 148 = 0x94
	BOOL isListItem;	// 152 = 0x98
	unsigned listSpacerIndex;	// 156 = 0x9c
	BOOL lineBreakAfter;	// 160 = 0xa0
	CPPDFStyle *uniformStyle;	// 164 = 0xa4
	unsigned short uniformStyleFlags;	// 168 = 0xa8
	float monospaceWidth;	// 172 = 0xac
	unsigned *spacesBefore;	// 176 = 0xb0
	BOOL disposed;	// 180 = 0xb4
}
@property(assign) float baseline;	// G=0x304e050d; S=0x304dfb4d; converted property
@property(retain) CPCharSequence *charSequence;	// G=0x304df839; S=0x304e1045; converted property
@property(retain) NSArray *columnBreaks;	// G=0x304dfaf5; S=0x304e08d5; converted property
@property(assign) BOOL hasBeenProcessed;	// G=0x304dfae5; S=0x304dfad5; converted property
@property(assign) BOOL hasBeenSplit;	// G=0x304dfac5; S=0x304dfab5; converted property
@property(assign) BOOL hasTabs;	// G=0x304dfb15; S=0x304dfb05; converted property
@property(readonly, assign) CPInlineContainer *inlineList;	// G=0x304df8dd; converted property
@property(assign) BOOL irregular;	// G=0x304dfc21; S=0x304dfc31; converted property
@property(assign, nonatomic) BOOL isListItem;	// G=0x304dfc8d; S=0x304dfc9d; @synthesize
@property(assign, nonatomic) unsigned leftSpacerIndex;	// G=0x304dfccd; S=0x304dfcdd; @synthesize
@property(assign) int levels;	// G=0x304dfbad; S=0x304dfbbd; converted property
@property(assign, nonatomic) BOOL lineBreakAfter;	// G=0x304dfc4d; S=0x304dfc5d; @synthesize
@property(assign, nonatomic) unsigned listSpacerIndex;	// G=0x304dfc6d; S=0x304dfc7d; @synthesize
@property(assign) float maximumLetterGap;	// G=0x304dfbe1; S=0x304dfbf1; converted property
@property(assign) float maximumWordGap;	// G=0x304dfc01; S=0x304dfc11; converted property
@property(readonly, assign) float monospaceWidth;	// G=0x304e00b1; converted property
@property(assign, nonatomic) unsigned rightSpacerIndex;	// G=0x304dfcad; S=0x304dfcbd; @synthesize
@property(assign) int tabsBefore;	// G=0x304dfb35; S=0x304dfb25; converted property
@property(readonly, assign) XXStruct_NaTu4D *wordArray;	// G=0x304df849; converted property
@property(readonly, assign) unsigned wordCount;	// G=0x304df859; converted property
- (id)init;	// 0x304dfced
- (void)accept:(id)accept;	// 0x304e08bd
- (int)align;	// 0x304e0d71
- (CGPoint)anchor;	// 0x304e05c9
- (void)anchorChunk:(id)chunk atWordIndex:(unsigned)wordIndex;	// 0x304e0e05
- (id)attributes;	// 0x304dfc41
- (int)baseLineAscending:(id)ascending;	// 0x304e0775
- (int)baseLineDescending:(id)descending;	// 0x304e0729
// converted property getter: - (float)baseline;	// 0x304e050d
- (CGRect)bounds;	// 0x304e07c1
- (CGRect)boundsOfWordAtIndex:(unsigned)index;	// 0x304e0f81
- (BOOL)changesFontAt:(id)at;	// 0x304e0ca9
// converted property getter: - (id)charSequence;	// 0x304df839
// converted property getter: - (id)columnBreaks;	// 0x304dfaf5
- (id)copyWithZone:(NSZone *)zone;	// 0x304e108d
- (void)dealloc;	// 0x304e117d
- (void)dispose;	// 0x304e122d
- (void)finalize;	// 0x304e11ed
- (XXStruct_NaTu4D *)firstWord;	// 0x304df869
- (void)fitBoundsToChildren;	// 0x304dfb45
// converted property getter: - (BOOL)hasBeenProcessed;	// 0x304dfae5
// converted property getter: - (BOOL)hasBeenSplit;	// 0x304dfac5
- (BOOL)hasDropCap;	// 0x304dfe59
- (BOOL)hasJustifiedAlignment;	// 0x304e0d3d
// converted property getter: - (BOOL)hasTabs;	// 0x304dfb15
- (BOOL)hyphenated;	// 0x304dfb49
- (unsigned)inlineCount;	// 0x304df8b9
// converted property getter: - (CPInlineContainer *)inlineList;	// 0x304df8dd
// converted property getter: - (BOOL)irregular;	// 0x304dfc21
- (BOOL)isIndivisible;	// 0x304dfb71
// declared property getter: - (BOOL)isListItem;	// 0x304dfc8d
- (BOOL)isMonospaced;	// 0x304e0221
- (XXStruct_NaTu4D *)lastWord;	// 0x304df88d
// declared property getter: - (unsigned)leftSpacerIndex;	// 0x304dfccd
// converted property getter: - (int)levels;	// 0x304dfbad
// declared property getter: - (BOOL)lineBreakAfter;	// 0x304dfc4d
// declared property getter: - (unsigned)listSpacerIndex;	// 0x304dfc6d
- (BOOL)mapToWordPairs:(/*function-pointer*/ void *)wordPairs passing:(void *)passing;	// 0x304df9cd
- (BOOL)mapToWordPairsWithIndex:(/*function-pointer*/ void *)index passing:(void *)passing;	// 0x304dfa35
- (BOOL)mapToWords:(/*function-pointer*/ void *)words passing:(void *)passing;	// 0x304df8fd
- (BOOL)mapToWordsWithIndex:(/*function-pointer*/ void *)index passing:(void *)passing;	// 0x304df965
// converted property getter: - (float)maximumLetterGap;	// 0x304dfbe1
// converted property getter: - (float)maximumWordGap;	// 0x304dfc01
- (float)medianFontSize;	// 0x304dfdc5
// converted property getter: - (float)monospaceWidth;	// 0x304e00b1
- (id)newTextLineFromWordAt:(unsigned)at lengthInWords:(unsigned)words;	// 0x304e0af1
- (BOOL)overlapsHorizontally:(CGRect)horizontally;	// 0x304e0639
- (BOOL)overlapsWith:(id)with;	// 0x304e06d9
- (id)properties;	// 0x304dfaa9
- (void)recomputeBaseline;	// 0x304e0345
- (void)recomputeLevels;	// 0x304dff91
- (BOOL)removeTextLines:(id)lines whereTrue:(/*function-pointer*/ void *)aTrue passing:(void *)passing;	// 0x304e091d
// declared property getter: - (unsigned)rightSpacerIndex;	// 0x304dfcad
// converted property setter: - (void)setBaseline:(float)baseline;	// 0x304dfb4d
- (void)setBaselineToNull;	// 0x304dfb5d
// converted property setter: - (void)setCharSequence:(id)sequence;	// 0x304e1045
// converted property setter: - (void)setColumnBreaks:(id)breaks;	// 0x304e08d5
// converted property setter: - (void)setHasBeenProcessed:(BOOL)processed;	// 0x304dfad5
// converted property setter: - (void)setHasBeenSplit:(BOOL)split;	// 0x304dfab5
// converted property setter: - (void)setHasTabs:(BOOL)tabs;	// 0x304dfb05
// converted property setter: - (void)setIrregular:(BOOL)irregular;	// 0x304dfc31
// declared property setter: - (void)setIsListItem:(BOOL)item;	// 0x304dfc9d
// declared property setter: - (void)setLeftSpacerIndex:(unsigned)index;	// 0x304dfcdd
// converted property setter: - (void)setLevels:(int)levels;	// 0x304dfbbd
// declared property setter: - (void)setLineBreakAfter:(BOOL)after;	// 0x304dfc5d
// declared property setter: - (void)setListSpacerIndex:(unsigned)index;	// 0x304dfc7d
// converted property setter: - (void)setMaximumLetterGap:(float)gap;	// 0x304dfbf1
// converted property setter: - (void)setMaximumWordGap:(float)gap;	// 0x304dfc11
// declared property setter: - (void)setRightSpacerIndex:(unsigned)index;	// 0x304dfcbd
- (void)setSpaces:(unsigned)spaces beforeWordAtIndex:(unsigned)index;	// 0x304dfff1
// converted property setter: - (void)setTabsBefore:(int)before;	// 0x304dfb25
- (unsigned)spacesBeforeWordAtIndex:(unsigned)index;	// 0x304dfb75
- (BOOL)styleIsUniform:(CPPDFStyle **)uniform styleFlags:(unsigned short)flags;	// 0x304e0249
// converted property getter: - (int)tabsBefore;	// 0x304dfb35
- (int)topIsAbove:(id)above;	// 0x304dff05
- (void)translateObjectYBy:(float)by;	// 0x304e04b9
// converted property getter: - (XXStruct_NaTu4D *)wordArray;	// 0x304df849
- (XXStruct_NaTu4D *)wordArrayOfSize:(unsigned)size;	// 0x304e0fe1
- (XXStruct_NaTu4D *)wordAtIndex:(unsigned)index;	// 0x304e0f31
// converted property getter: - (unsigned)wordCount;	// 0x304df859
- (long)zOrder;	// 0x304e0db9
@end

