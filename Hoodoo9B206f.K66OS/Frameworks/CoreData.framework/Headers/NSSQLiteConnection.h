/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/CoreData.framework/CoreData
 */

#import "CoreData-Structs.h"
#import "NSSQLConnection.h"

@class NSSQLiteStatement, NSMutableDictionary, NSSQLEntity, NSMutableSet, NSString;

__attribute__((visibility("hidden")))
@interface NSSQLiteConnection : NSSQLConnection {
@private
	sqlite3 *_db;	// 28 = 0x1c
	sqlite3_stmt *_vmstatement;	// 32 = 0x20
	int _rowsProcessedCount;	// 36 = 0x24
	unsigned _lastEntityKey;	// 40 = 0x28
	NSSQLEntity *_finalEntity;	// 44 = 0x2c
	NSSQLEntity *_lastEntity;	// 48 = 0x30
	sqlite3_stmt *_fetchPKStatement;	// 52 = 0x34
	sqlite3_stmt *_updatePKStatement;	// 56 = 0x38
	NSSQLiteStatement *_beginStatement;	// 60 = 0x3c
	NSSQLiteStatement *_commitStatement;	// 64 = 0x40
	NSSQLiteStatement *_rollbackStatement;	// 68 = 0x44
	NSMutableSet *_vmCachedStatements;	// 72 = 0x48
	NSMutableDictionary *_pragmaSettings;	// 76 = 0x4c
	CFDictionaryRef _cachedEntityUpdateStatements;	// 80 = 0x50
	double _timeOutOption;	// 84 = 0x54
	void *_extraBuffersForRegisteredFunctions[5];	// 92 = 0x5c
	NSString *_dbPathRegisteredWithBackupd;	// 112 = 0x70
	long long _vacuumTracker;	// 116 = 0x74
	sqliteConnectionFlags _sqliteConnectionFlags;	// 124 = 0x7c
	unsigned long long _debugInode;	// 128 = 0x80
}
+ (void)__INode_Changed_AllThatIsLeftToUsIsHonor__;	// 0x362f35dd
+ (const char *)_databaseOpenURLStringForURL:(id)url;	// 0x362f462d
+ (BOOL)_destroyPersistentStoreAtURL:(id)url options:(id)options error:(id *)error;	// 0x362f3825
+ (BOOL)_replacePersistentStoreAtURL:(id)url destinationOptions:(id)options withPersistentStoreFromURL:(id)url3 sourceOptions:(id)options4 error:(id *)error;	// 0x362f4085
+ (void)_setDebugFlags:(int)flags;	// 0x362f35d9
+ (void)initialize;	// 0x362587e1
+ (int)readMagicWordFromPath:(const char *)path;	// 0x362f4709
- (id)initWithAdapter:(id)adapter;	// 0x3622f7d1
- (id)_adapter;	// 0x3622fb3d
- (void)_bindVariablesWithDeletedRow:(id)deletedRow;	// 0x362f360d
- (void)_bindVariablesWithInsertedRow:(id)insertedRow;	// 0x362fb2ad
- (void)_bindVariablesWithUpdatedRow:(id)updatedRow andOriginalRow:(id)row forDeltasMask:(CFBitVectorRef)deltasMask;	// 0x362faccd
- (void **)_buffersForRegisteredFunctions;	// 0x36230921
- (void)_clearBindVariablesForInsertedRow;	// 0x362fb15d
- (void)_clearBindVariablesForUpdateStatement:(id)updateStatement forDeltasMask:(CFBitVectorRef)deltasMask;	// 0x362fa9b5
- (void)_clearCachedStatements;	// 0x36250871
- (void)_clearOtherStatements;	// 0x36250949
- (void)_clearTransactionCaches;	// 0x362506e5
- (void)_configureAutoVacuum;	// 0x362f8501
- (void)_configureIntegrityCheck;	// 0x36230959
- (void)_configurePageSize;	// 0x362f83c1
- (void)_configurePragmaOptions:(int)options;	// 0x362fbbd9
- (void)_configureSynchronousMode;	// 0x36230931
- (void)_configureUbiquityMetadataTable;	// 0x36231749
- (void)_ensureDatabaseOpen;	// 0x36231631
- (void)_ensureNoFetchInProgress;	// 0x362316e9
- (void)_ensureNoStatementPrepared;	// 0x3623168d
- (void)_ensureNoTransactionOpen;	// 0x362fd3cd
- (void)_executeSQLString:(id)string;	// 0x36230a91
- (long long)_fetchMaxPrimaryKeyForEntity:(id)entity;	// 0x362fc30d
- (void)_finalizeStatement;	// 0x3623429d
- (void)_forceDisconnectOnError;	// 0x362fbb4d
- (long long)_getCurrentAutoVacuumValue;	// 0x362f7fa1
- (BOOL)_hasTableWithName:(id)name;	// 0x362f916d
- (id)_newValueForColumn:(id)column atIndex:(unsigned)index inStatement:(sqlite3_stmt *)statement;	// 0x3623376d
- (void)_performPostSaveTasks;	// 0x362f8005
- (void)_registerExtraFunctions;	// 0x36230539
- (int)_rowsChangedByLastExecute;	// 0x362fb705
- (void)_setupVacuumIfNecessary;	// 0x362f7d89
- (sqlite3_stmt *)_vmstatement;	// 0x362f35e1
- (void)addPeerRangeForPeerID:(id)peerID entityName:(id)name rangeStart:(id)start rangeEnd:(id)end peerRangeStart:(id)start5 peerRangeEnd:(id)end6;	// 0x362f6fe1
- (id)allPeerRanges;	// 0x362f66f9
- (void)beginTransaction;	// 0x362fba49
- (void)cacheCurrentDBStatementOn:(id)on;	// 0x362f9ff9
- (void)cacheUpdateStatement:(id)statement forEntity:(id)entity andDeltasMask:(CFBitVectorRef)mask;	// 0x362fa69d
- (id)cachedUpdateStatementForEntity:(id)entity andDeltasMask:(CFBitVectorRef)mask;	// 0x362fa671
- (BOOL)canConnect;	// 0x3622faa9
- (void)commitTransaction;	// 0x362fb8b5
- (void)connect;	// 0x3622fba9
- (id)createMapOfEntityNameToPKMaxForEntities:(id)entities;	// 0x362f5295
- (id)createMapOfEntityNameToPKMaxForEntitiesFromPKTable:(id)pktable;	// 0x362f5f5d
- (id)createMapOfEntityNameToPKMaxForEntitiesFromUBRangeTable:(id)ubrangeTable;	// 0x362f57c1
- (BOOL)databaseIsEmpty;	// 0x36235d6d
- (void)dealloc;	// 0x36250aa5
- (void)deleteCorrelation:(id)correlation;	// 0x362f37a9
- (void)deleteRow:(id)row;	// 0x362fa0bd
- (id)describeResults;	// 0x362fa04d
- (void)disconnect;	// 0x3625055d
- (void)endFetch;	// 0x36234201
- (void)endPrimaryKeyGeneration;	// 0x362f9129
- (void)execute;	// 0x362323fd
- (long long)fetchMaxPrimaryKeyForEntity:(id)entity;	// 0x362fc171
- (int)fetchResultSet:(void *)set usingFetchPlan:(id)plan;	// 0x36243269
- (id)fetchTableCreationSQL;	// 0x362f92e1
- (id)fetchTableNames;	// 0x362f96a5
- (id)fetchUbiqiutyKnowledgeVector;	// 0x362f7731
- (void)finalize;	// 0x362fd429
- (long long)generatePrimaryKeysForEntity:(id)entity batch:(unsigned)batch;	// 0x362f873d
- (void)handleCorruptedDB:(id)db;	// 0x362f9f01
- (BOOL)hasMetadataTable;	// 0x362f9149
- (BOOL)hasPrimaryKeyTable;	// 0x362f8719
- (void)insertCorrelation:(id)correlation;	// 0x362f36b1
- (void)insertRow:(id)row;	// 0x362fa771
- (BOOL)isFetchInProgress;	// 0x36243941
- (BOOL)isLocalFS;	// 0x362f35f1
- (BOOL)isOpen;	// 0x3622fb25
- (id)newFetchedArray;	// 0x36233625
- (BOOL)performIntegrityCheck;	// 0x362f99dd
- (void)prepareForPrimaryKeyGeneration;	// 0x362f9139
- (void)prepareSQLStatement:(id)statement;	// 0x36231c51
- (CFArrayRef)rawIntegerRowsForSQL:(id)sql;	// 0x362fc671
- (void)releaseSQLStatement;	// 0x3623425d
- (void)resetSQLStatement;	// 0x362fa069
- (void)rollbackTransaction;	// 0x362fb725
- (void)setExclusiveLockingMode:(BOOL)mode;	// 0x362f9dfd
- (void)setUbiquityTableValue:(id)value forKey:(id)key;	// 0x362f516d
- (id)ubiquityTableKeysAndValues;	// 0x362f4c25
- (id)ubiquityTableValueForKey:(id)key;	// 0x362f4769
- (void)updateCorrelation:(id)correlation;	// 0x362f372d
- (void)updateRow:(id)row;	// 0x362fa339
- (void)updateUbiquityKnowledgeForPeerWithID:(id)anId andTransactionNumber:(id)number;	// 0x362f7121
- (void)updateUbiquityKnowledgeVector:(id)vector;	// 0x362f7385
- (void)willCreateSchema;	// 0x362f829d
@end

