/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/EventKit.framework/EventKit
 */

#import "EKCalendarItem.h"
#import "EventKit-Structs.h"

@class EKRecurrenceRule, NSString, EKParticipant, NSNumber, NSDate, EKCalendarDate;

@interface EKEvent : EKCalendarItem {
@private
	EKCalendarDate *_occurrenceStartDate;	// 4 = 0x4
	EKCalendarDate *_occurrenceEndDate;	// 8 = 0x8
	BOOL _occurrenceIsAllDay;	// 12 = 0xc
	EKCalendarDate *_originalOccurrenceStartDate;	// 16 = 0x10
	EKCalendarDate *_originalOccurrenceEndDate;	// 20 = 0x14
	NSNumber *_originalOccurrenceIsAllDay;	// 24 = 0x18
}
@property(assign, nonatomic, getter=isAllDay) BOOL allDay;	// G=0x31eeb405; S=0x31ef4e11; 
@property(assign, nonatomic) int availability;	// G=0x31f2f2e1; S=0x31f2f335; 
@property(readonly, assign, nonatomic) int birthdayPersonID;	// G=0x31f2f1b9; 
@property(copy, nonatomic) NSDate *endDate;	// G=0x31eeb641; S=0x31ef537d; 
@property(readonly, assign, nonatomic) NSString *eventIdentifier;	// G=0x31ef2c41; 
@property(readonly, assign, nonatomic) BOOL isDetached;	// G=0x31ef4c39; 
@property(assign) unsigned modifiedProperties;	// G=0x31f2ef61; S=0x31f2ef95; converted property
@property(assign) BOOL needsOccurrenceCacheUpdate;	// G=0x31f2efd9; S=0x31f2effd; converted property
@property(copy, nonatomic) EKCalendarDate *occurrenceEndDate;	// G=0x31eeac65; S=0x31eeb3e1; @synthesize=_occurrenceEndDate
@property(assign, nonatomic) BOOL occurrenceIsAllDay;	// G=0x31f31981; S=0x31eea709; @synthesize=_occurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *occurrenceStartDate;	// G=0x31eeb3d1; S=0x31eea695; @synthesize=_occurrenceStartDate
@property(readonly, assign, nonatomic) EKParticipant *organizer;	// G=0x31ef2e01; 
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate;	// G=0x31ef5c25; S=0x31ef52b1; @synthesize=_originalOccurrenceEndDate
@property(copy, nonatomic) NSNumber *originalOccurrenceIsAllDay;	// G=0x31ef5c51; S=0x31ef3d5d; @synthesize=_originalOccurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate;	// G=0x31ef5c01; S=0x31ef528d; @synthesize=_originalOccurrenceStartDate
@property(assign) int participationStatus;	// G=0x31ef3551; S=0x31f2f041; converted property
@property(assign) unsigned readState;	// G=0x31ef36b1; S=0x31f2f3d1; converted property
@property(retain, nonatomic) EKRecurrenceRule *recurrenceRule;	// G=0x31f2f231; S=0x31f2f27d; 
@property(retain) id responseComment;	// G=0x31f2f399; S=0x31f2f3b5; converted property
@property(copy, nonatomic) NSDate *startDate;	// G=0x31eeb621; S=0x31ef50d1; 
@property(readonly, assign, nonatomic) int status;	// G=0x31eecf0d; 
+ (id)eventWithEventStore:(id)eventStore;	// 0x31ef6471
- (id)init;	// 0x31f2eb11
- (id)initWithEventStore:(id)eventStore;	// 0x31ef3701
- (id)initWithPersistentObject:(id)persistentObject;	// 0x31f2eb4d
- (id)initWithPersistentObject:(id)persistentObject occurrenceDate:(id)date;	// 0x31eea1a9
- (BOOL)_cancelWithSpan:(int)span error:(id *)error;	// 0x31f30c85
- (BOOL)_checkStartDateConstraintAgainstDate:(XXStruct_lQVxyC)date timeZone:(id)zone error:(id *)error;	// 0x31ef941d
- (BOOL)_deleteWithSpan:(int)span error:(id *)error;	// 0x31eff70d
- (void)_detachWithStartDate:(id)startDate newStartDate:(id)date future:(BOOL)future;	// 0x31f30e09
- (id)_effectiveTimeZone;	// 0x31ef52d5
- (BOOL)_isAllDay;	// 0x31eea6b9
- (BOOL)_isInitialOccurrenceDate:(id)date;	// 0x31eff529
- (BOOL)_occurrenceExistsOnDate:(double)date timeZone:(id)zone;	// 0x31f30a49
- (int)_parentParticipationStatus;	// 0x31f2f179
- (id)_persistentEvent;	// 0x31eead3d
- (void)_sendModifiedNote;	// 0x31ef63dd
- (BOOL)_shouldCancelInsteadOfDeleteWithSpan:(int)span;	// 0x31eff60d
- (BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(int)recurrenceInterval;	// 0x31f2fd55
- (BOOL)_validateDatesAndRecurrencesGivenSpan:(int)span error:(id *)error;	// 0x31ef9019
- (BOOL)_validateDurationConstrainedToRecurrenceInterval;	// 0x31f2fb95
- (int)alarmCount;	// 0x31f2f209
- (BOOL)allowsAlarmModifications;	// 0x31ef9519
- (BOOL)allowsCalendarModifications;	// 0x31f2f719
- (BOOL)allowsRecurrenceModifications;	// 0x31ef4bb5
- (id)attachments;	// 0x31ef2d0d
- (int)attendeeCount;	// 0x31f2f1e1
- (id)attendees;	// 0x31ef2ea1
// declared property getter: - (int)availability;	// 0x31f2f2e1
// declared property getter: - (int)birthdayPersonID;	// 0x31f2f1b9
- (id)birthdayTitleWithAddressBook:(void *)addressBook;	// 0x31f2eda9
- (BOOL)canBeRespondedTo;	// 0x31ef32cd
- (BOOL)canDetachSingleOccurrence;	// 0x31f2f7b5
- (BOOL)canMoveToCalendar:(id)calendar fromCalendar:(id)calendar2 error:(id *)error;	// 0x31f2f4ed
- (BOOL)canSetAvailability;	// 0x31f2f875
- (void)clearReadState;	// 0x31f2f415
- (BOOL)commitWithSpan:(int)span error:(id *)error;	// 0x31ef9649
- (id)committedValueForKey:(id)key;	// 0x31ef4329
- (int)compareStartDateWithEvent:(id)event;	// 0x31eeb599
- (void)dealloc;	// 0x31ef3f01
- (id)description;	// 0x31f2f8f1
- (void)didCommit;	// 0x31efdbb9
- (id)dirtyPropertiesToSkip;	// 0x31f2fa31
- (double)duration;	// 0x31eee35d
- (id)endCalendarDate;	// 0x31eeac55
// declared property getter: - (id)endDate;	// 0x31eeb641
- (XXStruct_lQVxyC)endDateGr;	// 0x31eee2cd
- (XXStruct_lQVxyC)endDatePinnedForAllDay;	// 0x31f2eeed
// declared property getter: - (id)eventIdentifier;	// 0x31ef2c41
- (id)eventStore;	// 0x31eed16d
- (id)exportToICS;	// 0x31f2ec81
- (id)externalId;	// 0x31f2f825
- (id)externalURL;	// 0x31f2eb61
- (BOOL)hasSelfAttendee;	// 0x31f2f8c1
- (unsigned)hash;	// 0x31eeb415
- (id)initialEndDate;	// 0x31f2ee0d
- (id)initialStartDate;	// 0x31f2edb9
// declared property getter: - (BOOL)isAllDay;	// 0x31eeb405
// declared property getter: - (BOOL)isDetached;	// 0x31ef4c39
- (BOOL)isDirtyIgnoringCalendar;	// 0x31f2ed09
- (BOOL)isEndDateDirty;	// 0x31f2ece9
- (BOOL)isEqual:(id)equal;	// 0x31eeb4c1
- (BOOL)isStartDateDirty;	// 0x31f2ecc9
- (BOOL)isStatusDirty;	// 0x31f2eca9
- (BOOL)isTentative;	// 0x31f2f449
// converted property getter: - (unsigned)modifiedProperties;	// 0x31f2ef61
// converted property getter: - (BOOL)needsOccurrenceCacheUpdate;	// 0x31f2efd9
- (id)occurrenceDate;	// 0x31ef4a79
// declared property getter: - (id)occurrenceEndDate;	// 0x31eeac65
// declared property getter: - (BOOL)occurrenceIsAllDay;	// 0x31f31981
// declared property getter: - (id)occurrenceStartDate;	// 0x31eeb3d1
// declared property getter: - (id)organizer;	// 0x31ef2e01
// declared property getter: - (id)originalOccurrenceEndDate;	// 0x31ef5c25
// declared property getter: - (id)originalOccurrenceIsAllDay;	// 0x31ef5c51
// declared property getter: - (id)originalOccurrenceStartDate;	// 0x31ef5c01
// converted property getter: - (int)participationStatus;	// 0x31ef3551
- (int)pendingParticipationStatus;	// 0x31f2f7fd
// converted property getter: - (unsigned)readState;	// 0x31ef36b1
// declared property getter: - (id)recurrenceRule;	// 0x31f2f231
- (BOOL)refresh;	// 0x31ef5ce5
- (BOOL)removeWithSpan:(int)span error:(id *)error;	// 0x31eff459
- (BOOL)requiresDetach;	// 0x31ef81d5
// converted property getter: - (id)responseComment;	// 0x31f2f399
- (BOOL)responseMustApplyToAll;	// 0x31f2f78d
- (void)revert;	// 0x31f2fa8d
- (void)rollback;	// 0x31ef56b5
// declared property setter: - (void)setAllDay:(BOOL)day;	// 0x31ef4e11
// declared property setter: - (void)setAvailability:(int)availability;	// 0x31f2f335
// declared property setter: - (void)setEndDate:(id)date;	// 0x31ef537d
// converted property setter: - (void)setModifiedProperties:(unsigned)properties;	// 0x31f2ef95
// converted property setter: - (void)setNeedsOccurrenceCacheUpdate:(BOOL)update;	// 0x31f2effd
// declared property setter: - (void)setOccurrenceEndDate:(id)date;	// 0x31eeb3e1
// declared property setter: - (void)setOccurrenceIsAllDay:(BOOL)day;	// 0x31eea709
// declared property setter: - (void)setOccurrenceStartDate:(id)date;	// 0x31eea695
// declared property setter: - (void)setOriginalOccurrenceEndDate:(id)date;	// 0x31ef52b1
// declared property setter: - (void)setOriginalOccurrenceIsAllDay:(id)day;	// 0x31ef3d5d
// declared property setter: - (void)setOriginalOccurrenceStartDate:(id)date;	// 0x31ef528d
// converted property setter: - (void)setParticipationStatus:(int)status;	// 0x31f2f041
// converted property setter: - (void)setReadState:(unsigned)state;	// 0x31f2f3d1
// declared property setter: - (void)setRecurrenceRule:(id)rule;	// 0x31f2f27d
// converted property setter: - (void)setResponseComment:(id)comment;	// 0x31f2f3b5
// declared property setter: - (void)setStartDate:(id)date;	// 0x31ef50d1
- (void)setTimeZone:(id)zone;	// 0x31ef3d81
- (id)startCalendarDate;	// 0x31eeac45
// declared property getter: - (id)startDate;	// 0x31eeb621
- (XXStruct_lQVxyC)startDateGr;	// 0x31eee23d
- (XXStruct_lQVxyC)startDatePinnedForAllDay;	// 0x31f2ee85
// declared property getter: - (int)status;	// 0x31eecf0d
- (id)uniqueId;	// 0x31f2f84d
- (BOOL)validateWithSpan:(int)span error:(id *)error;	// 0x31ef8651
@end

