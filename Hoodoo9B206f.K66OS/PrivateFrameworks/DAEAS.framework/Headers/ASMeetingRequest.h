/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/DataAccess.framework/Frameworks/DAEAS.framework/DAEAS
 */

#import "ASParsingAcceptingTopLevelLeaves.h"
#import "ASEvent.h"
#import "NSCoding.h"

@class NSDate, NSNumber, ASEmailItem, NSString, NSMutableDictionary;

@interface ASMeetingRequest : ASEvent <ASParsingAcceptingTopLevelLeaves, NSCoding> {
	NSNumber *_instanceType;	// 172 = 0xac
	NSDate *_recurrenceId;	// 176 = 0xb0
	NSMutableDictionary *_placeHolder;	// 180 = 0xb4
	int _meetingClassType;	// 184 = 0xb8
	ASEmailItem *_parentEmailItem;	// 188 = 0xbc
	NSString *_cachedParentFolderId;	// 192 = 0xc0
	NSString *_cachedParentServerId;	// 196 = 0xc4
}
@property(retain) NSString *cachedParentFolderId;	// G=0x321ec2dd; S=0x321ec315; converted property
@property(retain) NSString *cachedParentServerId;	// G=0x321ec359; S=0x321ec391; converted property
@property(retain) id exceptionDate;	// G=0x321ebdb9; S=0x321ebdc9; converted property
@property(retain) NSNumber *instanceType;	// G=0x321ec1c5; S=0x321ec1fd; converted property
@property(assign) int meetingClassType;	// G=0x321ec2bd; S=0x321ec2cd; converted property
@property(retain) NSDate *recurrenceId;	// G=0x321ec241; S=0x321ec279; converted property
+ (BOOL)acceptsTopLevelLeaves;	// 0x321e9ee9
+ (BOOL)frontingBasicTypes;	// 0x321e9fe5
+ (BOOL)notifyOfUnknownTokens;	// 0x321ea039
+ (BOOL)parsingLeafNode;	// 0x321e9f3d
+ (BOOL)parsingWithSubItems;	// 0x321e9f91
- (id)init;	// 0x321eb8ad
- (id)initWithCoder:(id)coder;	// 0x321ebe45
- (BOOL)_bailIfNotNewestDataForAccount:(id)account;	// 0x321eae9d
- (void)_determineSelfnessWithLocalEvent:(void *)localEvent forAccount:(id)account;	// 0x321ea5b5
- (void)_setReminderSecsBefore:(id)before;	// 0x321eb999
- (void)applyPlaceHolder;	// 0x321ea08d
- (id)asParseRules;	// 0x321ea149
- (BOOL)cachedOrganizerIsSelfWithAccount:(id)account;	// 0x321ec189
// converted property getter: - (id)cachedParentFolderId;	// 0x321ec2dd
// converted property getter: - (id)cachedParentServerId;	// 0x321ec359
- (void)clearPlaceHolder;	// 0x321ea0ad
- (void)dealloc;	// 0x321eb8fd
- (id)description;	// 0x321eb83d
- (void)encodeWithCoder:(id)coder;	// 0x321ec011
// converted property getter: - (id)exceptionDate;	// 0x321ebdb9
// converted property getter: - (id)instanceType;	// 0x321ec1c5
// converted property getter: - (int)meetingClassType;	// 0x321ec2bd
- (void)parseASParseContext:(id)context root:(id)root parent:(id)parent callbackDict:(id)dict streamCallbackDict:(id)dict5 account:(id)account;	// 0x321eb795
- (void)postProcessApplicationData;	// 0x321ea659
// converted property getter: - (id)recurrenceId;	// 0x321ec241
- (BOOL)saveToCalendarWithExistingRecord:(void *)existingRecord intoCalendar:(void *)calendar shouldMergeProperties:(BOOL)properties outMergeDidChooseLocalProperties:(BOOL *)outMerge account:(id)account;	// 0x321eaef1
// converted property setter: - (void)setCachedParentFolderId:(id)anId;	// 0x321ec315
// converted property setter: - (void)setCachedParentServerId:(id)anId;	// 0x321ec391
- (void)setDTStamp:(id)stamp;	// 0x321ebdd9
// converted property setter: - (void)setExceptionDate:(id)date;	// 0x321ebdc9
// converted property setter: - (void)setInstanceType:(id)type;	// 0x321ec1fd
// converted property setter: - (void)setMeetingClassType:(int)type;	// 0x321ec2cd
- (void)setObject:(id)object forDCCPT:(int)dccpt;	// 0x321ea0d9
- (void)setOrganizer:(id)organizer;	// 0x321ebd1d
// converted property setter: - (void)setRecurrenceId:(id)anId;	// 0x321ec279
- (BOOL)shouldUseInMemoryAttendeesForAccount:(id)account numExistingAttendees:(int)attendees;	// 0x321eb429
- (void)takeValuesFromParentEmailForAccount:(id)account;	// 0x321eba01
- (BOOL)writeInviteToCalDBCreateAsRejected:(BOOL)calDBCreateAsRejected defaultCalendar:(void *)calendar account:(id)account;	// 0x321eb461
@end

