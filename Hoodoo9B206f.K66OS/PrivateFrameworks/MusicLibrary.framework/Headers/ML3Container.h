/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

#import "ML3Entity.h"
#import "MusicLibrary-Structs.h"

@class NSString, NSArray, ML3Predicate;

@interface ML3Container : ML3Entity {
}
@property(readonly, assign) ML3Predicate *dynamicPredicate;	// G=0x35d45991; 
@property(readonly, assign, getter=isLimitOrderingDescending) BOOL limitOrderingDescending;	// G=0x35d45a21; 
@property(readonly, assign) NSArray *limitOrderingDirectionality;	// G=0x35d45b95; 
@property(readonly, assign) NSArray *limitOrderingProperties;	// G=0x35d45b45; 
@property(readonly, assign) long long limitValue;	// G=0x35d45be9; 
@property(readonly, assign, getter=isLimitedByCount) BOOL limitedByCount;	// G=0x35d459e5; 
@property(readonly, assign) NSString *limitingProperty;	// G=0x35d45ad9; 
@property(readonly, assign) ML3Predicate *staticPredicate;	// G=0x35d4593d; 
+ (void)_insertNewSmartPlaylist:(id)playlist criteriaBlob:(id)blob limited:(BOOL)limited trackOrder:(unsigned long)order distinguishedKind:(int)kind inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x35d44aa5
+ (id)autoCreatedBuiltInSmartPlaylistsPIDs:(id)smartPlaylistsPIDs;	// 0x35d45445
+ (BOOL)createMissingBuiltInSmartPlaylists:(id)smartPlaylists;	// 0x35d44dc5
+ (id)databaseTable;	// 0x35d17d01
+ (id)defaultOrderingProperties;	// 0x35d209d9
+ (void)deleteAutoCreatedBuiltInSmartPlaylistsPIDs:(id)smartPlaylistsPIDs inLibrary:(id)library;	// 0x35d456e9
+ (id)extraTablesToDelete;	// 0x35d4412d
+ (id)foreignColumnForProperty:(id)property;	// 0x35d44111
+ (id)foreignDatabaseTableForProperty:(id)property;	// 0x35d440f5
+ (BOOL)hasCriterionInCriteriaList:(OpaqueSearchCriteriaList *)criteriaList forITDBTrackField:(int)itdbtrackField;	// 0x35d44769
+ (void)initialize;	// 0x35d16bc9
+ (id)joinClauseForProperty:(id)property;	// 0x35d17c11
+ (id)nextFilepathForPlaylistType:(int)playlistType withPersistentID:(unsigned long long)persistentID inLibrary:(id)library;	// 0x35d226d9
+ (id)persistentIDColumnForTable:(id)table;	// 0x35d248d9
+ (void)populateDynamicContainersInLibrary:(id)library;	// 0x35d464fd
+ (void)populateDynamicContainersInLibrary:(id)library createBuiltinSmartPlaylists:(BOOL)playlists;	// 0x35d46521
+ (void)populateDynamicContainersWithTrackPersistentID:(id)trackPersistentID inLibrary:(id)library;	// 0x35d46545
+ (void)populateDynamicContainersWithTrackPersistentID:(id)trackPersistentID inLibrary:(id)library createBuiltinSmartPlaylists:(BOOL)playlists;	// 0x35d46569
+ (void)populateSortOrdersOfPropertyValues:(id)propertyValues inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x35d22d35
+ (void)populateStaticItemsOfDynamicContainersOnHandle:(sqlite3 *)dynamicContainersOnHandle;	// 0x35d46031
+ (id)predicateForCriteriaList:(OpaqueSearchCriteriaList *)criteriaList dynamicCriteria:(BOOL)criteria;	// 0x35d44815
+ (int)revisionTrackingCode;	// 0x35d24941
+ (id)sectionPropertyForProperty:(id)property;	// 0x35d440d9
+ (BOOL)smartCriteriaCanBeEvaluated:(id)evaluated;	// 0x35d4413d
- (id)initWithDictionary:(id)dictionary inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x35d22199
- (void)_accessCurrentSwappedPersisentIDsUsingBlock:(id)block;	// 0x35d46e5d
- (BOOL)_setSwappedItemPersistentIDs:(const long long *)ids size:(int)size;	// 0x35d46e15
- (BOOL)_setSwappedItemPersistentIDs:(const long long *)ids size:(int)size notify:(BOOL)notify;	// 0x35d46b81
- (BOOL)addTrackWithPersistentID:(long long)persistentID;	// 0x35d478b9
- (BOOL)addTracksWithPersistentIDs:(long long *)persistentIDs count:(unsigned)count;	// 0x35d478e5
- (BOOL)addTracksWithPersistentIDs:(long long *)persistentIDs count:(unsigned)count notify:(BOOL)notify;	// 0x35d47909
- (void)bindPopulateStatement:(sqlite3_stmt *)statement withStaticTrackPersistentID:(id)staticTrackPersistentID;	// 0x35d45fd1
// declared property getter: - (id)dynamicPredicate;	// 0x35d45991
- (void)getDisplayOrderingProperties:(id *)properties isDescending:(BOOL *)descending;	// 0x35d45c7d
- (OpaqueSearchCriteriaList *)importedCriteriaList;	// 0x35d458c5
- (BOOL)isCustomContainerOrderingDescending;	// 0x35d45a9d
// declared property getter: - (BOOL)isLimitOrderingDescending;	// 0x35d45a21
// declared property getter: - (BOOL)isLimitedByCount;	// 0x35d459e5
// declared property getter: - (id)limitOrderingDirectionality;	// 0x35d45b95
// declared property getter: - (id)limitOrderingProperties;	// 0x35d45b45
// declared property getter: - (long long)limitValue;	// 0x35d45be9
// declared property getter: - (id)limitingProperty;	// 0x35d45ad9
- (BOOL)moveTrackFromIndex:(unsigned)index toIndex:(unsigned)index2;	// 0x35d47ca5
- (id)populateSQLWithStaticTrackPersistentID:(id)staticTrackPersistentID;	// 0x35d45e19
- (BOOL)removeAllTracks;	// 0x35d46e39
- (BOOL)removeTracksAtIndexes:(id)indexes;	// 0x35d47759
- (BOOL)removeTracksAtIndexes:(id)indexes notify:(BOOL)notify;	// 0x35d47735
- (BOOL)removeTracksAtIndexes:(id)indexes notify:(BOOL)notify indexesTransformBlock:(id)block;	// 0x35d46ff9
- (BOOL)removeTracksWithPersistentIDs:(const long long *)persistentIDs atFilteredIndexes:(id)filteredIndexes;	// 0x35d47779
- (BOOL)setContainsTrack:(BOOL)track forPersistentID:(long long)persistentID notify:(BOOL)notify;	// 0x35d47465
- (BOOL)setTracksWithPersistentIDs:(const long long *)persistentIDs count:(unsigned)count;	// 0x35d480b1
- (BOOL)setTracksWithPersistentIDs:(const long long *)persistentIDs count:(unsigned)count notify:(BOOL)notify;	// 0x35d480d5
- (BOOL)setTracksWithSwappedPersistentIDData:(id)swappedPersistentIDData;	// 0x35d48419
- (BOOL)setValue:(id)value forProperty:(id)property;	// 0x35d44345
// declared property getter: - (id)staticPredicate;	// 0x35d4593d
@end

