/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/DataAccess.framework/Frameworks/DACalDAV.framework/DACalDAV
 */

#import <DAAccount.h> // Unknown library
#import "DACalDAV-Structs.h"

@class NSSet, NSURL, NSDictionary, DACoreDAVTaskManager, NSTimeZone, NSMutableDictionary, NSMutableSet, CalDAVPrincipalSearchPropertySet, CoreDAVDiscoveryTaskGroup, DACoreDAVLogger, CalDAVServerVersion, NSDate, MobileCalDAVPrincipal, MobileCalDAVAccountRefreshActor, CalDAVRefreshContext, NSString;

@interface MobileCalDAVAccount : DAAccount {
	DACoreDAVTaskManager *_taskManager;	// 64 = 0x40
	NSMutableDictionary *_principals;	// 68 = 0x44
	MobileCalDAVPrincipal *_mainPrincipal;	// 72 = 0x48
	int _preferredEventDaysToSync;	// 76 = 0x4c
	int _preferredToDoDaysToSync;	// 80 = 0x50
	NSMutableSet *_calendars;	// 84 = 0x54
	BOOL _subscribedCalendarsChanged;	// 88 = 0x58
	NSString *_collectionSetName;	// 92 = 0x5c
	CalDAVPrincipalSearchPropertySet *_searchPropertySet;	// 96 = 0x60
	CoreDAVDiscoveryTaskGroup *_checkValidityTaskGroup;	// 100 = 0x64
	MobileCalDAVAccountRefreshActor *_actor;	// 104 = 0x68
	BOOL _isRefreshing;	// 108 = 0x6c
	BOOL _isSpinning;	// 109 = 0x6d
	BOOL _needsAccountPropertyRefresh;	// 110 = 0x6e
	CalDAVRefreshContext *_refreshContext;	// 112 = 0x70
	NSMutableSet *_searchTaskSet;	// 116 = 0x74
	DACoreDAVLogger *_curLogger;	// 120 = 0x78
	CalDAVServerVersion *_serverVersion;	// 124 = 0x7c
	NSMutableDictionary *_itemIDsToMoveActions;	// 128 = 0x80
	NSMutableSet *_movedItemURLStrings;	// 132 = 0x84
@private
	BOOL _searchQueriesShouldCancel;	// 136 = 0x88
}
@property(assign) int calDAVAccountVersion;	// G=0x33144149; S=0x3314417d; 
@property(readonly, assign) NSSet *calendars;	// G=0x33144c61; 
@property(retain) NSURL *collectionSetURL;	// G=0x3314489d; S=0x331448e1; 
@property(retain) id host;	// G=0x331443f1; S=0x3314442d; converted property
@property(assign) BOOL isRefreshing;	// G=0x331486e5; S=0x331486f5; @synthesize=_isRefreshing
@property(assign) BOOL isWritable;	// G=0x33144971; S=0x331449dd; 
@property(readonly, assign) NSMutableDictionary *itemIDsToMoveActions;	// G=0x3314875d; @synthesize=_itemIDsToMoveActions
@property(retain) MobileCalDAVPrincipal *mainPrincipal;	// G=0x3314877d; S=0x33148791; @synthesize=_mainPrincipal
@property(readonly, assign) NSSet *movedItemURLStrings;	// G=0x3314876d; @synthesize=_movedItemURLStrings
@property(assign) BOOL needsAccountPropertyRefresh;	// G=0x3314873d; S=0x3314874d; @synthesize=_needsAccountPropertyRefresh
@property(readonly, assign) NSDate *ocurrenceCacheEndDate;	// G=0x33145645; 
@property(readonly, assign) NSDate *ocurrenceCacheStartDate;	// G=0x3314560d; 
@property(assign) int overriddenPort;	// G=0x33144345; S=0x331442e5; 
@property(retain) NSString *overriddenScheme;	// G=0x331443d5; S=0x33144379; 
@property(retain) NSString *overriddenServer;	// G=0x331442c9; S=0x3314426d; 
@property(assign) int port;	// G=0x331445bd; S=0x33144579; converted property
@property(assign) int preferredEventDaysToSync;	// G=0x331487c5; S=0x331487d5; @synthesize=_preferredEventDaysToSync
@property(assign) int preferredToDoDaysToSync;	// G=0x331487e5; S=0x331487f5; @synthesize=_preferredToDoDaysToSync
@property(retain) id principalURL;	// G=0x3314466d; S=0x3314468d; converted property
@property(readonly, assign) NSDictionary *principals;	// G=0x331487b5; @synthesize=_principals
@property(retain) CalDAVRefreshContext *refreshContext;	// G=0x33148705; S=0x33148719; @synthesize=_refreshContext
@property(retain) id scheme;	// G=0x331444b5; S=0x331444f1; converted property
@property(retain) id searchPropertySet;	// G=0x3314491d; S=0x3314492d; 
@property(assign) BOOL searchQueriesShouldCancel;	// G=0x33148805; S=0x33148815; @synthesize=_searchQueriesShouldCancel
@property(assign) CalDAVServerVersion *serverVersion;	// G=0x3314543d; S=0x331454ad; 
@property(readonly, assign) BOOL shouldFilterEventSyncTimeRange;	// G=0x3314567d; 
@property(readonly, assign) BOOL shouldFilterSyncTimeRangeForInbox;	// G=0x33145715; 
@property(readonly, assign) BOOL shouldFilterTodoSyncTimeRange;	// G=0x331456c9; 
@property(retain, nonatomic) NSDictionary *subscribedCalendars;	// G=0x33144129; S=0x3314408d; 
@property(readonly, assign) BOOL supportsEvents;	// G=0x331457fd; 
@property(readonly, assign) BOOL supportsReminders;	// G=0x33145781; 
@property(readonly, retain) DACoreDAVTaskManager *taskManager;	// G=0x33145805; converted property
@property(assign) BOOL useSSL;	// G=0x3314463d; S=0x33144609; converted property
@property(retain) id username;	// G=0x331441c1; S=0x331441e1; converted property
@property(readonly, assign) NSTimeZone *viewedTimeZone;	// G=0x331455f1; 
@property(assign) BOOL wasMigrated;	// G=0x33144a21; S=0x33144ad5; 
+ (Class)accountClass;	// 0x33143301
+ (Class)clientClass;	// 0x3314331d
+ (id)defaultProperties;	// 0x33142a51
+ (id)supportedDataclasses;	// 0x33143339
- (id)init;	// 0x33142b91
- (id)initWithProperties:(id)properties;	// 0x33142569
- (id)_calendarConstraintsPath;	// 0x3314595d
- (id)_calendarConstraintsResource;	// 0x33145859
- (id)_collectActionsFromMoveDictionary:(CFDictionaryRef)moveDictionary forDataclass:(id)dataclass outShouldSave:(BOOL *)anOut;	// 0x331467b9
- (void)_collectMoveActions;	// 0x33146c65
- (BOOL)_needsNewAccountIDForOldVersion:(int)oldVersion;	// 0x33143b49
- (id)_oldURLsForKeychain;	// 0x331438dd
- (id)_powerAssertionContext;	// 0x33148125
- (id)_powerAssertionGroupIdentifier;	// 0x33148129
- (void)_setSpinning:(BOOL)spinning;	// 0x33146019
- (void)_updateCalendarStore:(BOOL)store;	// 0x33145d09
- (BOOL)_updateCalendarStoreProperties:(void *)properties;	// 0x33145a29
- (void)_upgradeAccountToTelluride;	// 0x331433d1
- (BOOL)_upgradeSelfFromVersion:(int)version superClassUpgraded:(BOOL)upgraded;	// 0x33143b55
- (BOOL)accountNeedsUpgrade;	// 0x33143f95
- (void)addCalendar:(id)calendar;	// 0x33144b9d
- (void)addPrincipal:(id)principal;	// 0x331453a9
// declared property getter: - (int)calDAVAccountVersion;	// 0x33144149
// declared property getter: - (id)calendars;	// 0x33144c61
- (void)cancelAllSearchQueries;	// 0x331479f9
- (void)cancelRefresh;	// 0x3314607d
- (void)cancelSearchQuery:(id)query;	// 0x331478b1
- (void)checkValidityWithConsumer:(id)consumer;	// 0x33147ee5
// declared property getter: - (id)collectionSetURL;	// 0x3314489d
- (void *)copyCalStore;	// 0x331459d5
- (void)coreDAVLogDiagnosticMessage:(id)message atLevel:(int)level;	// 0x33148659
- (int)coreDAVLogLevel;	// 0x33148639
- (void)coreDAVLogTransmittedDataPartial:(id)partial;	// 0x331486c1
- (int)coreDAVOutputLevel;	// 0x33148651
- (void)coreDAVTransmittedDataFinished;	// 0x331486e1
- (void)dealloc;	// 0x33142bd1
- (void)discoveryTask:(id)task gotAccountInfo:(id)info error:(id)error;	// 0x33147b39
- (void)dropPowerAssertions;	// 0x3314823d
// converted property getter: - (id)host;	// 0x331443f1
- (BOOL)isCalDAVAccount;	// 0x331482dd
- (BOOL)isEqualToAccount:(id)account;	// 0x331482e1
// declared property getter: - (BOOL)isRefreshing;	// 0x331486e5
// declared property getter: - (BOOL)isWritable;	// 0x33144971
// declared property getter: - (id)itemIDsToMoveActions;	// 0x3314875d
- (id)localizedIdenticalAccountFailureMessage;	// 0x33148511
- (id)localizedInvalidPasswordMessage;	// 0x33148589
// declared property getter: - (id)mainPrincipal;	// 0x3314877d
// declared property getter: - (id)movedItemURLStrings;	// 0x3314876d
// declared property getter: - (BOOL)needsAccountPropertyRefresh;	// 0x3314873d
// declared property getter: - (id)ocurrenceCacheEndDate;	// 0x33145645
// declared property getter: - (id)ocurrenceCacheStartDate;	// 0x3314560d
// declared property getter: - (int)overriddenPort;	// 0x33144345
// declared property getter: - (id)overriddenScheme;	// 0x331443d5
// declared property getter: - (id)overriddenServer;	// 0x331442c9
- (void)performSearchQuery:(id)query;	// 0x3314751d
// converted property getter: - (int)port;	// 0x331445bd
// declared property getter: - (int)preferredEventDaysToSync;	// 0x331487c5
// declared property getter: - (int)preferredToDoDaysToSync;	// 0x331487e5
// converted property getter: - (id)principalURL;	// 0x3314466d
// declared property getter: - (id)principals;	// 0x331487b5
- (id)properties;	// 0x33142e51
- (void)reattainPowerAssertions;	// 0x3314828d
- (void)refreshActor:(id)actor didCompleteWithError:(id)error;	// 0x33146155
// declared property getter: - (id)refreshContext;	// 0x33148705
- (void)refreshWithContext:(id)context;	// 0x33146f69
- (void)releasePowerAssertion;	// 0x3314819d
- (void)reloadCalendars;	// 0x331452e1
- (void)removeCalendar:(id)calendar;	// 0x33144bf5
- (void)removePrincipal:(id)principal;	// 0x33145401
- (void)retainPowerAssertion;	// 0x33148139
// converted property getter: - (id)scheme;	// 0x331444b5
// declared property getter: - (id)searchPropertySet;	// 0x3314491d
- (BOOL)searchQueriesRunning;	// 0x33147b05
// declared property getter: - (BOOL)searchQueriesShouldCancel;	// 0x33148805
- (id)serverBaseURL;	// 0x331447b5
// declared property getter: - (id)serverVersion;	// 0x3314543d
- (void)setAccountDescription:(id)description;	// 0x33144859
// declared property setter: - (void)setCalDAVAccountVersion:(int)version;	// 0x3314417d
// declared property setter: - (void)setCollectionSetURL:(id)url;	// 0x331448e1
// converted property setter: - (void)setHost:(id)host;	// 0x3314442d
// declared property setter: - (void)setIsRefreshing:(BOOL)refreshing;	// 0x331486f5
// declared property setter: - (void)setIsWritable:(BOOL)writable;	// 0x331449dd
// declared property setter: - (void)setMainPrincipal:(id)principal;	// 0x33148791
// declared property setter: - (void)setNeedsAccountPropertyRefresh:(BOOL)refresh;	// 0x3314874d
// declared property setter: - (void)setOverriddenPort:(int)port;	// 0x331442e5
// declared property setter: - (void)setOverriddenScheme:(id)scheme;	// 0x33144379
// declared property setter: - (void)setOverriddenServer:(id)server;	// 0x3314426d
// converted property setter: - (void)setPort:(int)port;	// 0x33144579
// declared property setter: - (void)setPreferredEventDaysToSync:(int)sync;	// 0x331487d5
// declared property setter: - (void)setPreferredToDoDaysToSync:(int)sync;	// 0x331487f5
// converted property setter: - (void)setPrincipalURL:(id)url;	// 0x3314468d
// declared property setter: - (void)setRefreshContext:(id)context;	// 0x33148719
// converted property setter: - (void)setScheme:(id)scheme;	// 0x331444f1
// declared property setter: - (void)setSearchPropertySet:(id)set;	// 0x3314492d
// declared property setter: - (void)setSearchQueriesShouldCancel:(BOOL)cancel;	// 0x33148815
// declared property setter: - (void)setServerVersion:(id)version;	// 0x331454ad
// declared property setter: - (void)setSubscribedCalendars:(id)calendars;	// 0x3314408d
// converted property setter: - (void)setUseSSL:(BOOL)ssl;	// 0x33144609
// converted property setter: - (void)setUsername:(id)username;	// 0x331441e1
// declared property setter: - (void)setWasMigrated:(BOOL)migrated;	// 0x33144ad5
// declared property getter: - (BOOL)shouldFilterEventSyncTimeRange;	// 0x3314567d
// declared property getter: - (BOOL)shouldFilterSyncTimeRangeForInbox;	// 0x33145715
// declared property getter: - (BOOL)shouldFilterTodoSyncTimeRange;	// 0x331456c9
- (BOOL)shouldLogTransmittedData;	// 0x3314869d
- (void)shutdown;	// 0x33147b35
- (id)spinnerIdentifiers;	// 0x33145fb9
- (id)stateString;	// 0x33143369
// declared property getter: - (id)subscribedCalendars;	// 0x33144129
- (BOOL)supportsDADataclass:(int)dataclass;	// 0x33143359
// declared property getter: - (BOOL)supportsEvents;	// 0x331457fd
// declared property getter: - (BOOL)supportsReminders;	// 0x33145781
- (void)task:(id)task didFinishWithError:(id)error;	// 0x33147205
// converted property getter: - (id)taskManager;	// 0x33145805
- (BOOL)upgradeAccount;	// 0x33143f0d
// converted property getter: - (BOOL)useSSL;	// 0x3314463d
// converted property getter: - (id)username;	// 0x331441c1
- (BOOL)usesTokenAuth;	// 0x33145801
// declared property getter: - (id)viewedTimeZone;	// 0x331455f1
// declared property getter: - (BOOL)wasMigrated;	// 0x33144a21
- (id)wellKnownPaths;	// 0x33147d4d
@end

