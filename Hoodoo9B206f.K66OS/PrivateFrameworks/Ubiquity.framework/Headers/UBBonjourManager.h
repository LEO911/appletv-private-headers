/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/Ubiquity.framework/Ubiquity
 */

#import "Ubiquity-Structs.h"
#import "NSNetServiceDelegate.h"
#import "NSNetServiceBrowserDelegate.h"
#import "APSConnectionDelegate.h"
#import <NSObject.h> // Unknown library

@class APSConnection, NSMutableSet, NSString, NSSet, NSMutableDictionary;

__attribute__((visibility("hidden")))
@interface UBBonjourManager : NSObject <NSNetServiceDelegate, NSNetServiceBrowserDelegate, APSConnectionDelegate> {
@private
	bool _suspended;	// 4 = 0x4
	bool _invalidated;	// 5 = 0x5
	bool _setupComplete;	// 6 = 0x6
	bool _use_ssl;	// 7 = 0x7
	bool _previously_suspended;	// 8 = 0x8
	bool _bonjourDisabled;	// 9 = 0x9
	bool _srvBonjourDisabled;	// 10 = 0xa
	dispatch_queue_s *_notifyQueue;	// 12 = 0xc
	CFRunLoopRef _runloop;	// 16 = 0x10
	unsigned char _uuid[16];	// 20 = 0x14
	int _port;	// 36 = 0x24
	/*function-pointer*/ void *_network_change_cb;	// 40 = 0x28
	/*function-pointer*/ void *_notify_cb;	// 44 = 0x2c
	/*function-pointer*/ void *_mme_set_token_cb;	// 48 = 0x30
	/*function-pointer*/ void *_mme_push_cb;	// 52 = 0x34
	void *_notify_ctx;	// 56 = 0x38
	NSString *_domain;	// 60 = 0x3c
	NSString *_mmeUUID;	// 64 = 0x40
	NSString *_pushEnvironment;	// 68 = 0x44
	NSSet *_vlans;	// 72 = 0x48
	NSMutableDictionary *_identities;	// 76 = 0x4c
	CFDictionaryRef _uuidCtx;	// 80 = 0x50
	int _periodicPushInterval;	// 84 = 0x54
	unsigned long long _refetchMMeConfigTime;	// 88 = 0x58
	dispatch_source_s *_periodicPushTimer;	// 96 = 0x60
	APSConnection *_pushConnection;	// 100 = 0x64
	struct {
		NSMutableDictionary *_browsers;
		NSMutableSet *_resolvingNetServices;
		struct {
			NSMutableDictionary *_byFQDN;
			NSMutableDictionary *_byIdentity;
		} _monitoredNetServices;
	} _browserState;	// 104 = 0x68
	struct {
		NSMutableDictionary *_netServices;
	} _publishedState;	// 120 = 0x78
	struct {
		struct {
			NSMutableDictionary *_byFQDN;
			NSMutableDictionary *_byEndPoint;
			NSMutableDictionary *_byUUID;
		} _foundServices;
		NSMutableDictionary *_preferredFQDN;
		NSMutableDictionary *_collectionUUIDs;
	} _serviceState;	// 124 = 0x7c
	SCNetworkReachabilityRef _reachabilityRef;	// 144 = 0x90
}
- (id)init;	// 0x360e5721
- (void)_deallocBrowserState;	// 0x360e4229
- (void)_deallocNetworkState;	// 0x360e5491
- (void)_deallocPublishedState;	// 0x360e4971
- (void)_deallocPushState;	// 0x360e4de1
- (void)_deallocReachability;	// 0x360e5149
- (void)_deallocServiceState;	// 0x360e4be9
- (id)_endPointForServiceDict:(id)serviceDict;	// 0x360e5b99
- (id)_fqdnForNetService:(id)netService;	// 0x360e5cb5
- (id)_fqdnForServiceDict:(id)serviceDict;	// 0x360e5c21
- (id)_getIdentityForNetService:(id)netService rnd:(unsigned *)rnd;	// 0x360e5ded
- (bool)_havePreferredFQDN:(id)fqdn;	// 0x360e78c5
- (void)_initBrowserState;	// 0x360e44e9
- (void)_initNetworkState;	// 0x360e555d
- (void)_initPublishedState;	// 0x360e4b3d
- (void)_initPushState;	// 0x360e4eb9
- (void)_initReachability;	// 0x360e5205
- (void)_initServiceState;	// 0x360e4cc1
- (bool)_isValid;	// 0x360e420d
- (void)_processNetService:(id)service type:(int)type;	// 0x360e81a5
- (void)_rearmPeriodicPushTimer;	// 0x360e6d91
- (void)_refetchMMeConfig;	// 0x360e6535
- (void)_restartBrowsers;	// 0x360e47bd
- (void)_runBlockOnRL:(id)rl;	// 0x360e5a09
- (id)_serviceDataForIdentity:(id)identity prependedID:(id)anId;	// 0x360e5f19
- (void)_setNetworkReachable:(BOOL)reachable;	// 0x360e64fd
- (bool)_splitNetServiceName:(id)name rnd:(unsigned *)rnd hashedID:(id *)anId;	// 0x360e5d35
- (void)_updateServicesForIdentity:(id)identity;	// 0x360e6031
- (void)connection:(id)connection didReceiveMessageForTopic:(id)topic userInfo:(id)info;	// 0x360e8e85
- (void)connection:(id)connection didReceivePublicToken:(id)token;	// 0x360e8dc1
- (XXStruct_iqH4zA *)copyOnlinePeerContexts:(unsigned *)contexts;	// 0x360e7fa1
- (id)copyPreferredEndPointURL:(unsigned char [16])url;	// 0x360e79a9
- (void)dealloc;	// 0x360e5629
- (void)invalidate;	// 0x360e7e75
- (void)netService:(id)service didNotResolve:(id)resolve;	// 0x360e8a51
- (void)netService:(id)service didUpdateTXTRecordData:(id)data;	// 0x360e8c61
- (void)netServiceBrowser:(id)browser didFindService:(id)service moreComing:(BOOL)coming;	// 0x360e892d
- (void)netServiceBrowser:(id)browser didRemoveService:(id)service moreComing:(BOOL)coming;	// 0x360e8d11
- (void)netServiceDidResolveAddress:(id)netService;	// 0x360e8b0d
- (void)removeIdentity:(id)identity;	// 0x360e72e1
- (void)resume;	// 0x360e7c39
- (void)sendMMePush:(id)push;	// 0x360e6b6d
- (void)setContext:(void *)context forUUID:(unsigned char [16])uuid;	// 0x360e7f09
- (void)setMMeUUID:(unsigned char [16])uuid;	// 0x360e76c5
- (void)setPreferredFQDN:(id)fqdn forUUID:(unsigned char [16])uuid;	// 0x360e77f5
- (void)setupClient:(unsigned char [16])client port:(int)port use_ssl:(bool)ssl network_change_cb:(/*function-pointer*/ void *)cb notify_cb:(/*function-pointer*/ void *)cb5 notify_ctx:(void *)ctx domain:(id)domain vlans:(id)vlans;	// 0x360e6fb9
- (void)setupMMeEnvironment:(id)environment mme_set_token_cb:(/*function-pointer*/ void *)cb mme_push_cb:(/*function-pointer*/ void *)cb3;	// 0x360e7585
- (void)suspend;	// 0x360e7b89
- (void)updateIdentity:(id)identity collections:(id)collections;	// 0x360e7181
- (bool)uuidOnline:(unsigned char [16])online;	// 0x360e7b21
@end

