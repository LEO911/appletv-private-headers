/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/DAVKit.framework/DAVKit
 */

#import <NSObject.h> // Unknown library
#import "AYGroup.h"
#import "DAVKit-Structs.h"

@class NSMutableSet, NSString, NSMutableDictionary, AYAddress, NSLock, NSMutableArray, NSHTTPCookieStorage;
@protocol DAVAuthStore;

@interface DAVSession : NSObject <AYGroup> {
	NSString *_scheme;	// 4 = 0x4
	NSString *_host;	// 8 = 0x8
	AYAddress *_address;	// 12 = 0xc
	int _port;	// 16 = 0x10
	BOOL _bypassProxies;	// 20 = 0x14
	BOOL _builtinRedirect;	// 21 = 0x15
	NSMutableDictionary *_permanentRedirects;	// 24 = 0x18
	NSString *_userAgent;	// 28 = 0x1c
	NSString *_acceptEncoding;	// 32 = 0x20
	NSString *_username;	// 36 = 0x24
	NSString *_password;	// 40 = 0x28
	id _passwordDelegate;	// 44 = 0x2c
	unsigned _readTimeOut;	// 48 = 0x30
	id _delegate;	// 52 = 0x34
	NSMutableDictionary *_privateInfos;	// 56 = 0x38
	NSMutableSet *_adapters;	// 60 = 0x3c
	int _bufferSize;	// 64 = 0x40
	NSLock *_sessionLock;	// 68 = 0x44
	int _numWorkerThread;	// 72 = 0x48
	id<DAVAuthStore> _authStore;	// 76 = 0x4c
	id _simpleAuthStore;	// 80 = 0x50
	void *_davReserved;	// 84 = 0x54
	BOOL _useKerberos;	// 88 = 0x58
	BOOL _supportsDigest;	// 89 = 0x59
	BOOL _useAuth;	// 90 = 0x5a
	NSMutableArray *_trustedCerts;	// 92 = 0x5c
	NSLock *_certUILock;	// 96 = 0x60
	BOOL _bypassCheckingServerTrust;	// 100 = 0x64
	id _certificateDelegate;	// 104 = 0x68
	NSHTTPCookieStorage *_cookieStorage;	// 108 = 0x6c
}
@property(readonly, retain) NSString *acceptEncoding;	// G=0x32da9cf9; converted property
@property(assign, getter=isBuiltinRedirect) BOOL builtinRedirect;	// G=0x32da9c39; S=0x32da9c29; converted property
@property(assign) BOOL bypassCheckingServerTrust;	// G=0x32da9d5d; S=0x32da9d6d; converted property
@property(assign, getter=isBypassProxies) BOOL bypassProxies;	// G=0x32da9d19; S=0x32da9d09; converted property
@property(assign) id certificateDelegate;	// G=0x32da9d8d; S=0x32da9d7d; converted property
@property(retain) NSHTTPCookieStorage *cookieStorage;	// G=0x32da9d9d; S=0x32daa0a1; converted property
@property(readonly, retain) NSString *host;	// G=0x32da9c09; converted property
@property(assign) BOOL keepAlive;	// G=0x32da9d39; S=0x32da9d29; converted property
@property(retain) id lockOwner;	// G=0x32daa1ed; S=0x32daa20d; converted property
@property(readonly, retain) NSString *password;	// G=0x32daa281; converted property
@property(readonly, assign) int port;	// G=0x32da9c19; converted property
@property(assign) unsigned readTimeOut;	// G=0x32da9cd9; S=0x32da9cc9; converted property
@property(readonly, retain) NSString *scheme;	// G=0x32da9bf9; converted property
@property(assign) BOOL supportsDigest;	// G=0x32da9ded; S=0x32da9ddd; converted property
@property(retain) NSMutableArray *trustedCerts;	// G=0x32da9e1d; S=0x32dac3f1; converted property
@property(assign) BOOL useAuth;	// G=0x32da9e0d; S=0x32da9dfd; converted property
@property(assign) BOOL useKerberos;	// G=0x32da9dcd; S=0x32da9dbd; converted property
@property(retain) NSString *userAgent;	// G=0x32da9ce9; S=0x32daa1b1; converted property
@property(readonly, retain) NSString *username;	// G=0x32da9c85; converted property
+ (id)defaultAcceptEncoding;	// 0x32dab2a1
+ (id)defaultUserAgent;	// 0x32dab405
+ (void)initialize;	// 0x32daa751
+ (id)sessionWithScheme:(id)scheme host:(id)host port:(int)port;	// 0x32daa705
+ (id)sessionWithURL:(id)url;	// 0x32daa619
+ (void)setDefaultAcceptEncoding:(id)encoding;	// 0x32dab34d
+ (void)setDefaultUserAgent:(id)agent;	// 0x32dab551
+ (void)setMaxRedirection:(int)redirection;	// 0x32da9ca5
+ (void)setMaxWorkerThreadsPerSession:(int)session;	// 0x32da9cb1
+ (void)setProxiesDelegate:(id)delegate;	// 0x32da9cbd
- (id)initWithScheme:(id)scheme host:(id)host port:(int)port;	// 0x32daadf5
- (id)initWithURL:(id)url;	// 0x32daa561
- (id)URLToURI:(id)uri;	// 0x32daa46d
// converted property getter: - (id)acceptEncoding;	// 0x32da9cf9
- (void)addAdapter:(id)adapter;	// 0x32daa429
- (long)bufferSize;	// 0x32da9dad
// converted property getter: - (BOOL)bypassCheckingServerTrust;	// 0x32da9d5d
// converted property getter: - (id)certificateDelegate;	// 0x32da9d8d
- (void)clearAuthChallenge;	// 0x32daa449
// converted property getter: - (id)cookieStorage;	// 0x32da9d9d
- (void)correctBufferSizeWithSize:(long)size;	// 0x32da9f7d
- (void)dealloc;	// 0x32dab149
- (id)description;	// 0x32daa50d
- (void)finalize;	// 0x32dab0fd
- (id)getNewRequestMessage:(CFHTTPMessageRef *)message andStream:(CFReadStreamRef *)stream forRequest:(id)request;	// 0x32dab609
- (BOOL)hasCredentials;	// 0x32daa22d
// converted property getter: - (id)host;	// 0x32da9c09
- (id)infoForKey:(id)key;	// 0x32daa381
// converted property getter: - (BOOL)isBuiltinRedirect;	// 0x32da9c39
// converted property getter: - (BOOL)isBypassProxies;	// 0x32da9d19
// converted property getter: - (BOOL)keepAlive;	// 0x32da9d39
- (id)lock;	// 0x32da9c95
// converted property getter: - (id)lockOwner;	// 0x32daa1ed
- (void)notifyAdaptersRequestCreated:(id)created;	// 0x32daa045
- (void)notifyAdaptersRequestDestroyed:(id)destroyed;	// 0x32da9fe9
- (void)operationHasEnded:(id)ended;	// 0x32daa0dd
- (BOOL)operationShouldBeLaunchedNow:(id)operation;	// 0x32daa13d
// converted property getter: - (id)password;	// 0x32daa281
// converted property getter: - (int)port;	// 0x32da9c19
// converted property getter: - (unsigned)readTimeOut;	// 0x32da9cd9
- (void)removeTrustedCerts;	// 0x32daab39
// converted property getter: - (id)scheme;	// 0x32da9bf9
- (void)setAuthStore:(id)store;	// 0x32da9c49
// converted property setter: - (void)setBuiltinRedirect:(BOOL)redirect;	// 0x32da9c29
// converted property setter: - (void)setBypassCheckingServerTrust:(BOOL)trust;	// 0x32da9d6d
// converted property setter: - (void)setBypassProxies:(BOOL)proxies;	// 0x32da9d09
// converted property setter: - (void)setCertificateDelegate:(id)delegate;	// 0x32da9d7d
// converted property setter: - (void)setCookieStorage:(id)storage;	// 0x32daa0a1
- (void)setDelegate:(id)delegate;	// 0x32da9c75
- (void)setInfo:(id)info forKey:(id)key;	// 0x32daa3a5
// converted property setter: - (void)setKeepAlive:(BOOL)alive;	// 0x32da9d29
// converted property setter: - (void)setLockOwner:(id)owner;	// 0x32daa20d
// converted property setter: - (void)setReadTimeOut:(unsigned)anOut;	// 0x32da9cc9
// converted property setter: - (void)setSupportsDigest:(BOOL)digest;	// 0x32da9ddd
// converted property setter: - (void)setTrustedCerts:(id)certs;	// 0x32dac3f1
// converted property setter: - (void)setUseAuth:(BOOL)auth;	// 0x32da9dfd
// converted property setter: - (void)setUseKerberos:(BOOL)kerberos;	// 0x32da9dbd
// converted property setter: - (void)setUserAgent:(id)agent;	// 0x32daa1b1
- (void)setUsername:(id)username andPassword:(id)password;	// 0x32daa309
- (void)setUsername:(id)username andPasswordDelegate:(id)delegate;	// 0x32daa2b5
// converted property getter: - (BOOL)supportsDigest;	// 0x32da9ded
// converted property getter: - (id)trustedCerts;	// 0x32da9e1d
// converted property getter: - (BOOL)useAuth;	// 0x32da9e0d
// converted property getter: - (BOOL)useKerberos;	// 0x32da9dcd
// converted property getter: - (id)userAgent;	// 0x32da9ce9
// converted property getter: - (id)username;	// 0x32da9c85
- (int)workerThreadsCount;	// 0x32da9d4d
@end

