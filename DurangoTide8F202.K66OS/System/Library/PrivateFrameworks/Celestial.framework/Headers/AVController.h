/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/Celestial.framework/Celestial
 */

#import "Celestial-Structs.h"
#import <NSObject.h> // Unknown library


@interface AVController : NSObject {
@private
	AVControllerPrivate *_priv;	// 4 = 0x4
}
@property(assign) double currentTime;	// G=0x30f18a61; S=0x30f2add1; converted property
@property(assign) id delegate;	// G=0x30f2a889; S=0x30f18585; converted property
@property(assign) BOOL muted;	// G=0x30f2cf55; S=0x30f2cfd5; converted property
@property(retain) id outputQTESFilePath;	// G=0x30f1cb41; S=0x30f2c25d; converted property
@property(retain) id queue;	// G=0x30f2a811; S=0x30f16149; converted property
@property(retain) id queueFeeder;	// G=0x30f2a821; S=0x30f1fe1d; converted property
@property(assign) BOOL shouldDisplayClosedCaptions;	// G=0x30f2a875; S=0x30f18651; converted property
@property(assign) BOOL vibrationEnabled;	// G=0x30f2a6c9; S=0x30f2a7a1; converted property
@property(retain) id vibrationPattern;	// G=0x30f2a705; S=0x30f2a739; converted property
@property(assign) OpaqueFigVisualContext *visualContext;	// G=0x30f2a855; S=0x30f2d129; converted property
@property(assign) float volume;	// G=0x30f18531; S=0x30f2018d; converted property
+ (id)avController;	// 0x30f2af0d
+ (id)avControllerWithQueue:(id)queue error:(id *)error;	// 0x30f2aed5
+ (id)compatibleAudioRouteForRoute:(id)route;	// 0x30f2af41
+ (id)convertFigTimeDictionaryToTimeIntervalWithKey:(id)key stringURLToNSURLWithKey:(id)key2 inDictionaries:(id)dictionaries;	// 0x30f2c425
+ (BOOL)isNetworkSupportedPath:(id)path;	// 0x30f1f099
+ (BOOL)isSupportedFileExtension:(id)extension;	// 0x30f2c559
+ (BOOL)isSupportedMimeType:(id)type;	// 0x30f2c505
+ (void)setEnableNetworkMode:(BOOL)mode;	// 0x30f201f9
- (id)init;	// 0x30f15bd1
- (id)initForStreaming;	// 0x30f2aeb5
- (id)initWithError:(id *)error;	// 0x30f15fad
- (id)initWithQueue:(id)queue error:(id *)error;	// 0x30f15be9
- (id)initWithQueue:(id)queue fmpType:(unsigned)type error:(id *)error;	// 0x30f15c1d
- (id)_figPlayerNotifications;	// 0x30f2ab39
- (BOOL)activate:(id *)activate;	// 0x30f2ce85
- (id)addNextFeederItemToQueue;	// 0x30f18d45
- (void)applyDesiredRepeatMode;	// 0x30f2c9ad
- (id)attributeForKey:(id)key;	// 0x30f17db1
- (void)avPlaybackQueueCurrentItemChangedNotification:(id)notification;	// 0x30f16891
- (BOOL)beginInterruption:(id *)interruption;	// 0x30f2ce09
- (BOOL)beginRepeatGap;	// 0x30f2060d
- (id)bookmarkGroupIDForAVItem:(id)avitem;	// 0x30f1a7a5
- (double)bookmarkTimeForAVItem:(id)avitem;	// 0x30f1a7c9
- (BOOL)canBeginInterruption;	// 0x30f2c1f5
- (void)cancelAllCGImageRequests;	// 0x30f2b935
- (void)cancelContinueAfterRepeatGap;	// 0x30f1c35d
- (void)checkQueueSpace;	// 0x30f18cb9
- (void)continueAfterRepeatGap;	// 0x30f2ae9d
- (long)copyImageForTime:(CVBufferRef *)time time:(const XXStruct_pwHToB *)time2;	// 0x30f2a809
- (OpaqueFigPlaybackItem *)createItemWithURL:(id)url flags:(unsigned long)flags error:(int *)error;	// 0x30f1ca01
- (OpaqueFigPlaybackItem *)currentFPItem;	// 0x30f18b09
- (id)currentItem;	// 0x30f18b2d
- (void)currentItemHasChanged:(id)changed;	// 0x30f1aefd
- (void)currentItemWillChangeToItem:(id)currentItem oldItemCurrentTime:(double)time;	// 0x30f1aaf9
// converted property getter: - (double)currentTime;	// 0x30f18a61
- (void)dealloc;	// 0x30f25961
// converted property getter: - (id)delegate;	// 0x30f2a889
- (void)dequeueDeadItem;	// 0x30f2a959
- (void)dequeueFirstItem;	// 0x30f1f3d1
- (void)endInterruptionWithStatus:(id)status;	// 0x30f2b8c9
- (void)ensurePlaybackQueueImmed;	// 0x30f2a981
- (int)eqPreset;	// 0x30f2a845
- (id)errorWithDescription:(id)description code:(long)code;	// 0x30f2adf5
- (void)feederInvalidatedWithCurrentItemMoved:(id)currentItemMoved;	// 0x30f2c815
- (void)feederRangeWasInserted:(id)inserted;	// 0x30f2c5ad
- (void)feederRangeWasRemoved:(id)removed;	// 0x30f2bc71
- (void)figPlayerNotificationHandler:(id)handler;	// 0x30f2b101
- (void)fmpEffectiveVolumeDidChange;	// 0x30f2ac91
- (void)fpItemNotification:(id)notification sender:(id)sender;	// 0x30f1b2fd
- (CGImageRef)grabCGImageAtTime:(double)time withTimeOptions:(int)timeOptions withImageOptions:(id)imageOptions actualTime:(double *)time4;	// 0x30f25595
- (BOOL)havePlayedCurrentItem;	// 0x30f2a831
- (unsigned)indexOfCurrentQueueFeederItem;	// 0x30f1f191
- (BOOL)isCurrentItemReady;	// 0x30f2a9a5
- (BOOL)isNewImageAvailableForTime:(const XXStruct_pwHToB *)time willNeverBeAvailable:(BOOL *)available;	// 0x30f2a805
- (BOOL)isValid;	// 0x30f2cf01
- (void)itemHasFinishedPlayingNotification:(id)notification;	// 0x30f20579
- (id)lkLayer;	// 0x30f2a865
- (void)logPerformanceDataForCurrentItem;	// 0x30f2d22d
- (void)makeCurrentItemReady;	// 0x30f1c395
- (void)makeError:(id *)error withDescription:(id)description code:(long)code;	// 0x30f1fde9
// converted property getter: - (BOOL)muted;	// 0x30f2cf55
- (BOOL)okToNotifyFromThisThread;	// 0x30f1add5
// converted property getter: - (id)outputQTESFilePath;	// 0x30f1cb41
- (void)pause;	// 0x30f1f179
- (BOOL)play:(id *)play;	// 0x30f2ae81
- (BOOL)playNextItem:(id *)item;	// 0x30f1f369
- (AVControllerPrivate *)privateStorage;	// 0x30f2a7f5
// converted property getter: - (id)queue;	// 0x30f2a811
// converted property getter: - (id)queueFeeder;	// 0x30f2a821
- (float)rate;	// 0x30f1b049
- (void)rateDidChangeToRate:(float)rate;	// 0x30f1e0b9
- (void)registerTimeMarkerObserver:(id)observer forItem:(id)item times:(id)times context:(id)context;	// 0x30f2a9f1
- (void)removeObserver:(id)observer fromTMOArray:(id)tmoarray;	// 0x30f1fab5
- (int)repeatMode;	// 0x30f1fe0d
- (void)requestAsyncCGImagesAtTimes:(id)times requestIDs:(id)ids withTimeOptions:(int)timeOptions withImageOptions:(id)imageOptions;	// 0x30f2becd
- (void)requestAsyncCGImagesAtTimes:(id)times withTimeOptions:(int)timeOptions withImageOptions:(id)imageOptions;	// 0x30f2adad
- (BOOL)resumePlayback:(double)playback error:(id *)error;	// 0x30f2c0e5
- (void)safeSubtitleCommandPosted:(void *)posted;	// 0x30f2c291
- (void)scheduleQueueSpaceCheck;	// 0x30f1c1ad
- (void)scheduleUpdateTimeMarkerObservations;	// 0x30f1b095
- (void)seekToDate:(id)date;	// 0x30f2b969
- (void)setAVItemClass:(Class)aClass;	// 0x30f2a7e5
- (void)setApplyVideoTrackMatrix;	// 0x30f2d061
- (BOOL)setAttribute:(id)attribute forKey:(id)key error:(id *)error;	// 0x30f16b21
// converted property setter: - (void)setCurrentTime:(double)time;	// 0x30f2add1
- (void)setCurrentTime:(double)time options:(int)options;	// 0x30f1fed5
// converted property setter: - (void)setDelegate:(id)delegate;	// 0x30f18585
- (void)setEQPreset:(int)preset;	// 0x30f185c9
- (BOOL)setIndexOfCurrentQueueFeederItem:(unsigned)currentQueueFeederItem error:(id *)error;	// 0x30f1f1e9
- (void)setLayer:(id)layer;	// 0x30f1874d
// converted property setter: - (void)setMuted:(BOOL)muted;	// 0x30f2cfd5
// converted property setter: - (void)setOutputQTESFilePath:(id)path;	// 0x30f2c25d
- (BOOL)setPickedRouteWithPassword:(id)password withPassword:(id)password2;	// 0x30f2d17d
// converted property setter: - (void)setQueue:(id)queue;	// 0x30f16149
// converted property setter: - (void)setQueueFeeder:(id)feeder;	// 0x30f1fe1d
- (void)setQueueFeeder:(id)feeder withIndex:(int)index;	// 0x30f187d5
- (BOOL)setRate:(float)rate error:(id *)error;	// 0x30f1c231
- (BOOL)setRepeatMode:(int)mode;	// 0x30f187a5
// converted property setter: - (void)setShouldDisplayClosedCaptions:(BOOL)displayClosedCaptions;	// 0x30f18651
- (void)setSubtitleRecipient:(id)recipient;	// 0x30f18615
// converted property setter: - (void)setVibrationEnabled:(BOOL)enabled;	// 0x30f2a7a1
// converted property setter: - (void)setVibrationPattern:(id)pattern;	// 0x30f2a739
// converted property setter: - (void)setVisualContext:(OpaqueFigVisualContext *)context;	// 0x30f2d129
// converted property setter: - (void)setVolume:(float)volume;	// 0x30f2018d
- (BOOL)shouldBeginPlayingItem:(id)item error:(id *)error;	// 0x30f1d5ad
// converted property getter: - (BOOL)shouldDisplayClosedCaptions;	// 0x30f2a875
- (void)stepByCount:(int)count;	// 0x30f2b9b1
- (void)unregisterTimeMarkerObserver:(id)observer forItem:(id)item;	// 0x30f1f951
- (long)updateActionAtEnd;	// 0x30f18665
- (void)updateTimeMarkerObservations;	// 0x30f1d7a5
// converted property getter: - (BOOL)vibrationEnabled;	// 0x30f2a6c9
// converted property getter: - (id)vibrationPattern;	// 0x30f2a705
// converted property getter: - (OpaqueFigVisualContext *)visualContext;	// 0x30f2a855
// converted property getter: - (float)volume;	// 0x30f18531
@end

