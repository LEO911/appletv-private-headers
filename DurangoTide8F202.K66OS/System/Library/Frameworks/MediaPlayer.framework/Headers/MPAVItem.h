/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

#import <AVItem.h> // Unknown library
#import "MediaPlayer-Structs.h"

@class NSMutableArray, MPQueueFeeder, NSURL, NSString, NSArray, NSData, MPAlternateTracks;

@interface MPAVItem : AVItem {
	MPQueueFeeder *_feeder;	// 8 = 0x8
	NSMutableArray *_chapterTimeMarkers;	// 12 = 0xc
	NSMutableArray *_artworkTimeMarkers;	// 16 = 0x10
	NSMutableArray *_urlTimeMarkers;	// 20 = 0x14
	MPAlternateTracks *_alternateTracks;	// 24 = 0x18
	unsigned _type;	// 28 = 0x1c
	double _cachedDuration;	// 32 = 0x20
	double _cachedPlayableDuration;	// 40 = 0x28
	float _defaultPlaybackRate;	// 48 = 0x30
	NSString *_videoID;	// 52 = 0x34
	unsigned _advancedDuringPlayback : 1;	// 56 = 0x38
	unsigned _handledFinishTime : 1;	// 56 = 0x38
	unsigned _hasPlayedThisSession : 1;	// 56 = 0x38
	unsigned _wasCountedAsSkipped : 1;	// 56 = 0x38
	unsigned _isStreamable : 2;	// 56 = 0x38
	unsigned _useCachedPlayableDuration : 1;	// 56 = 0x38
	unsigned _watchingAttributes : 1;	// 56 = 0x38
	unsigned _videoDisabled : 1;	// 57 = 0x39
	unsigned _lyricsAvailable : 1;	// 57 = 0x39
	unsigned _delayedInvalidateCachedPlayedDurationScheduled : 1;	// 57 = 0x39
}
@property(readonly, retain, nonatomic) NSString *album;	// G=0x31d78065; 
@property(readonly, retain, nonatomic) NSString *albumArtist;	// G=0x31d7806d; 
@property(readonly, assign, nonatomic) unsigned albumTrackCount;	// G=0x31d78075; 
@property(readonly, assign, nonatomic) unsigned albumTrackNumber;	// G=0x31d78071; 
@property(readonly, retain, nonatomic) MPAlternateTracks *alternateTracks;	// G=0x31d78259; @synthesize=_alternateTracks
@property(readonly, retain, nonatomic) NSString *artist;	// G=0x31d78069; 
@property(readonly, retain, nonatomic) NSData *artworkImageData;	// G=0x31d78079; 
@property(readonly, retain, nonatomic) NSString *artworkMIMEType;	// G=0x31d7807d; 
@property(readonly, retain, nonatomic) NSArray *artworkTimeMarkers;	// G=0x31d78a11; 
@property(readonly, retain, nonatomic) NSArray *chapterTimeMarkers;	// G=0x31d78a35; 
@property(readonly, retain, nonatomic) NSString *composer;	// G=0x31d78081; 
@property(readonly, assign, nonatomic) unsigned countForQueueFeeder;	// G=0x31d7907d; 
@property(readonly, assign, nonatomic) double currentTimeDisplayOverride;	// G=0x31d78095; 
@property(assign, nonatomic) float defaultPlaybackRate;	// G=0x31d78219; S=0x31d78229; @synthesize=_defaultPlaybackRate
@property(readonly, assign, nonatomic) unsigned discCount;	// G=0x31d78089; 
@property(readonly, assign, nonatomic) unsigned discNumber;	// G=0x31d78085; 
@property(readonly, retain, nonatomic) NSString *displayableText;	// G=0x31d79029; 
@property(readonly, assign, nonatomic) BOOL displayableTextLoaded;	// G=0x31d7903d; 
@property(readonly, assign, nonatomic) double durationFromExternalMetadata;	// G=0x31d78191; 
@property(readonly, assign, nonatomic) double durationIfAvailable;	// G=0x31d7a5d1; 
@property(readonly, assign, nonatomic) BOOL durationIsValid;	// G=0x31d7a569; 
@property(readonly, assign, nonatomic) BOOL externalProtectionEnabled;	// G=0x31d785ed; 
@property(assign, nonatomic) MPQueueFeeder *feeder;	// G=0x31d78239; S=0x31d78249; @synthesize=_feeder
@property(readonly, retain, nonatomic) NSString *genre;	// G=0x31d78091; 
@property(readonly, assign, nonatomic) BOOL hasDataForItemArtwork;	// G=0x31d7809d; 
@property(readonly, assign, nonatomic) BOOL hasDisplayableText;	// G=0x31d780a1; 
@property(assign, nonatomic) BOOL hasPlayedThisSession;	// G=0x31d780a5; S=0x31d780d5; 
@property(readonly, assign, nonatomic) unsigned indexInQueueFeeder;	// G=0x31d78f79; 
@property(readonly, retain, nonatomic) NSString *lyrics;	// G=0x31d78ff1; 
@property(readonly, retain, nonatomic) NSString *mainTitle;	// G=0x31d780cd; 
@property(readonly, assign, nonatomic) unsigned long long persistentID;	// G=0x31d7817d; 
@property(readonly, assign, nonatomic) double playableDuration;	// G=0x31d784b9; 
@property(readonly, assign, nonatomic) double playableDurationIfAvailable;	// G=0x31d7a6ed; 
@property(assign, nonatomic) double playbackCheckpointCurrentTime;	// G=0x31d77fe5; S=0x31d77fed; 
@property(readonly, retain, nonatomic) NSURL *podcastURL;	// G=0x31d780d1; 
@property(readonly, assign, nonatomic) NSURL *protectedContentSupportStorageURL;	// G=0x31d7818d; 
@property(readonly, assign, nonatomic) BOOL requiresExternalProtection;	// G=0x31d78649; 
@property(readonly, assign, nonatomic, getter=isStreamable) BOOL streamable;	// G=0x31d78ef9; 
@property(readonly, assign, nonatomic) double timeOfSeekableEnd;	// G=0x31d795a1; 
@property(readonly, assign, nonatomic) double timeOfSeekableStart;	// G=0x31d796a9; 
@property(readonly, assign, nonatomic) unsigned type;	// G=0x31d78169; 
@property(readonly, retain, nonatomic) NSArray *urlTimeMarkers;	// G=0x31d789dd; 
@property(readonly, assign, nonatomic) BOOL useEmbeddedChapterData;	// G=0x31d78131; 
@property(readonly, assign, nonatomic) float userRating;	// G=0x31d78179; 
@property(assign) BOOL userSkippedPlayback;	// G=0x31d7804d; S=0x31d7802d; converted property
@property(assign, nonatomic, getter=isVideoDisabled) BOOL videoDisabled;	// G=0x31d780b9; S=0x31d78109; 
@property(copy, nonatomic) NSString *videoID;	// G=0x31d78209; S=0x31d7a4bd; @synthesize=_videoID
@property(readonly, assign, nonatomic) BOOL wantsSubtitles;	// G=0x31d78189; 
+ (unsigned)defaultScaleMode;	// 0x31d77f65
+ (void)setDefaultScaleMode:(unsigned)mode;	// 0x31d77f71
- (id)init;	// 0x31d793ad
- (id)initWithPath:(id)path error:(id *)error;	// 0x31d7936d
- (void)_blockingloadTimeMarkersForMarkerType:(int)markerType;	// 0x31d78abd
- (void)_checkAllowsBlockingDurationCall;	// 0x31d78ce1
- (void)_commonInit;	// 0x31d781c5
- (void)_delayedInvalidateCachedPlayedDuration;	// 0x31d7819d
- (double)_durationFromExternalMetadataIfAvailable;	// 0x31d7a589
- (BOOL)_insertEmbeddedTimeMarkerWithInfo:(id)info markerType:(int)type;	// 0x31d7873d
- (void)_itemAttributeAvailableNotification:(id)notification;	// 0x31d782c5
- (id *)_ivarAddrForMarkerType:(int)markerType;	// 0x31d78135
- (id)_mutableTimeMarkersForMarkerType:(int)markerType;	// 0x31d78a59
- (id)_newBlockingLoadedTimeMarkersForMarkerType:(int)markerType;	// 0x31d79a95
- (void)_realoadEmbeddedTimeMarkers;	// 0x31d78df9
- (void)_releaseAllTimeMarkers;	// 0x31d79305
- (void)_updateForNaturalSizeChange;	// 0x31d7a725
// declared property getter: - (id)album;	// 0x31d78065
// declared property getter: - (id)albumArtist;	// 0x31d7806d
// declared property getter: - (unsigned)albumTrackCount;	// 0x31d78075
// declared property getter: - (unsigned)albumTrackNumber;	// 0x31d78071
- (BOOL)allowAutoChangingScaleModeToFill;	// 0x31d77f61
// declared property getter: - (id)alternateTracks;	// 0x31d78259
- (unsigned)alternatesCountForTypes:(unsigned)types;	// 0x31d78fa9
// declared property getter: - (id)artist;	// 0x31d78069
// declared property getter: - (id)artworkImageData;	// 0x31d78079
// declared property getter: - (id)artworkMIMEType;	// 0x31d7807d
- (id)artworkTimeMarkerForTime:(double)time;	// 0x31d79885
// declared property getter: - (id)artworkTimeMarkers;	// 0x31d78a11
- (double)avDuration;	// 0x31d7a4e9
- (id)blockForDirectAVControllerNotificationReferencingItem:(id)directAVControllerNotificationReferencingItem;	// 0x31d78269
- (id)blockingAttributeForKey:(id)key;	// 0x31d78be9
- (id)chapterTimeMarkerForTime:(double)time;	// 0x31d7998d
// declared property getter: - (id)chapterTimeMarkers;	// 0x31d78a35
// declared property getter: - (id)composer;	// 0x31d78081
// declared property getter: - (unsigned)countForQueueFeeder;	// 0x31d7907d
// declared property getter: - (double)currentTimeDisplayOverride;	// 0x31d78095
- (void)dealloc;	// 0x31d79201
// declared property getter: - (float)defaultPlaybackRate;	// 0x31d78219
// declared property getter: - (unsigned)discCount;	// 0x31d78089
// declared property getter: - (unsigned)discNumber;	// 0x31d78085
// declared property getter: - (id)displayableText;	// 0x31d79029
// declared property getter: - (BOOL)displayableTextLoaded;	// 0x31d7903d
- (double)duration;	// 0x31d791c5
// declared property getter: - (double)durationFromExternalMetadata;	// 0x31d78191
// declared property getter: - (double)durationIfAvailable;	// 0x31d7a5d1
// declared property getter: - (BOOL)durationIsValid;	// 0x31d7a569
// declared property getter: - (BOOL)externalProtectionEnabled;	// 0x31d785ed
// declared property getter: - (id)feeder;	// 0x31d78239
- (void)flushNowPlayingCaches;	// 0x31d791d9
- (id)formatDetailsForTracks;	// 0x31d79155
// declared property getter: - (id)genre;	// 0x31d78091
- (BOOL)hasAlternatesForTypes:(unsigned)types;	// 0x31d78fcd
// declared property getter: - (BOOL)hasDataForItemArtwork;	// 0x31d7809d
// declared property getter: - (BOOL)hasDisplayableText;	// 0x31d780a1
// declared property getter: - (BOOL)hasPlayedThisSession;	// 0x31d780a5
- (id)imageCacheRequestWithSize:(CGSize)size time:(double)time;	// 0x31d78b4d
// declared property getter: - (unsigned)indexInQueueFeeder;	// 0x31d78f79
- (BOOL)insertEmbeddedTimeMarkerWithInfo:(id)info markerType:(int)type;	// 0x31d79ddd
- (BOOL)isPlaceholderForItem:(id)item;	// 0x31d7808d
// declared property getter: - (BOOL)isStreamable;	// 0x31d78ef9
- (BOOL)isSupportedDefaultPlaybackSpeed:(unsigned)speed;	// 0x31d77f85
// declared property getter: - (BOOL)isVideoDisabled;	// 0x31d780b9
- (void)loadFakeURLTimeMarkersIfNecessary;	// 0x31d79d61
- (id)localizedPositionInPlaylistString;	// 0x31d78679
// declared property getter: - (id)lyrics;	// 0x31d78ff1
// declared property getter: - (id)mainTitle;	// 0x31d780cd
- (id)newTimeMarkerWithInfo:(id)info markerType:(int)type;	// 0x31d793ed
- (id)newURLTimeMarkersByFakingWithChapterMarkers:(id)chapterMarkers;	// 0x31d79eb9
- (void)notePlaybackFinishedByHittingEnd;	// 0x31d77fd1
// declared property getter: - (unsigned long long)persistentID;	// 0x31d7817d
// declared property getter: - (double)playableDuration;	// 0x31d784b9
// declared property getter: - (double)playableDurationIfAvailable;	// 0x31d7a6ed
// declared property getter: - (double)playbackCheckpointCurrentTime;	// 0x31d77fe5
- (float)playbackRateForLevel:(unsigned)level direction:(int)direction paused:(BOOL)paused;	// 0x31d78e75
// declared property getter: - (id)podcastURL;	// 0x31d780d1
- (void)postDurationDidChange;	// 0x31d790a1
// declared property getter: - (id)protectedContentSupportStorageURL;	// 0x31d7818d
// declared property getter: - (BOOL)requiresExternalProtection;	// 0x31d78649
- (void)resetBookkeeping;	// 0x31d77f91
- (float)scanIntervalForLevel:(unsigned)level paused:(BOOL)paused;	// 0x31d78e25
- (void)setAlternateAudioTrackID:(unsigned)anId;	// 0x31d77fc9
// declared property setter: - (void)setDefaultPlaybackRate:(float)rate;	// 0x31d78229
// declared property setter: - (void)setFeeder:(id)feeder;	// 0x31d78249
// declared property setter: - (void)setHasPlayedThisSession:(BOOL)session;	// 0x31d780d5
- (void)setOverrideDuration:(double)duration;	// 0x31d780f5
// declared property setter: - (void)setPlaybackCheckpointCurrentTime:(double)time;	// 0x31d77fed
- (void)setPlaybackFinishedTime:(double)time;	// 0x31d77ff1
- (void)setPlaybackStoppedTime:(double)time;	// 0x31d77fcd
- (void)setRating:(float)rating;	// 0x31d78005
- (void)setSubtitleTrackID:(unsigned)anId;	// 0x31d78009
- (void)setUserAdvancedDuringPlayback:(BOOL)playback;	// 0x31d7800d
- (void)setUserEnabledSubtitles:(BOOL)subtitles;	// 0x31d78029
// converted property setter: - (void)setUserSkippedPlayback:(BOOL)playback;	// 0x31d7802d
// declared property setter: - (void)setVideoDisabled:(BOOL)disabled;	// 0x31d78109
// declared property setter: - (void)setVideoID:(id)anId;	// 0x31d7a4bd
- (void)setupPlaybackInfo;	// 0x31d790d9
// declared property getter: - (double)timeOfSeekableEnd;	// 0x31d795a1
// declared property getter: - (double)timeOfSeekableStart;	// 0x31d796a9
- (id)titlesForTime:(double)time;	// 0x31d7812d
// declared property getter: - (unsigned)type;	// 0x31d78169
- (void)updateAttributesForDefaultsChange:(id)defaultsChange;	// 0x31d78061
- (id)urlTimeMarkerForTime:(double)time;	// 0x31d7977d
// declared property getter: - (id)urlTimeMarkers;	// 0x31d789dd
- (BOOL)useAsyncEmbeddedChapterDataLoading;	// 0x31d78b35
- (BOOL)useBlockingEmbeddedChapterDataLoading;	// 0x31d78b15
// declared property getter: - (BOOL)useEmbeddedChapterData;	// 0x31d78131
// declared property getter: - (float)userRating;	// 0x31d78179
// converted property getter: - (BOOL)userSkippedPlayback;	// 0x31d7804d
// declared property getter: - (id)videoID;	// 0x31d78209
// declared property getter: - (BOOL)wantsSubtitles;	// 0x31d78189
@end

