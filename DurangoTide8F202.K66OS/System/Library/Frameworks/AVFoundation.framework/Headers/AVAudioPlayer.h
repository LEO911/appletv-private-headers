/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/AVFoundation.framework/AVFoundation
 */

#import "AVFoundation-Structs.h"
#import <NSObject.h> // Unknown library

@class NSDictionary, NSURL, NSData;
@protocol AVAudioPlayerDelegate;

@interface AVAudioPlayer : NSObject {
@private
	void *_impl;	// 4 = 0x4
}
@property(assign) double currentTime;	// G=0x303c24a1; S=0x303c2099; @dynamic
@property(readonly, assign) NSData *data;	// G=0x303bfaa1; @dynamic
@property(assign) id<AVAudioPlayerDelegate> delegate;	// G=0x303bfab1; S=0x303bfbd5; @dynamic
@property(readonly, assign) double deviceCurrentTime;	// G=0x303c236d; @dynamic
@property(readonly, assign) double duration;	// G=0x303c0181; 
@property(assign, getter=isMeteringEnabled) BOOL meteringEnabled;	// G=0x303bfb31; S=0x303c1a0d; @dynamic
@property(readonly, assign) unsigned numberOfChannels;	// G=0x303bfaf9; @dynamic
@property(assign) int numberOfLoops;	// G=0x303bfb1d; S=0x303bfb09; @dynamic
@property(assign) float pan;	// G=0x303bfae5; S=0x303c259d; @dynamic
@property(readonly, assign, getter=isPlaying) BOOL playing;	// G=0x303bfa7d; @dynamic
@property(readonly, assign) NSDictionary *settings;	// G=0x303bfac1; @dynamic
@property(readonly, assign) NSURL *url;	// G=0x303bfa91; @dynamic
@property(assign) float volume;	// G=0x303bfad1; S=0x303c2661; @dynamic
- (id)initWithContentsOfURL:(id)url error:(id *)error;	// 0x303c05e5
- (id)initWithData:(id)data error:(id *)error;	// 0x303c06c1
- (float)averagePowerForChannel:(unsigned)channel;	// 0x303bfb75
- (id)baseInit;	// 0x303bfbf5
- (void)beginInterruption;	// 0x303bfcb9
// declared property getter: - (double)currentTime;	// 0x303c24a1
// declared property getter: - (id)data;	// 0x303bfaa1
- (void)dealloc;	// 0x303c00b1
- (void)decodeError;	// 0x303bfcdd
// declared property getter: - (id)delegate;	// 0x303bfab1
// declared property getter: - (double)deviceCurrentTime;	// 0x303c236d
// declared property getter: - (double)duration;	// 0x303c0181
- (void)endInterruption;	// 0x303bfc6d
- (void)endInterruptionWithFlags;	// 0x303bfc91
- (void)finalize;	// 0x303c0131
- (void)finishedPlaying;	// 0x303c1dc5
- (AudioPlayerImpl *)impl;	// 0x303bfa6d
// declared property getter: - (BOOL)isMeteringEnabled;	// 0x303bfb31
// declared property getter: - (BOOL)isPlaying;	// 0x303bfa7d
// declared property getter: - (unsigned)numberOfChannels;	// 0x303bfaf9
// declared property getter: - (int)numberOfLoops;	// 0x303bfb1d
// declared property getter: - (float)pan;	// 0x303bfae5
- (void)pause;	// 0x303c27f9
- (float)peakPowerForChannel:(unsigned)channel;	// 0x303bfb45
- (BOOL)play;	// 0x303c1ead
- (BOOL)playAtTime:(double)time;	// 0x303c28b9
- (BOOL)prepareToPlay;	// 0x303c1fb1
- (void)privCommonCleanup;	// 0x303c0049
// declared property setter: - (void)setCurrentTime:(double)time;	// 0x303c2099
// declared property setter: - (void)setDelegate:(id)delegate;	// 0x303bfbd5
// declared property setter: - (void)setMeteringEnabled:(BOOL)enabled;	// 0x303c1a0d
// declared property setter: - (void)setNumberOfLoops:(int)loops;	// 0x303bfb09
// declared property setter: - (void)setPan:(float)pan;	// 0x303c259d
// declared property setter: - (void)setVolume:(float)volume;	// 0x303c2661
// declared property getter: - (id)settings;	// 0x303bfac1
- (void)stop;	// 0x303c2721
- (void)updateMeters;	// 0x303c1909
// declared property getter: - (id)url;	// 0x303bfa91
// declared property getter: - (float)volume;	// 0x303bfad1
@end

