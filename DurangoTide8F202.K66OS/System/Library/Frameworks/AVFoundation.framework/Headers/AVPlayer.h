/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/AVFoundation.framework/AVFoundation
 */

#import "AVFoundation-Structs.h"
#import <NSObject.h> // Unknown library

@class AVPlayerInternal, AVPlayerItem, NSError, NSArray;

@interface AVPlayer : NSObject {
@private
	AVPlayerInternal *_player;	// 4 = 0x4
}
@property(copy, nonatomic, setter=_setDisplaysUsedForPlayback:) NSArray *_displaysUsedForPlayback;	// G=0x303cecc9; S=0x303d4e4d; 
@property(readonly, assign, nonatomic) int _externalProtectionStatus;	// G=0x303d403d; 
@property(assign, nonatomic) int actionAtItemEnd;	// G=0x303cf4f1; S=0x303cf4d9; 
@property(readonly, assign, nonatomic, getter=isAudioPlaybackEnabledAtAllRates) BOOL audioPlaybackEnabledAtAllRates;	// G=0x303d3f21; 
@property(assign, nonatomic, getter=isClosedCaptionDisplayEnabled) BOOL closedCaptionDisplayEnabled;	// G=0x303cf401; S=0x303d50a9; 
@property(readonly, assign, nonatomic) AVPlayerItem *currentItem;	// G=0x303cfde1; 
@property(readonly, assign, nonatomic) NSError *error;	// G=0x303cfec5; @dynamic
@property(assign, nonatomic) float maxRateForAudioPlayback;	// G=0x303d451d; S=0x303d4a99; 
@property(assign, nonatomic) float minRateForAudioPlayback;	// G=0x303d3aa1; S=0x303d4b21; 
@property(assign, nonatomic) float rate;	// G=0x303cf6a5; S=0x303d3e49; 
@property(readonly, assign, nonatomic) int status;	// G=0x303cec01; @dynamic
@property(assign, getter=isSubtitleDisplayEnabled) BOOL subtitleDisplayEnabled;	// G=0x303cf329; S=0x303d4fc5; converted property
@property(assign) BOOL waitsUntilItemsAreReadyForInspectionBeforeMakingEligibleForPlayback;	// G=0x303cec3d; S=0x303cec59; converted property
+ (BOOL)automaticallyNotifiesObserversOfActionAtItemEnd;	// 0x303cec7d
+ (BOOL)automaticallyNotifiesObserversOfClosedCaptionDisplayEnabled;	// 0x303cec81
+ (BOOL)automaticallyNotifiesObserversOfCurrentItem;	// 0x303cec39
+ (BOOL)automaticallyNotifiesObserversOfRate;	// 0x303cec75
+ (BOOL)automaticallyNotifiesObserversOfSubtitleDisplayEnabled;	// 0x303cec85
+ (void)initialize;	// 0x303d00a9
+ (id)keyPathsForValuesAffectingActionAtItemEnd;	// 0x303cf4b1
+ (id)keyPathsForValuesAffectingClosedCaptionDisplayEnabled;	// 0x303cf3d9
+ (id)keyPathsForValuesAffectingRate;	// 0x303cf67d
+ (id)keyPathsForValuesAffectingSubtitleDisplayEnabled;	// 0x303cf301
+ (id)playerWithPlayerItem:(id)playerItem;	// 0x303d0029
+ (id)playerWithURL:(id)url;	// 0x303d0069
- (id)init;	// 0x303d3b41
- (id)initWithDispatchQueue:(dispatch_queue_s *)dispatchQueue;	// 0x303d0485
- (id)initWithPlayerItem:(id)playerItem;	// 0x303cfff9
- (id)initWithURL:(id)url;	// 0x303cffc5
- (int)_actionAtItemEnd;	// 0x303d441d
- (void)_addFPListeners;	// 0x303d21ad
- (void)_addLayer:(id)layer;	// 0x303cf0c1
- (void)_advanceCurrentItemToItemContainingFigPlaybackItem:(OpaqueFigPlaybackItem *)itemContainingFigPlaybackItem;	// 0x303d1329
- (BOOL)_attachItem:(id)item andPerformOperation:(int)operation withObject:(id)object;	// 0x303d1851
- (void)_attachLayerToFigPlayer;	// 0x303d4f0d
- (void)_beginInterruption;	// 0x303d0611
- (id)_cachedValueForKey:(id)key;	// 0x303cff85
- (void)_changeStatusToFailedWithError:(id)error;	// 0x303cfe11
- (void)_checkDefaultsWriteForPerformanceLogging;	// 0x303d294d
- (id)_currentItem;	// 0x303cec1d
- (int)_defaultActionAtItemEnd;	// 0x303cec79
- (void)_didAccessKVOForKey:(id)key;	// 0x303cff01
// declared property getter: - (id)_displaysUsedForPlayback;	// 0x303cecc9
- (void)_enumerateItemsUsingBlock:(id)block;	// 0x303cf8b9
// declared property getter: - (int)_externalProtectionStatus;	// 0x303d403d
- (OpaqueFigPlayer *)_figPlayer;	// 0x303cebad
- (id)_fpNotificationNames;	// 0x303cf039
- (BOOL)_insertItem:(id)item afterItem:(id)item2;	// 0x303cfae5
- (BOOL)_insertPlaybackItemOfItem:(id)item inPlayerQueueAfterPlaybackItemOfItem:(id)item2;	// 0x303cfb61
- (BOOL)_isClosedCaptionDisplayEnabled;	// 0x303d4369
- (BOOL)_isSubtitleDisplayEnabled;	// 0x303d42b5
- (id)_items;	// 0x303cf809
- (void)_logPerformanceDataForCurrentItem;	// 0x303d40e5
- (void)_logPerformanceDataForPreviousItem;	// 0x303d41c1
- (id)_playbackDisplaysForFigPlayer;	// 0x303ced05
- (id)_playerLayers;	// 0x303cf0ed
- (int)_playerType;	// 0x303cebc9
- (void)_preparePlaybackItemOfItemForEnqueueing:(id)enqueueing withCompletionHandler:(id)completionHandler;	// 0x303cfb25
- (id)_propertyStorage;	// 0x303cebe5
- (float)_rate;	// 0x303d0645
- (void)_removeAllItems;	// 0x303cf751
- (BOOL)_removeAnItem:(id)item;	// 0x303cf985
- (void)_removeFPListeners;	// 0x303d2071
- (BOOL)_removeItem:(id)item;	// 0x303cf909
- (void)_removeLayer:(id)layer;	// 0x303cf0d5
- (void)_setActionAtItemEnd:(int)itemEnd allowingAdvance:(BOOL)advance;	// 0x303d518d
- (void)_setCachedValue:(id)value forKey:(id)key;	// 0x303cff59
- (void)_setCurrentItem:(id)item;	// 0x303cfd1d
// declared property setter: - (void)_setDisplaysUsedForPlayback:(id)playback;	// 0x303d4e4d
- (void)_setLayer:(id)layer;	// 0x303cf141
- (BOOL)_shouldLogPerformanceData;	// 0x303cec89
- (dispatch_queue_s *)_stateDispatchQueue;	// 0x303ceb91
- (id)_weakReference;	// 0x303ceb75
- (void)_willAccessKVOForKey:(id)key;	// 0x303cff2d
// declared property getter: - (int)actionAtItemEnd;	// 0x303cf4f1
- (id)addBoundaryTimeObserverForTimes:(id)times queue:(dispatch_queue_s *)queue usingBlock:(id)block;	// 0x303cf1c5
- (void)addObserver:(id)observer forKeyPath:(id)keyPath options:(unsigned)options context:(void *)context;	// 0x303d0da1
- (id)addPeriodicTimeObserverForInterval:(XXStruct_pwHToB)interval queue:(dispatch_queue_s *)queue usingBlock:(id)block;	// 0x303cf215
// declared property getter: - (id)currentItem;	// 0x303cfde1
- (XXStruct_pwHToB)currentTime;	// 0x303d0d51
- (void)dealloc;	// 0x303d073d
- (void)didChangeValueForKey:(id)key;	// 0x303d0325
- (dispatch_queue_s *)dispatchQueue;	// 0x303cffb1
// declared property getter: - (id)error;	// 0x303cfec5
- (void)finalize;	// 0x303d3d85
// declared property getter: - (BOOL)isAudioPlaybackEnabledAtAllRates;	// 0x303d3f21
// declared property getter: - (BOOL)isClosedCaptionDisplayEnabled;	// 0x303cf401
// converted property getter: - (BOOL)isSubtitleDisplayEnabled;	// 0x303cf329
// declared property getter: - (float)maxRateForAudioPlayback;	// 0x303d451d
// declared property getter: - (float)minRateForAudioPlayback;	// 0x303d3aa1
- (void)pause;	// 0x303cf2d1
- (void)play;	// 0x303cf2e9
- (void)prepareItem:(id)item withCompletionHandler:(id)completionHandler;	// 0x303cfb05
// declared property getter: - (float)rate;	// 0x303cf6a5
- (void)release;	// 0x303d03d5
- (void)removeAudioPlaybackRateLimits;	// 0x303d4ba9
- (void)removeTimeObserver:(id)observer;	// 0x303d1599
- (void)replaceCurrentItemWithPlayerItem:(id)playerItem;	// 0x303cf28d
- (id)retain;	// 0x303d042d
- (void)seekToTime:(XXStruct_pwHToB)time;	// 0x303cf62d
- (void)seekToTime:(XXStruct_pwHToB)time toleranceBefore:(XXStruct_pwHToB)before toleranceAfter:(XXStruct_pwHToB)after;	// 0x303cf5ad
// declared property setter: - (void)setActionAtItemEnd:(int)itemEnd;	// 0x303cf4d9
// declared property setter: - (void)setClosedCaptionDisplayEnabled:(BOOL)enabled;	// 0x303d50a9
// declared property setter: - (void)setMaxRateForAudioPlayback:(float)audioPlayback;	// 0x303d4a99
// declared property setter: - (void)setMinRateForAudioPlayback:(float)audioPlayback;	// 0x303d4b21
// declared property setter: - (void)setRate:(float)rate;	// 0x303d3e49
// converted property setter: - (void)setSubtitleDisplayEnabled:(BOOL)enabled;	// 0x303d4fc5
// converted property setter: - (void)setWaitsUntilItemsAreReadyForInspectionBeforeMakingEligibleForPlayback:(BOOL)playback;	// 0x303cec59
// declared property getter: - (int)status;	// 0x303cec01
// converted property getter: - (BOOL)waitsUntilItemsAreReadyForInspectionBeforeMakingEligibleForPlayback;	// 0x303cec3d
- (void)willChangeValueForKey:(id)key;	// 0x303d037d
@end

