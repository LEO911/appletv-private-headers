/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices
 */

#import <NSObject.h> // Unknown library
#import "AFManagedStore.h"

@class NSMutableDictionary, DKConnection, NSString;
@protocol AFAssistantUIService, AFSpeechDelegate;

@interface AFConnection : NSObject <AFManagedStore> {
	DKConnection *_connection;	// 4 = 0x4
	id<AFAssistantUIService> _delegate;	// 8 = 0x8
	id<AFSpeechDelegate> _speechDelegate;	// 12 = 0xc
	float _averagePower;	// 16 = 0x10
	float _peakPower;	// 20 = 0x14
	NSString *_outstandingRequestClass;	// 24 = 0x18
	unsigned _stateInSync : 1;	// 28 = 0x1c
	unsigned _shouldSpeak : 1;	// 28 = 0x1c
	unsigned _isCapturingSpeech : 1;	// 28 = 0x1c
	unsigned _hasOutstandingRequest : 1;	// 28 = 0x1c
	unsigned _replyContextMayInitiateCall : 1;	// 28 = 0x1c
	BOOL _hasActiveRequest;	// 29 = 0x1d
	NSMutableDictionary *_replies;	// 32 = 0x20
}
@property(readonly, assign) float averagePower;	// G=0x334e8d91; converted property
@property(assign, nonatomic) __weak id<AFAssistantUIService> delegate;	// G=0x334e9825; S=0x334e63e1; @synthesize=_delegate
@property(readonly, assign, nonatomic) BOOL isRecording;	// G=0x334e8d69; 
@property(readonly, assign) float peakPower;	// G=0x334e8da1; converted property
@property(assign, nonatomic) __weak id<AFSpeechDelegate> speechDelegate;	// G=0x334e9845; S=0x334e9865; @synthesize=_speechDelegate
+ (void)_reachabilityDidChange:(id)_reachability;	// 0x334e801d
+ (BOOL)assistantIsEnabled;	// 0x334e7e71
+ (BOOL)assistantIsSupported;	// 0x334e8011
+ (BOOL)assistantIsSupportedForLanguageCode:(id)languageCode error:(id *)error;	// 0x334e7ec9
+ (void)beginMonitoringAvailability;	// 0x334e80a9
+ (void)defrost;	// 0x334e82a1
+ (void)initialize;	// 0x334e6339
+ (BOOL)isAvailable;	// 0x334e8115
+ (void)stopMonitoringAvailability;	// 0x334e81a5
+ (BOOL)userDataSyncNeeded;	// 0x334e8201
- (id)init;	// 0x334e633d
- (void).cxx_destruct;	// 0x334e9879
- (void)_asyncBarrierWithBlock:(id)block;	// 0x334e9b11
- (void)_barrier;	// 0x334e9ad9
- (void)_cancelRequestTimeout;	// 0x334e7afd
- (void)_checkAndSetIsCapturingSpeech:(BOOL)speech;	// 0x334e6421
- (void)_clearAssistantInfoForAccountWithIdentifier:(id)identifier;	// 0x334e9b61
- (void)_clearConnection;	// 0x334e782d
- (id)_connection;	// 0x334e75b9
- (void)_handleMessage:(id)message;	// 0x334e74b9
- (void)_invokeRequestTimeout;	// 0x334e7a55
- (void)_msgDismissAssistant:(id)assistant;	// 0x334e6f7d
- (void)_msgDoCommand:(id)command;	// 0x334e6ba5
- (void)_msgOpenURL:(id)url;	// 0x334e6d45
- (void)_msgReplyMayInitiateCall:(id)call;	// 0x334e7179
- (void)_msgRequestCompleted:(id)completed;	// 0x334e6d15
- (void)_msgRequestError:(id)error;	// 0x334e7041
- (void)_msgSpeechLevelUpdate:(id)update;	// 0x334e71c5
- (void)_msgSpeechRecognitionDidFail:(id)_msgSpeechRecognition;	// 0x334e7409
- (void)_msgSpeechRecognized:(id)recognized;	// 0x334e7349
- (void)_msgSpeechRecordingDidBegin:(id)_msgSpeechRecording;	// 0x334e71b5
- (void)_msgSpeechRecordingDidCancel:(id)_msgSpeechRecording;	// 0x334e72a9
- (void)_msgSpeechRecordingDidEnd:(id)_msgSpeechRecording;	// 0x334e7279
- (void)_msgSpeechRecordingDidFail:(id)_msgSpeechRecording;	// 0x334e72d9
- (void)_msgSpeechRecordingWillBegin:(id)_msgSpeechRecording;	// 0x334e71a5
- (void)_msgStateUpdate:(id)update;	// 0x334e70dd
- (void)_requestDidEnd;	// 0x334e6545
- (void)_requestStateUpdate;	// 0x334e7b39
- (void)_requestWillBeginWithRequestClass:(id)_request logAggregateData:(BOOL)data isSpeechRequest:(BOOL)request;	// 0x334e64ed
- (void)_scheduleRequestTimeout:(double)timeout;	// 0x334e7ac1
- (void)_sendMessage:(id)message withReply:(id)reply;	// 0x334e99f9
- (void)_sendMessage:(id)message withReplySync:(id)replySync;	// 0x334e9a71
- (void)_tellDelegateRequestFailed:(id)failed requestClass:(id)aClass;	// 0x334e65e9
- (void)_tellDelegateRequestFinished;	// 0x334e6585
- (void)_tellDelegateShouldSpeakChanged:(BOOL)_tellDelegate;	// 0x334e667d
- (void)_tellSpeechDelegateDidRecognizeSpeechPhrases:(id)_tellSpeechDelegate correctionIdentifier:(id)identifier;	// 0x334e689d
- (void)_tellSpeechDelegateRecognitionDidFail:(id)_tellSpeechDelegateRecognition;	// 0x334e6b39
- (void)_tellSpeechDelegateRecordingDidBegin;	// 0x334e6735
- (void)_tellSpeechDelegateRecordingDidCancel;	// 0x334e67dd
- (void)_tellSpeechDelegateRecordingDidEnd;	// 0x334e6789
- (void)_tellSpeechDelegateRecordingDidFail:(id)_tellSpeechDelegateRecording;	// 0x334e6831
- (void)_tellSpeechDelegateRecordingWillBegin;	// 0x334e66e1
- (void)_unhandledMessage:(id)message;	// 0x334e7449
- (void)_willCancelRequest;	// 0x334e7d61
- (void)_willCompleteRequest;	// 0x334e7e21
- (void)_willFailRequestWithError:(id)error;	// 0x334e7db1
- (void)_willStartRequestForSpeech:(BOOL)speech;	// 0x334e7cf1
// converted property getter: - (float)averagePower;	// 0x334e8d91
- (void)cancelRequest;	// 0x334e8b41
- (void)cancelSpeech;	// 0x334e88a5
- (void)clearAndSetApplicationContext;	// 0x334e92c1
- (void)clearAndSetApplicationContextWithBulletins:(id)bulletins;	// 0x334e92d5
- (void)clearContext;	// 0x334e9241
- (void)clearUndoStack;	// 0x334e9489
- (void)dealloc;	// 0x334e63a1
// declared property getter: - (id)delegate;	// 0x334e9825
- (id)domainObjectForKey:(id)key;	// 0x334e9509
- (void)endSession;	// 0x334e820d
// declared property getter: - (BOOL)isRecording;	// 0x334e8d69
// converted property getter: - (float)peakPower;	// 0x334e8da1
- (void)preheat;	// 0x334e8369
- (void)redoRequest;	// 0x334e9409
- (BOOL)replyContextMayInitiateCall;	// 0x334e8db1
- (void)rollbackRequest;	// 0x334e8be5
- (void)sendGenericAceCommand:(id)command;	// 0x334e8dc5
- (void)sendGenericAceCommand:(id)command conflictHandler:(id)handler;	// 0x334e8dd9
- (void)sendReplyCommand:(id)command;	// 0x334e9181
// declared property setter: - (void)setDelegate:(id)delegate;	// 0x334e63e1
- (void)setDomainObject:(id)object forKey:(id)key;	// 0x334e9735
- (BOOL)setLanguageCode:(id)code error:(id *)error;	// 0x334e83e9
- (void)setLockState:(BOOL)state screenLocked:(BOOL)locked;	// 0x334e8539
// declared property setter: - (void)setSpeechDelegate:(id)delegate;	// 0x334e9865
- (BOOL)shouldSpeak;	// 0x334e8d7d
// declared property getter: - (id)speechDelegate;	// 0x334e9845
- (void)startRequestWithCorrectedText:(id)correctedText forSpeechIdentifier:(id)speechIdentifier;	// 0x334e8c65
- (void)startRequestWithText:(id)text;	// 0x334e8761
- (void)startRequestWithText:(id)text timeout:(double)timeout;	// 0x334e866d
- (void)startSpeechRequestWithOptions:(id)options;	// 0x334e8791
- (void)startSpeechRequestWithSpeechFileAtURL:(id)url;	// 0x334e98e5
- (void)stopSpeech;	// 0x334e8b2d
- (void)stopSpeechWithOptions:(id)options;	// 0x334e8a3d
- (void)undoRequest;	// 0x334e9389
- (void)updateSpeechOptions:(id)options;	// 0x334e895d
@end

