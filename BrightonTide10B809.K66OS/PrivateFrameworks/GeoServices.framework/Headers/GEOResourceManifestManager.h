/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices
 */

#import "GeoServices-Structs.h"
#import <NSObject.h> // Unknown library
#import "GEOResourceManifestServerProxyDelegate.h"

@class NSLock, NSDictionary, GEOActiveTileGroup, NSHashTable, NSMutableArray, GEOLocalizationRegionsInfo;
@protocol GEOResourceManifestServerProxy;

@interface GEOResourceManifestManager : NSObject <GEOResourceManifestServerProxyDelegate> {
	id<GEOResourceManifestServerProxy> _serverProxy;	// 4 = 0x4
	NSHashTable *_serverProxyObservers;	// 8 = 0x8
	NSMutableArray *_pendingRegionalResourceLoads;	// 12 = 0xc
	GEOActiveTileGroup *_activeTileGroup;	// 16 = 0x10
	NSLock *_activeTileGroupLock;	// 20 = 0x14
	NSDictionary *_resourceNamesToPaths;	// 24 = 0x18
	GEOLocalizationRegionsInfo *_localizationRegionsInfo;	// 28 = 0x1c
	NSLock *_pendingRegionalResourceLoadsLock;	// 32 = 0x20
}
@property(readonly, assign, nonatomic) GEOActiveTileGroup *activeTileGroup;	// G=0x33f500fd; 
@property(assign) unsigned activeTileGroupIdentifier;	// G=0x33fbd631; S=0x33fbd659; converted property
@property(readonly, assign, nonatomic) BOOL hasActiveTileGroup;	// G=0x33f501c5; 
@property(readonly, assign, nonatomic) id<GEOResourceManifestServerProxy> serverProxy;	// G=0x33fbd701; @synthesize=_serverProxy
+ (void)disableServerConnection;	// 0x33fbc2d1
+ (void)setCallerWillStartServer;	// 0x33fbc305
+ (void)setHiDPI:(BOOL)dpi;	// 0x33fbc301
+ (id)sharedManager;	// 0x33f4e045
+ (void)useLocalProxy;	// 0x33fbc2f1
+ (void)useRemoteProxy;	// 0x33fbc2e1
- (id)init;	// 0x33f4e071
- (id)_activeTileSetForKey:(const GEOTileKey *)key;	// 0x33fbc611
- (void)_buildResourceNamesToPaths;	// 0x33f4ff7d
- (id)_listenerForTileKeys:(id)tileKeys acquireLock:(BOOL)lock;	// 0x33f57099
- (void)_localeChanged:(id)changed;	// 0x33fbc4c9
// declared property getter: - (id)activeTileGroup;	// 0x33f500fd
// converted property getter: - (unsigned)activeTileGroupIdentifier;	// 0x33fbd631
- (void)addServerProxyObserver:(id)observer;	// 0x33fbc4f1
- (id)allResourceNames;	// 0x33fbcae1
- (id)authToken;	// 0x33fbc4a9
- (id)baseURLStringForTileKey:(const GEOTileKey *)tileKey;	// 0x33fbc63d
- (void)cancelRegionalResourcesRequest:(id)request;	// 0x33fbcd3d
- (void)closeServerConnection;	// 0x33f56829
- (void)dealloc;	// 0x33fbc359
- (id)detailedDescription;	// 0x33fbd49d
- (void)forceUpdate;	// 0x33fbd6e1
- (void)getResourceManifestWithHandler:(id)handler;	// 0x33fbd611
// declared property getter: - (BOOL)hasActiveTileGroup;	// 0x33f501c5
- (BOOL)hasResourceManifest;	// 0x33fbd5d5
- (BOOL)isAvailableForTileKey:(const GEOTileKey *)tileKey;	// 0x33fbc7d1
- (id)languageForTileKey:(const GEOTileKey *)tileKey;	// 0x33fbc7fd
- (void)loadRegionalResourcesForKeys:(id)keys allowNetwork:(BOOL)network progress:(id)progress finished:(id)finished error:(id)error;	// 0x33f56ec9
- (void)loadRegionalResourcesForKeys:(id)keys progress:(id)progress finished:(id)finished error:(id)error;	// 0x33fbcd11
- (id)localizationURLStringIfNecessaryForTileKey:(const GEOTileKey *)tileKey;	// 0x33fbc699
- (int)mapMatchingTileSetStyle;	// 0x33fbc585
- (unsigned)mapMatchingZoomLevel;	// 0x33fbc589
- (id)multiTileURLStringForTileKey:(const GEOTileKey *)tileKey useStatusCodes:(BOOL *)codes;	// 0x33fbc669
- (void)openServerConnection;	// 0x33f72b81
- (id)pathForResourceWithName:(id)name;	// 0x33f4fd99
- (void)refreshActiveTileGroup;	// 0x33fbd6c1
- (void)removeServerProxyObserver:(id)observer;	// 0x33fbc565
- (void)resetActiveTileGroup;	// 0x33fbd6a1
// declared property getter: - (id)serverProxy;	// 0x33fbd701
- (oneway void)serverProxyDidChangeActiveTileGroup:(id)serverProxy finishedCallback:(id)callback;	// 0x33fbcd85
- (oneway void)serverProxyDidFinishLoadingForList:(id)serverProxy;	// 0x33f58541
- (oneway void)serverProxyDidReceiveError:(id)serverProxy forList:(id)list;	// 0x33fbd151
- (oneway void)serverProxyDidReceiveResourceNames:(id)serverProxy attributions:(id)attributions forKey:(GEOTileKey)key fromList:(id)list;	// 0x33f582c9
// converted property setter: - (void)setActiveTileGroupIdentifier:(unsigned)identifier;	// 0x33fbd659
- (BOOL)supportsTileStyle:(int)style size:(int)size scale:(int)scale;	// 0x33f509b1
- (double)timeToLiveForTileKey:(const GEOTileKey *)tileKey;	// 0x33fbc7a5
- (unsigned)versionForTileKey:(const GEOTileKey *)tileKey;	// 0x33fbc779
@end

