/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

#import "ML3Entity.h"
#import "MusicLibrary-Structs.h"

@class NSArray, NSString, ML3Predicate;

@interface ML3Container : ML3Entity {
}
@property(readonly, assign) NSArray *cloudDisplayOrderingTerms;	// G=0x346de899; 
@property(readonly, assign) NSArray *displayOrderingTerms;	// G=0x346de915; 
@property(readonly, assign) ML3Predicate *dynamicPredicate;	// G=0x346de465; 
@property(readonly, assign, getter=isLimitOrderingDescending) BOOL limitOrderingDescending;	// G=0x346de565; 
@property(readonly, assign) NSArray *limitOrderingTerms;	// G=0x346de755; 
@property(readonly, assign) long long limitValue;	// G=0x346de7d1; 
@property(readonly, assign, getter=isLimitedByCount) BOOL limitedByCount;	// G=0x346de519; 
@property(readonly, assign) NSString *limitingProperty;	// G=0x346de651; 
@property(readonly, assign) ML3Predicate *staticPredicate;	// G=0x346de409; 
+ (void)_insertNewSmartPlaylist:(id)playlist criteriaBlob:(id)blob evaluationOrder:(unsigned long)order limited:(BOOL)limited trackOrder:(unsigned long)order5 distinguishedKind:(int)kind inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x346dd221
+ (id)autoCreatedBuiltInSmartPlaylistsPIDs:(id)smartPlaylistsPIDs;	// 0x346dddf9
+ (BOOL)createMissingBuiltInSmartPlaylists:(id)smartPlaylists;	// 0x346dd64d
+ (id)databaseTable;	// 0x346aaf95
+ (id)defaultOrderingProperties;	// 0x346b04bd
+ (void)deleteAutoCreatedBuiltInSmartPlaylistsPIDs:(id)smartPlaylistsPIDs inLibrary:(id)library;	// 0x346de141
+ (id)extraTablesToDelete;	// 0x346dbd69
+ (id)foreignColumnForProperty:(id)property;	// 0x346dbd4d
+ (id)foreignDatabaseTableForProperty:(id)property;	// 0x346dbd31
+ (BOOL)hasCriterionInCriteriaList:(SearchCriteriaList *)criteriaList forITDBTrackField:(int)itdbtrackField;	// 0x346dce91
+ (void)initialize;	// 0x346a9469
+ (id)joinClausesForProperty:(id)property;	// 0x346aaf0d
+ (id)nextFilepathForPlaylistType:(int)playlistType withPersistentID:(unsigned long long)persistentID inLibrary:(id)library;	// 0x346dbd95
+ (id)persistentIDColumnForTable:(id)table;	// 0x346dbd79
+ (void)populateDynamicContainersInLibrary:(id)library;	// 0x346df645
+ (void)populateDynamicContainersInLibrary:(id)library createBuiltinSmartPlaylists:(BOOL)playlists;	// 0x346df669
+ (void)populateDynamicContainersWithTrackPersistentID:(id)trackPersistentID inLibrary:(id)library;	// 0x346df68d
+ (void)populateDynamicContainersWithTrackPersistentID:(id)trackPersistentID inLibrary:(id)library createBuiltinSmartPlaylists:(BOOL)playlists;	// 0x346df6c5
+ (void)populateSortOrdersOfPropertyValues:(id)propertyValues inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x346dbf81
+ (void)populateStaticItemsOfDynamicContainersInLibrary:(id)library;	// 0x346ded9d
+ (id)predicateForCriteriaList:(SearchCriteriaList *)criteriaList dynamicCriteria:(BOOL)criteria;	// 0x346dcf41
+ (int)revisionTrackingCode;	// 0x346dbd11
+ (id)sectionPropertyForProperty:(id)property;	// 0x346dbd15
+ (BOOL)smartCriteriaCanBeEvaluated:(id)evaluated;	// 0x346dbedd
- (id)initWithDictionary:(id)dictionary inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x346dc1d1
- (void)_accessCurrentSwappedPersisentIDsUsingBlock:(id)block;	// 0x346e0185
- (BOOL)_setSwappedItemPersistentIDs:(const long long *)ids size:(int)size;	// 0x346e013d
- (BOOL)_setSwappedItemPersistentIDs:(const long long *)ids size:(int)size notify:(BOOL)notify;	// 0x346dfe51
- (BOOL)addTrackWithPersistentID:(long long)persistentID;	// 0x346e0ec9
- (BOOL)addTracksWithPersistentIDs:(long long *)persistentIDs count:(unsigned)count;	// 0x346e0ef5
- (BOOL)addTracksWithPersistentIDs:(long long *)persistentIDs count:(unsigned)count notify:(BOOL)notify;	// 0x346e0f19
- (void)bindPopulateStatement:(id)statement withStaticTrackPersistentID:(id)staticTrackPersistentID;	// 0x346ded11
// declared property getter: - (id)cloudDisplayOrderingTerms;	// 0x346de899
- (void)didChangeValueForProperties:(const id *)properties count:(unsigned)count;	// 0x346dcd09
// declared property getter: - (id)displayOrderingTerms;	// 0x346de915
// declared property getter: - (id)dynamicPredicate;	// 0x346de465
- (id)evaluationOrderingTerms;	// 0x346de6d9
- (SearchCriteriaList *)importedCriteriaList;	// 0x346de375
- (BOOL)isCustomContainerOrderingDescending;	// 0x346de605
- (BOOL)isEvaluationOrderingDescending;	// 0x346de4c1
// declared property getter: - (BOOL)isLimitOrderingDescending;	// 0x346de565
// declared property getter: - (BOOL)isLimitedByCount;	// 0x346de519
// declared property getter: - (id)limitOrderingTerms;	// 0x346de755
// declared property getter: - (long long)limitValue;	// 0x346de7d1
// declared property getter: - (id)limitingProperty;	// 0x346de651
- (BOOL)moveTrackFromIndex:(unsigned)index toIndex:(unsigned)index2;	// 0x346e12e5
- (id)populateSQLWithStaticTrackPersistentID:(id)staticTrackPersistentID;	// 0x346deb19
- (BOOL)removeAllTracks;	// 0x346e0161
- (BOOL)removeTracksAtIndexes:(id)indexes;	// 0x346e0d3d
- (BOOL)removeTracksAtIndexes:(id)indexes notify:(BOOL)notify;	// 0x346e0d19
- (BOOL)removeTracksAtIndexes:(id)indexes notify:(BOOL)notify indexesTransformBlock:(id)block;	// 0x346e04f5
- (BOOL)removeTracksWithPersistentIDs:(const long long *)persistentIDs atFilteredIndexes:(id)filteredIndexes;	// 0x346e0d5d
- (BOOL)setContainsTrack:(BOOL)track forPersistentID:(long long)persistentID notify:(BOOL)notify;	// 0x346e0a19
- (BOOL)setTracksWithPersistentIDs:(const long long *)persistentIDs count:(unsigned)count;	// 0x346e1725
- (BOOL)setTracksWithPersistentIDs:(const long long *)persistentIDs count:(unsigned)count notify:(BOOL)notify;	// 0x346e1749
- (BOOL)setTracksWithSwappedPersistentIDData:(id)swappedPersistentIDData;	// 0x346e1ac1
- (BOOL)setValue:(id)value forProperty:(id)property;	// 0x346dc829
// declared property getter: - (id)staticPredicate;	// 0x346de409
@end

