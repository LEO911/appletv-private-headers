/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/OfficeImport.framework/OfficeImport
 */

#import "OfficeImport-Structs.h"
#import "NSCopying.h"
#import <NSObject.h> // Unknown library


@interface NSBezierPathStub : NSObject <NSCopying> {
	int _segmentCount;	// 4 = 0x4
	int _segmentMax;	// 8 = 0x8
	PATHSEGMENT *_head;	// 12 = 0xc
	int _lastSubpathIndex;	// 16 = 0x10
	int _elementCount;	// 20 = 0x14
	float _lineWidth;	// 24 = 0x18
	CGRect _controlPointBounds;	// 28 = 0x1c
	float _miterLimit;	// 44 = 0x2c
	float _flatness;	// 48 = 0x30
	float *_dashedLinePattern;	// 52 = 0x34
	unsigned _dashedLineCount;	// 56 = 0x38
	float _dashedLinePhase;	// 60 = 0x3c
	void *_path;	// 64 = 0x40
	id _private[4];	// 68 = 0x44
	struct {
		unsigned _flags : 8;
		unsigned _pathState : 2;
		unsigned _unused : 22;
	} _bpFlags;	// 84 = 0x54
}
@property(assign) BOOL cachesBezierPath;	// G=0x371e0055; S=0x371e0059; converted property
@property(readonly, assign) CGRect controlPointBounds;	// G=0x371de95d; converted property
@property(readonly, assign) int elementCount;	// G=0x371debc1; converted property
@property(assign) float flatness;	// G=0x371ddd45; S=0x371ddd55; converted property
@property(assign) unsigned lineCapStyle;	// G=0x371ddc89; S=0x371ddc9d; converted property
@property(assign) unsigned lineJoinStyle;	// G=0x371ddcbd; S=0x371ddcd1; converted property
@property(assign) float lineWidth;	// G=0x371ddc69; S=0x371ddc79; converted property
@property(assign) float miterLimit;	// G=0x371ddd25; S=0x371ddd35; converted property
@property(assign) unsigned windingRule;	// G=0x371ddcf1; S=0x371ddd05; converted property
+ (id)bezierPath;	// 0x371dcee1
+ (id)bezierPathWithOvalInRect:(CGRect)rect;	// 0x371dcf59
+ (id)bezierPathWithRect:(CGRect)rect;	// 0x371dcf19
+ (id)bezierPathWithRoundedRect:(CGRect)roundedRect xRadius:(float)radius yRadius:(float)radius3;	// 0x371dcf99
+ (void)clipRect:(CGRect)rect;	// 0x371dd15d
+ (CGContextRef)currentCGContext;	// 0x371dce91
+ (float)defaultFlatness;	// 0x371dd2c9
+ (unsigned)defaultLineCapStyle;	// 0x371dd309
+ (unsigned)defaultLineJoinStyle;	// 0x371dd329
+ (float)defaultLineWidth;	// 0x371dd349
+ (float)defaultMiterLimit;	// 0x371dd2a9
+ (unsigned)defaultWindingRule;	// 0x371dd2e9
+ (void)drawPackedGlyphs:(const char *)glyphs atPoint:(CGPoint)point;	// 0x371dd245
+ (void)drawString:(id)string atPoint:(CGPoint)point withFontName:(id)fontName andHeight:(float)height color:(id)color alignToTop:(BOOL)top currentTransformStruct:(CGAffineTransform)aStruct;	// 0x371dd3a5
+ (void)fillRect:(CGRect)rect;	// 0x371dcfed
+ (float)flatness;	// 0x371e04c9
+ (void)initialize;	// 0x371dcdf9
+ (unsigned)lineCapStyle;	// 0x371e0509
+ (unsigned)lineJoinStyle;	// 0x371e0529
+ (float)lineWidth;	// 0x371e0549
+ (float)miterLimit;	// 0x371e04a9
+ (void)setCurrentCGContext:(CGContextRef)context;	// 0x371dce3d
+ (void)setDefaultFlatness:(float)flatness;	// 0x371dd2b9
+ (void)setDefaultLineCapStyle:(unsigned)style;	// 0x371dd2f9
+ (void)setDefaultLineJoinStyle:(unsigned)style;	// 0x371dd319
+ (void)setDefaultLineWidth:(float)width;	// 0x371dd339
+ (void)setDefaultMiterLimit:(float)limit;	// 0x371dd299
+ (void)setDefaultWindingRule:(unsigned)rule;	// 0x371dd2d9
+ (void)setFlatness:(float)flatness;	// 0x371e04b9
+ (void)setLineCapStyle:(unsigned)style;	// 0x371e04f9
+ (void)setLineJoinStyle:(unsigned)style;	// 0x371e0519
+ (void)setLineWidth:(float)width;	// 0x371e0539
+ (void)setMiterLimit:(float)limit;	// 0x371e0499
+ (void)setWindingRule:(unsigned)rule;	// 0x371e04d9
+ (void)strokeLineFromPoint:(CGPoint)point toPoint:(CGPoint)point2;	// 0x371dd1bd
+ (void)strokeRect:(CGRect)rect;	// 0x371dd04d
+ (unsigned)windingRule;	// 0x371e04e9
- (id)init;	// 0x371dd561
- (id).cxx_construct;	// 0x371e005d
- (void)_addPathSegment:(int)segment point:(CGPoint)point;	// 0x371e0061
- (void)_appendArcSegmentWithCenter:(CGPoint)center radius:(double)radius angle1:(double)a1 angle2:(double)a2;	// 0x371df1d5
- (id)_copyFlattenedPath;	// 0x371de5b9
- (void)_deviceClosePath;	// 0x371e02ed
- (void)_deviceCurveToPoint:(CGPoint)point controlPoint1:(CGPoint)a1 controlPoint2:(CGPoint)a2;	// 0x371e0269
- (void)_deviceLineToPoint:(CGPoint)point;	// 0x371e0219
- (void)_deviceMoveToPoint:(CGPoint)point;	// 0x371e0141
- (void)_doPath;	// 0x371dded1
- (void)_doUserPathWithOp:(unsigned char)op inContext:(CGContextRef)context;	// 0x371e03ad
- (int)_locationOfPoint:(CGPoint)point;	// 0x371dfbbd
- (int)_segmentIndexForElementIndex:(int)elementIndex;	// 0x371dec39
- (void)addClip;	// 0x371de149
- (void)appendBezierPath:(id)path;	// 0x371dee69
- (void)appendBezierPathWithArcFromPoint:(CGPoint)point toPoint:(CGPoint)point2 radius:(float)radius;	// 0x371df619
- (void)appendBezierPathWithArcWithCenter:(CGPoint)center radius:(float)radius startAngle:(float)angle endAngle:(float)angle4;	// 0x371df5d9
- (void)appendBezierPathWithArcWithCenter:(CGPoint)center radius:(float)radius startAngle:(float)angle endAngle:(float)angle4 clockwise:(BOOL)clockwise;	// 0x371df359
- (void)appendBezierPathWithOvalInRect:(CGRect)rect;	// 0x371df07d
- (void)appendBezierPathWithPoints:(CGPoint *)points count:(int)count;	// 0x371df001
- (void)appendBezierPathWithRect:(CGRect)rect;	// 0x371def75
- (void)appendBezierPathWithRoundedRect:(CGRect)roundedRect xRadius:(float)radius yRadius:(float)radius3;	// 0x371df939
- (id)bezierPathByFlatteningPath;	// 0x371de521
- (id)bezierPathByReversingPath;	// 0x371de60d
- (CGRect)bounds;	// 0x371deae5
// converted property getter: - (BOOL)cachesBezierPath;	// 0x371e0055
- (void)closePath;	// 0x371dda59
- (BOOL)containsPoint:(CGPoint)point;	// 0x371dffc5
// converted property getter: - (CGRect)controlPointBounds;	// 0x371de95d
- (id)copyWithZone:(NSZone *)zone;	// 0x371dd7c1
- (CGPoint)currentPoint;	// 0x371de8d9
- (void)curveToPoint:(CGPoint)point controlPoint1:(CGPoint)a1 controlPoint2:(CGPoint)a2;	// 0x371dd9c5
- (void)dealloc;	// 0x371dd6b1
- (id)description;	// 0x371e0559
- (unsigned)elementAtIndex:(int)index;	// 0x371dec25
- (unsigned)elementAtIndex:(int)index associatedPoints:(CGPoint *)points;	// 0x371ded21
// converted property getter: - (int)elementCount;	// 0x371debc1
- (void)fill;	// 0x371de0d1
- (void)finalize;	// 0x371dd739
// converted property getter: - (float)flatness;	// 0x371ddd45
- (void)flattenIntoPath:(id)path;	// 0x371de419
- (void)getLineDash:(float *)dash count:(int *)count phase:(float *)phase;	// 0x371dde4d
- (BOOL)isEmpty;	// 0x371de8c1
- (BOOL)isHitByPath:(id)path;	// 0x371e0045
- (BOOL)isHitByPoint:(CGPoint)point;	// 0x371e0029
- (BOOL)isHitByRect:(CGRect)rect;	// 0x371e0041
- (BOOL)isStrokeHitByPath:(id)path;	// 0x371e0051
- (BOOL)isStrokeHitByPoint:(CGPoint)point;	// 0x371e0049
- (BOOL)isStrokeHitByRect:(CGRect)rect;	// 0x371e004d
// converted property getter: - (unsigned)lineCapStyle;	// 0x371ddc89
// converted property getter: - (unsigned)lineJoinStyle;	// 0x371ddcbd
- (void)lineToPoint:(CGPoint)point;	// 0x371dd955
// converted property getter: - (float)lineWidth;	// 0x371ddc69
// converted property getter: - (float)miterLimit;	// 0x371ddd25
- (void)moveToPoint:(CGPoint)point;	// 0x371dd945
- (void)relativeCurveToPoint:(CGPoint)point controlPoint1:(CGPoint)a1 controlPoint2:(CGPoint)a2;	// 0x371ddbb5
- (void)relativeLineToPoint:(CGPoint)point;	// 0x371ddb4d
- (void)relativeMoveToPoint:(CGPoint)point;	// 0x371ddae5
- (void)removeAllPoints;	// 0x371dda69
- (void)setAssociatedPoints:(CGPoint *)points atIndex:(int)index;	// 0x371dedb1
// converted property setter: - (void)setCachesBezierPath:(BOOL)path;	// 0x371e0059
- (void)setClip;	// 0x371de1c9
// converted property setter: - (void)setFlatness:(float)flatness;	// 0x371ddd55
// converted property setter: - (void)setLineCapStyle:(unsigned)style;	// 0x371ddc9d
- (void)setLineDash:(const float *)dash count:(int)count phase:(float)phase;	// 0x371ddd65
// converted property setter: - (void)setLineJoinStyle:(unsigned)style;	// 0x371ddcd1
// converted property setter: - (void)setLineWidth:(float)width;	// 0x371ddc79
// converted property setter: - (void)setMiterLimit:(float)limit;	// 0x371ddd35
// converted property setter: - (void)setWindingRule:(unsigned)rule;	// 0x371ddd05
- (void)stroke;	// 0x371ddfe5
- (void)subdivideBezierWithFlatness:(float)flatness startPoint:(CGPoint)point controlPoint1:(CGPoint)a1 controlPoint2:(CGPoint)a2 endPoint:(CGPoint)point5;	// 0x371de221
- (void)transformUsingAffineTransform:(id)transform;	// 0x371de801
// converted property getter: - (unsigned)windingRule;	// 0x371ddcf1
@end

