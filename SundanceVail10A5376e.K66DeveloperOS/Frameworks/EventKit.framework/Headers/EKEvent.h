/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/EventKit.framework/EventKit
 */

#import "EventKit-Structs.h"
#import "EKCalendarItem.h"

@class NSString, EKCalendarDate, NSNumber, NSDate, EKParticipant;

@interface EKEvent : EKCalendarItem {
	EKCalendarDate *_occurrenceStartDate;	// 40 = 0x28
	EKCalendarDate *_occurrenceEndDate;	// 44 = 0x2c
	BOOL _occurrenceIsAllDay;	// 48 = 0x30
	EKCalendarDate *_originalOccurrenceStartDate;	// 52 = 0x34
	EKCalendarDate *_originalOccurrenceEndDate;	// 56 = 0x38
	NSNumber *_originalOccurrenceIsAllDay;	// 60 = 0x3c
}
@property(assign, nonatomic, getter=isAllDay) BOOL allDay;	// G=0x367a8c19; S=0x367b2d89; 
@property(assign, nonatomic) int availability;	// G=0x367b0b09; S=0x367f2015; 
@property(readonly, assign, nonatomic) int birthdayPersonID;	// G=0x367a8c29; 
@property(copy, nonatomic) NSDate *endDate;	// G=0x367aa095; S=0x367b3349; 
@property(readonly, assign, nonatomic) NSString *eventIdentifier;	// G=0x367aebfd; 
@property(assign) unsigned invitationStatus;	// G=0x367f20b5; S=0x367f20e9; converted property
@property(readonly, assign, nonatomic) BOOL isDetached;	// G=0x367b1f85; 
@property(assign) unsigned modifiedProperties;	// G=0x367f1c39; S=0x367f1c6d; converted property
@property(assign) BOOL needsOccurrenceCacheUpdate;	// G=0x367f1cb1; S=0x367f1cd5; converted property
@property(copy, nonatomic) EKCalendarDate *occurrenceEndDate;	// G=0x367aa0bd; S=0x367aa8b9; @synthesize=_occurrenceEndDate
@property(assign, nonatomic) BOOL occurrenceIsAllDay;	// G=0x367f58f9; S=0x367a6fd5; @synthesize=_occurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *occurrenceStartDate;	// G=0x367a9751; S=0x367a6e61; @synthesize=_occurrenceStartDate
@property(readonly, assign, nonatomic) EKParticipant *organizer;	// G=0x367aab91; 
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate;	// G=0x367b2d4d; S=0x367b328d; @synthesize=_originalOccurrenceEndDate
@property(copy, nonatomic) NSNumber *originalOccurrenceIsAllDay;	// G=0x367b2d75; S=0x367b1341; @synthesize=_originalOccurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate;	// G=0x367b2d29; S=0x367b327d; @synthesize=_originalOccurrenceStartDate
@property(assign) int participationStatus;	// G=0x367aaea5; S=0x367f1d19; converted property
@property(retain) id recurrenceRule;	// G=0x367f1f65; S=0x367f1fb1; converted property
@property(retain) id responseComment;	// G=0x367f207d; S=0x367f2099; converted property
@property(copy, nonatomic) NSDate *startDate;	// G=0x367aa075; S=0x367b3051; 
@property(readonly, assign, nonatomic) int status;	// G=0x367a9bbd; 
+ (id)eventWithEventStore:(id)eventStore;	// 0x367b38c9
- (id)init;	// 0x367f1725
- (id)initWithEventStore:(id)eventStore;	// 0x367b0c99
- (id)initWithPersistentObject:(id)persistentObject;	// 0x367f1761
- (id)initWithPersistentObject:(id)persistentObject occurrenceDate:(id)date;	// 0x367a6ba9
- (BOOL)_cancelWithSpan:(int)span error:(id *)error;	// 0x367f4a99
- (BOOL)_checkStartDateConstraintAgainstDate:(XXStruct_lQVxyC)date timeZone:(id)zone error:(id *)error;	// 0x367b5e45
- (id)_dateForNextOccurrence;	// 0x367f2bd1
- (void)_deleteThisOccurrence;	// 0x367f4111
- (BOOL)_deleteWithSpan:(int)span error:(id *)error;	// 0x367f3f71
- (void)_detachWithStartDate:(id)startDate newStartDate:(id)date future:(BOOL)future;	// 0x367f4e45
- (id)_effectiveTimeZone;	// 0x367b329d
- (XXStruct_lQVxyC)_gregorianDateCorrectedForTimeZoneFromCalendarDate:(id)calendarDate orNSDate:(id)date;	// 0x367abacd
- (BOOL)_isAlarmAcknowledgedPropertyDirty;	// 0x367b594d
- (BOOL)_isAllDay;	// 0x367a6e81
- (BOOL)_isInitialOccurrenceDate:(id)date;	// 0x367f4c21
- (BOOL)_occurrenceExistsOnDate:(double)date timeZone:(id)zone;	// 0x367f3b65
- (int)_parentParticipationStatus;	// 0x367f1ed5
- (id)_persistentEvent;	// 0x367a8c51
- (void)_sendModifiedNote;	// 0x367f19ed
- (BOOL)_shouldCancelInsteadOfDeleteWithSpan:(int)span;	// 0x367f3db9
- (BOOL)_shouldDeclineInsteadOfDelete;	// 0x367f3ea5
- (BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(int)recurrenceInterval;	// 0x367f2f39
- (BOOL)_validateDatesAndRecurrencesGivenSpan:(int)span error:(id *)error;	// 0x367b5a4d
- (BOOL)_validateDurationConstrainedToRecurrenceInterval;	// 0x367f2d3d
- (int)alarmCount;	// 0x367f1f3d
- (BOOL)allowsAlarmModifications;	// 0x367f2679
- (BOOL)allowsCalendarModifications;	// 0x367f24ed
- (BOOL)allowsRecurrenceModifications;	// 0x367b1efd
- (id)attachments;	// 0x367af049
- (int)attendeeCount;	// 0x367f1f15
- (id)attendees;	// 0x367af721
// declared property getter: - (int)availability;	// 0x367b0b09
// declared property getter: - (int)birthdayPersonID;	// 0x367a8c29
- (id)birthdayTitleWithAddressBook:(void *)addressBook;	// 0x367a8c7d
- (BOOL)canBeRespondedTo;	// 0x367b05f1
- (BOOL)canDetachSingleOccurrence;	// 0x367f2589
- (BOOL)canMoveToCalendar:(id)calendar fromCalendar:(id)calendar2 error:(id *)error;	// 0x367f22b5
- (BOOL)canSetAvailability;	// 0x367b0abd
- (void)clearInvitationStatus;	// 0x367f212d
- (BOOL)commitWithSpan:(int)span error:(id *)error;	// 0x367b61a1
- (id)committedValueForKey:(id)key;	// 0x367b1759
- (int)compareStartDateWithEvent:(id)event;	// 0x367b375d
- (BOOL)dateChanged;	// 0x367f2161
- (void)dealloc;	// 0x367ae279
- (id)description;	// 0x367f26c1
- (void)didCommit;	// 0x367ba669
- (id)dirtyPropertiesToSkip;	// 0x367f2a6d
- (double)duration;	// 0x367f1a31
- (id)endCalendarDate;	// 0x367aae95
// declared property getter: - (id)endDate;	// 0x367aa095
- (XXStruct_lQVxyC)endDateGr;	// 0x367b0941
- (XXStruct_lQVxyC)endDatePinnedForAllDay;	// 0x367f1bc5
// declared property getter: - (id)eventIdentifier;	// 0x367aebfd
- (id)eventStore;	// 0x367a9a61
- (id)exportToICS;	// 0x367f18a5
- (id)externalId;	// 0x367f25fd
- (id)externalURI;	// 0x367f1775
- (id)externalURL;	// 0x367f1785
- (BOOL)hasSelfAttendee;	// 0x367f264d
- (unsigned)hash;	// 0x367a96f5
- (id)initialEndDate;	// 0x367f1ae5
- (id)initialStartDate;	// 0x367f1a89
// converted property getter: - (unsigned)invitationStatus;	// 0x367f20b5
// declared property getter: - (BOOL)isAllDay;	// 0x367a8c19
- (BOOL)isAllDayDirty;	// 0x367f192d
// declared property getter: - (BOOL)isDetached;	// 0x367b1f85
- (BOOL)isDirtyIgnoringCalendar;	// 0x367f194d
- (BOOL)isEndDateDirty;	// 0x367f190d
- (BOOL)isEqual:(id)equal;	// 0x367a9765
- (BOOL)isStartDateDirty;	// 0x367f18ed
- (BOOL)isStatusDirty;	// 0x367f18cd
- (BOOL)isTentative;	// 0x367f2211
- (BOOL)locationChanged;	// 0x367f21e5
// converted property getter: - (unsigned)modifiedProperties;	// 0x367f1c39
// converted property getter: - (BOOL)needsOccurrenceCacheUpdate;	// 0x367f1cb1
- (id)occurrenceDate;	// 0x367b1ec5
// declared property getter: - (id)occurrenceEndDate;	// 0x367aa0bd
// declared property getter: - (BOOL)occurrenceIsAllDay;	// 0x367f58f9
// declared property getter: - (id)occurrenceStartDate;	// 0x367a9751
// declared property getter: - (id)organizer;	// 0x367aab91
// declared property getter: - (id)originalOccurrenceEndDate;	// 0x367b2d4d
// declared property getter: - (id)originalOccurrenceIsAllDay;	// 0x367b2d75
// declared property getter: - (id)originalOccurrenceStartDate;	// 0x367b2d29
// converted property getter: - (int)participationStatus;	// 0x367aaea5
- (int)pendingParticipationStatus;	// 0x367f25d5
// converted property getter: - (id)recurrenceRule;	// 0x367f1f65
- (BOOL)refresh;	// 0x367f2801
- (BOOL)removeWithSpan:(int)span error:(id *)error;	// 0x367f4d0d
- (BOOL)requiresDetach;	// 0x367b4e25
// converted property getter: - (id)responseComment;	// 0x367f207d
- (BOOL)responseMustApplyToAll;	// 0x367f2561
- (void)revert;	// 0x367f2ac5
- (void)rollback;	// 0x367b27f9
// declared property setter: - (void)setAllDay:(BOOL)day;	// 0x367b2d89
// declared property setter: - (void)setAvailability:(int)availability;	// 0x367f2015
// declared property setter: - (void)setEndDate:(id)date;	// 0x367b3349
// converted property setter: - (void)setInvitationStatus:(unsigned)status;	// 0x367f20e9
// converted property setter: - (void)setModifiedProperties:(unsigned)properties;	// 0x367f1c6d
// converted property setter: - (void)setNeedsOccurrenceCacheUpdate:(BOOL)update;	// 0x367f1cd5
// declared property setter: - (void)setOccurrenceEndDate:(id)date;	// 0x367aa8b9
// declared property setter: - (void)setOccurrenceIsAllDay:(BOOL)day;	// 0x367a6fd5
// declared property setter: - (void)setOccurrenceStartDate:(id)date;	// 0x367a6e61
// declared property setter: - (void)setOriginalOccurrenceEndDate:(id)date;	// 0x367b328d
// declared property setter: - (void)setOriginalOccurrenceIsAllDay:(id)day;	// 0x367b1341
// declared property setter: - (void)setOriginalOccurrenceStartDate:(id)date;	// 0x367b327d
// converted property setter: - (void)setParticipationStatus:(int)status;	// 0x367f1d19
// converted property setter: - (void)setRecurrenceRule:(id)rule;	// 0x367f1fb1
// converted property setter: - (void)setResponseComment:(id)comment;	// 0x367f2099
// declared property setter: - (void)setStartDate:(id)date;	// 0x367b3051
- (void)setTimeZone:(id)zone;	// 0x367b1351
- (id)startCalendarDate;	// 0x367a8c09
// declared property getter: - (id)startDate;	// 0x367aa075
- (XXStruct_lQVxyC)startDateGr;	// 0x367aba71
- (XXStruct_lQVxyC)startDatePinnedForAllDay;	// 0x367f1b5d
// declared property getter: - (int)status;	// 0x367a9bbd
- (BOOL)timeChanged;	// 0x367f218d
- (BOOL)titleChanged;	// 0x367f21b9
- (id)uniqueId;	// 0x367f2625
- (BOOL)validateWithSpan:(int)span error:(id *)error;	// 0x367b5045
@end

