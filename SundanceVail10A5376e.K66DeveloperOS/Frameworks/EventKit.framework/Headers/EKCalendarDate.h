/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/EventKit.framework/EventKit
 */

#import "EventKit-Structs.h"
#import <NSObject.h> // Unknown library
#import "NSCopying.h"
#import "NSMutableCopying.h"

@class EKTimeZone;

@interface EKCalendarDate : NSObject <NSCopying, NSMutableCopying> {
	XXStruct_lQVxyC _dateGr;	// 4 = 0x4
	double _dateAbs;	// 20 = 0x14
	EKTimeZone *_timeZone;	// 28 = 0x1c
	unsigned _flags;	// 32 = 0x20
}
@property(readonly, retain) EKTimeZone *timeZone;	// G=0x367b2f9d; converted property
+ (id)calendarDateWithAbsoluteTime:(double)absoluteTime timeZone:(id)zone;	// 0x367a56b9
+ (id)calendarDateWithDate:(id)date timeZone:(id)zone;	// 0x367a6dc9
+ (id)calendarDateWithDateComponents:(id)dateComponents timeZone:(id)zone;	// 0x367a36bd
+ (id)calendarDateWithGregorianDate:(XXStruct_lQVxyC)gregorianDate timeZone:(id)zone;	// 0x367b39a1
- (id)initWithAbsoluteTime:(double)absoluteTime internalTimeZone:(id)zone;	// 0x3680b60d
- (id)initWithAbsoluteTime:(double)absoluteTime timeZone:(id)zone;	// 0x367a5701
- (id)initWithDate:(id)date timeZone:(id)zone;	// 0x367a6e0d
- (id)initWithDateComponents:(id)dateComponents timeZone:(id)zone;	// 0x367a36fd
- (id)initWithGregorianDate:(XXStruct_lQVxyC)gregorianDate internalTimeZone:(id)zone;	// 0x367a4dd9
- (id)initWithGregorianDate:(XXStruct_lQVxyC)gregorianDate timeZone:(id)zone;	// 0x367b39f5
- (double)absoluteTime;	// 0x367a4fa5
- (id)calendarDateByAddingDays:(int)days;	// 0x367a4261
- (id)calendarDateByAddingGregorianUnits:(XXStruct_mY3THC)units;	// 0x367a4291
- (id)calendarDateByAddingWeeks:(int)weeks;	// 0x3680b9b5
- (id)calendarDateForDay;	// 0x367a40e1
- (id)calendarDateForEndOfDay;	// 0x367a4e71
- (id)calendarDateForEndOfMonth;	// 0x367ab499
- (id)calendarDateForEndOfWeekWithWeekStart:(unsigned)weekStart;	// 0x367ab5d5
- (id)calendarDateForMonth;	// 0x367ab1ed
- (id)calendarDateForWeekWithWeekStart:(unsigned)weekStart;	// 0x367ab2d1
- (id)calendarDateForWeekWithWeekStart:(unsigned)weekStart daysSinceWeekStart:(int *)start;	// 0x367ab2e5
- (id)calendarDateForYear;	// 0x3680bd8d
- (id)calendarDateInTimeZone:(id)timeZone;	// 0x3680b9e5
- (id)calendarDateWithDate:(id)date;	// 0x3680ba41
- (int)compare:(id)compare;	// 0x367b379d
- (id)components;	// 0x3680b839
- (id)copyWithZone:(NSZone *)zone;	// 0x367a6e71
- (id)date;	// 0x367a4f69
- (unsigned)day;	// 0x3680bb81
- (unsigned)dayOfWeek;	// 0x3680bc61
- (unsigned)dayOfYear;	// 0x3680bc91
- (unsigned)daysInMonth;	// 0x367ab5a1
- (unsigned)daysInYear;	// 0x3680bcf5
- (void)dealloc;	// 0x367a57bd
- (id)description;	// 0x3680b72d
- (XXStruct_mY3THC)differenceAsGregorianUnits:(id)units flags:(unsigned long)flags;	// 0x367aa44d
- (int)differenceInDays:(id)days;	// 0x367ab1b1
- (int)differenceInMonths:(id)months;	// 0x3680babd
- (int)differenceInYears:(id)years;	// 0x3680ba81
- (id)earlierDate:(id)date;	// 0x3680be7d
- (XXStruct_lQVxyC)gregorianDate;	// 0x367a41bd
- (unsigned)hour;	// 0x3680bbb5
- (BOOL)isEqual:(id)equal;	// 0x367b36dd
- (id)laterDate:(id)date;	// 0x3680bec5
- (unsigned)minute;	// 0x3680bbe9
- (unsigned)month;	// 0x3680bb4d
- (id)mutableCopyWithZone:(NSZone *)zone;	// 0x3680b689
- (double)second;	// 0x3680bc21
- (int)secondsFromGMT;	// 0x3680b975
// converted property getter: - (id)timeZone;	// 0x367b2f9d
- (unsigned)weekOfYear;	// 0x3680bcc1
- (unsigned)weeksInYear;	// 0x3680bd3d
- (unsigned)year;	// 0x3680bb1d
@end

