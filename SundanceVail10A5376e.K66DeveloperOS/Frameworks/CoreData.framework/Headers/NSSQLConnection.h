/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/CoreData.framework/CoreData
 */

#import "CoreData-Structs.h"
#import <NSObject.h> // Unknown library

@class NSArray, NSSQLAdapter, NSSQLStatement;

@interface NSSQLConnection : NSObject {
	NSSQLAdapter *_adapter;	// 4 = 0x4
	BOOL _transactionIsOpen;	// 8 = 0x8
	BOOL _useSyntaxColoredLogging;	// 9 = 0x9
	int _debug;	// 12 = 0xc
	NSSQLStatement *_sqlStatement;	// 16 = 0x10
	NSArray *_columnsToFetch;	// 20 = 0x14
	NSArray *_metadataColumns;	// 24 = 0x18
}
@property(readonly, retain) NSSQLAdapter *adapter;	// G=0x35be36d5; converted property
@property(retain) NSArray *columnsToFetch;	// G=0x35be4e3d; S=0x35be4e5d; converted property
@property(readonly, retain) NSArray *metadataColumns;	// G=0x35be4ea1; converted property
@property(readonly, retain) NSSQLStatement *sqlStatement;	// G=0x35be47f1; converted property
+ (void)initialize;	// 0x35be0cdd
- (id)initWithAdapter:(id)adapter;	// 0x35be0f6d
- (void)_forceDisconnectOnError;	// 0x35c76ccd
- (void)_performPostSaveTasks;	// 0x35c784c1
- (void)_raiseOptimisticLockingExceptionWithReason:(id)reason;	// 0x35c76a89
// converted property getter: - (id)adapter;	// 0x35be36d5
- (void)addPeerRange:(id)range;	// 0x35c78561
- (void)addPeerRangeForPeerID:(id)peerID entityName:(id)name rangeStart:(id)start rangeEnd:(id)end peerRangeStart:(id)start5 peerRangeEnd:(id)end6;	// 0x35c78595
- (id)allPeerRanges;	// 0x35c785c9
- (void)awake;	// 0x35c76c6d
- (void)beginTransaction;	// 0x35c76b9d
- (BOOL)canConnect;	// 0x35c76df1
// converted property getter: - (id)columnsToFetch;	// 0x35be4e3d
- (void)commitTransaction;	// 0x35c76bd1
- (void)connect;	// 0x35c76c39
- (void)createIndexesForEntity:(id)entity;	// 0x35c77501
- (void)createManyToManyTablesForEntity:(id)entity;	// 0x35c77409
- (id)createMapOfEntityNameToPKMaxForEntities:(id)entities;	// 0x35c78665
- (id)createMapOfEntityNameToPKMaxForEntitiesFromPKTable:(id)pktable;	// 0x35c78631
- (id)createMapOfEntityNameToPKMaxForEntitiesFromUBRangeTable:(id)ubrangeTable;	// 0x35c785fd
- (void)createMetadata;	// 0x35c77b25
- (void)createPrimaryKeyTableForModel:(id)model knownEmpty:(BOOL)empty;	// 0x35c783a5
- (void)createSchema;	// 0x35c77bf9
- (void)createTableForEntity:(id)entity;	// 0x35c77395
- (void)createTablesForEntities:(id)entities;	// 0x35c77a85
- (BOOL)databaseIsEmpty;	// 0x35c76e25
- (void)dealloc;	// 0x35c76b05
- (void)deleteCorrelation:(id)correlation;	// 0x35c76f29
- (void)deleteRow:(id)row;	// 0x35c76f91
- (id)describeResults;	// 0x35c770d9
- (void)didCreateSchema;	// 0x35c77bf5
- (void)disconnect;	// 0x35c76c75
- (void)endFetch;	// 0x35c77175
- (void)endPrimaryKeyGeneration;	// 0x35c7836d
- (void)execute;	// 0x35c76ff9
- (long long)fetchMaxPrimaryKeyForEntity:(id)entity;	// 0x35c77f25
- (id)fetchMetadata;	// 0x35be31f5
- (int)fetchResultSet:(void *)set usingFetchPlan:(id)plan;	// 0x35c77141
- (id)fetchTableCreationSQL;	// 0x35c77f8d
- (id)fetchTableNames;	// 0x35c77f59
- (id)fetchUbiquityKnowledgeVector;	// 0x35c784c5
- (void)finalize;	// 0x35c76ac5
- (void)forceTransactionClosed;	// 0x35c76cb9
- (long long)generatePrimaryKeysForEntity:(id)entity batch:(unsigned)batch;	// 0x35c78361
- (BOOL)hasMetadataTable;	// 0x35c77fc1
- (BOOL)hasOpenTransaction;	// 0x35c76ca9
- (BOOL)hasPrimaryKeyTable;	// 0x35c78371
- (void)insertCorrelation:(id)correlation;	// 0x35c76ec1
- (void)insertRow:(id)row;	// 0x35c76e8d
- (BOOL)isFetchInProgress;	// 0x35c770a5
- (BOOL)isOpen;	// 0x35c76e59
// converted property getter: - (id)metadataColumns;	// 0x35be4ea1
- (id)newFetchedArray;	// 0x35c7710d
- (void)performAdapterOperation:(id)operation;	// 0x35c771a9
- (void)performAdapterOperations:(id)operations;	// 0x35c772dd
- (void)prepareAndExecuteSQLStatement:(id)statement;	// 0x35c77059
- (void)prepareForPrimaryKeyGeneration;	// 0x35c78369
- (void)prepareSQLStatement:(id)statement;	// 0x35be3e7d
- (CFArrayRef)rawIntegerRowsForSQL:(id)sql;	// 0x35c77ef1
- (void)releaseSQLStatement;	// 0x35be5d49
- (void)resetSQLStatement;	// 0x35c7702d
- (void)rollbackTransaction;	// 0x35c76c05
- (void)saveMetadata:(id)metadata;	// 0x35c77ff5
- (void)selectAttributes:(id)attributes fetchRequest:(id)request lock:(BOOL)lock entity:(id)entity;	// 0x35c76fc5
// converted property setter: - (void)setColumnsToFetch:(id)fetch;	// 0x35be4e5d
- (void)setExclusiveLockingMode:(BOOL)mode;	// 0x35c770a1
- (void)setUbiquityTableValue:(id)value forKey:(id)key;	// 0x35c78699
- (void)sleep;	// 0x35c76c71
// converted property getter: - (id)sqlStatement;	// 0x35be47f1
- (void)transactionDidBegin;	// 0x35c76cdd
- (void)transactionDidCommit;	// 0x35c76d39
- (void)transactionDidRollback;	// 0x35c76d95
- (id)ubiquityTableKeysAndValues;	// 0x35c786cd
- (id)ubiquityTableValueForKey:(id)key;	// 0x35c78701
- (void)updateCorrelation:(id)correlation;	// 0x35c76ef5
- (void)updateRow:(id)row;	// 0x35c76f5d
- (void)updateUbiquityKnowledgeForPeerWithID:(id)anId andTransactionNumber:(id)number;	// 0x35c7852d
- (void)updateUbiquityKnowledgeVector:(id)vector;	// 0x35c784f9
- (void)willCreateSchema;	// 0x35c77bf1
@end

