/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/EventKit.framework/EventKit
 */

#import "EKCalendarItem.h"
#import "EventKit-Structs.h"

@class EKRecurrenceRule, NSString, EKParticipant, NSNumber, NSDate, EKCalendarDate;

@interface EKEvent : EKCalendarItem {
@private
	EKCalendarDate *_occurrenceStartDate;	// 4 = 0x4
	EKCalendarDate *_occurrenceEndDate;	// 8 = 0x8
	BOOL _occurrenceIsAllDay;	// 12 = 0xc
	EKCalendarDate *_originalOccurrenceStartDate;	// 16 = 0x10
	EKCalendarDate *_originalOccurrenceEndDate;	// 20 = 0x14
	NSNumber *_originalOccurrenceIsAllDay;	// 24 = 0x18
}
@property(assign, nonatomic, getter=isAllDay) BOOL allDay;	// G=0x32750409; S=0x32759d89; 
@property(assign, nonatomic) int availability;	// G=0x32793bd9; S=0x32793c2d; 
@property(readonly, assign, nonatomic) int birthdayPersonID;	// G=0x32793ab1; 
@property(copy, nonatomic) NSDate *endDate;	// G=0x32750645; S=0x3275a2f5; 
@property(readonly, assign, nonatomic) NSString *eventIdentifier;	// G=0x32757c21; 
@property(readonly, assign, nonatomic) BOOL isDetached;	// G=0x32759bb1; 
@property(assign) unsigned modifiedProperties;	// G=0x32793859; S=0x3279388d; converted property
@property(assign) BOOL needsOccurrenceCacheUpdate;	// G=0x327938d1; S=0x327938f5; converted property
@property(copy, nonatomic) EKCalendarDate *occurrenceEndDate;	// G=0x3274fc91; S=0x327503e5; @synthesize=_occurrenceEndDate
@property(assign, nonatomic) BOOL occurrenceIsAllDay;	// G=0x32796279; S=0x3274f735; @synthesize=_occurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *occurrenceStartDate;	// G=0x327503d5; S=0x3274f6c1; @synthesize=_occurrenceStartDate
@property(readonly, assign, nonatomic) EKParticipant *organizer;	// G=0x32757de1; 
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate;	// G=0x3275ab9d; S=0x3275a229; @synthesize=_originalOccurrenceEndDate
@property(copy, nonatomic) NSNumber *originalOccurrenceIsAllDay;	// G=0x3275abc9; S=0x32758cd5; @synthesize=_originalOccurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate;	// G=0x3275ab79; S=0x3275a205; @synthesize=_originalOccurrenceStartDate
@property(assign) int participationStatus;	// G=0x3275852d; S=0x32793939; converted property
@property(assign) unsigned readState;	// G=0x32758629; S=0x32793cc9; converted property
@property(retain, nonatomic) EKRecurrenceRule *recurrenceRule;	// G=0x32793b29; S=0x32793b75; 
@property(retain) id responseComment;	// G=0x32793c91; S=0x32793cad; converted property
@property(copy, nonatomic) NSDate *startDate;	// G=0x32750625; S=0x3275a049; 
@property(readonly, assign, nonatomic) int status;	// G=0x32751f11; 
+ (id)eventWithEventStore:(id)eventStore;	// 0x3275b369
- (id)init;	// 0x32793409
- (id)initWithEventStore:(id)eventStore;	// 0x32758679
- (id)initWithPersistentObject:(id)persistentObject;	// 0x32793445
- (id)initWithPersistentObject:(id)persistentObject occurrenceDate:(id)date;	// 0x3274f1d5
- (BOOL)_cancelWithSpan:(int)span error:(id *)error;	// 0x3279557d
- (BOOL)_checkStartDateConstraintAgainstDate:(XXStruct_lQVxyC)date timeZone:(id)zone error:(id *)error;	// 0x3275e2a9
- (BOOL)_deleteWithSpan:(int)span error:(id *)error;	// 0x32764209
- (void)_detachWithStartDate:(id)startDate newStartDate:(id)date future:(BOOL)future;	// 0x32795701
- (id)_effectiveTimeZone;	// 0x3275a24d
- (BOOL)_isAllDay;	// 0x3274f6e5
- (BOOL)_isInitialOccurrenceDate:(id)date;	// 0x32764025
- (BOOL)_occurrenceExistsOnDate:(double)date timeZone:(id)zone;	// 0x32795341
- (int)_parentParticipationStatus;	// 0x32793a71
- (id)_persistentEvent;	// 0x3274fd4d
- (void)_sendModifiedNote;	// 0x3275b2d5
- (BOOL)_shouldCancelInsteadOfDeleteWithSpan:(int)span;	// 0x32764109
- (BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(int)recurrenceInterval;	// 0x3279464d
- (BOOL)_validateDatesAndRecurrencesGivenSpan:(int)span error:(id *)error;	// 0x3275dea5
- (BOOL)_validateDurationConstrainedToRecurrenceInterval;	// 0x3279448d
- (int)alarmCount;	// 0x32793b01
- (BOOL)allowsAlarmModifications;	// 0x3275e3a5
- (BOOL)allowsCalendarModifications;	// 0x32794011
- (BOOL)allowsRecurrenceModifications;	// 0x32759b2d
- (id)attachments;	// 0x32757ced
- (int)attendeeCount;	// 0x32793ad9
- (id)attendees;	// 0x32757e81
// declared property getter: - (int)availability;	// 0x32793bd9
// declared property getter: - (int)birthdayPersonID;	// 0x32793ab1
- (id)birthdayTitleWithAddressBook:(void *)addressBook;	// 0x327936a1
- (BOOL)canBeRespondedTo;	// 0x327582a9
- (BOOL)canDetachSingleOccurrence;	// 0x327940ad
- (BOOL)canMoveToCalendar:(id)calendar fromCalendar:(id)calendar2 error:(id *)error;	// 0x32793de5
- (BOOL)canSetAvailability;	// 0x3279416d
- (void)clearReadState;	// 0x32793d0d
- (BOOL)commitWithSpan:(int)span error:(id *)error;	// 0x3275e4d5
- (id)committedValueForKey:(id)key;	// 0x327592a1
- (int)compareStartDateWithEvent:(id)event;	// 0x3275059d
- (void)dealloc;	// 0x32758e79
- (id)description;	// 0x327941e9
- (void)didCommit;	// 0x32762681
- (id)dirtyPropertiesToSkip;	// 0x32794329
- (double)duration;	// 0x32753361
- (id)endCalendarDate;	// 0x3274fc81
// declared property getter: - (id)endDate;	// 0x32750645
- (XXStruct_lQVxyC)endDateGr;	// 0x327532d1
- (XXStruct_lQVxyC)endDatePinnedForAllDay;	// 0x327937e5
// declared property getter: - (id)eventIdentifier;	// 0x32757c21
- (id)eventStore;	// 0x32752171
- (id)exportToICS;	// 0x32793579
- (id)externalId;	// 0x3279411d
- (id)externalURL;	// 0x32793459
- (BOOL)hasSelfAttendee;	// 0x327941b9
- (unsigned)hash;	// 0x32750419
- (id)initialEndDate;	// 0x32793705
- (id)initialStartDate;	// 0x327936b1
// declared property getter: - (BOOL)isAllDay;	// 0x32750409
// declared property getter: - (BOOL)isDetached;	// 0x32759bb1
- (BOOL)isDirtyIgnoringCalendar;	// 0x32793601
- (BOOL)isEndDateDirty;	// 0x327935e1
- (BOOL)isEqual:(id)equal;	// 0x327504c5
- (BOOL)isStartDateDirty;	// 0x327935c1
- (BOOL)isStatusDirty;	// 0x327935a1
- (BOOL)isTentative;	// 0x32793d41
// converted property getter: - (unsigned)modifiedProperties;	// 0x32793859
// converted property getter: - (BOOL)needsOccurrenceCacheUpdate;	// 0x327938d1
- (id)occurrenceDate;	// 0x327599f1
// declared property getter: - (id)occurrenceEndDate;	// 0x3274fc91
// declared property getter: - (BOOL)occurrenceIsAllDay;	// 0x32796279
// declared property getter: - (id)occurrenceStartDate;	// 0x327503d5
// declared property getter: - (id)organizer;	// 0x32757de1
// declared property getter: - (id)originalOccurrenceEndDate;	// 0x3275ab9d
// declared property getter: - (id)originalOccurrenceIsAllDay;	// 0x3275abc9
// declared property getter: - (id)originalOccurrenceStartDate;	// 0x3275ab79
// converted property getter: - (int)participationStatus;	// 0x3275852d
- (int)pendingParticipationStatus;	// 0x327940f5
// converted property getter: - (unsigned)readState;	// 0x32758629
// declared property getter: - (id)recurrenceRule;	// 0x32793b29
- (BOOL)refresh;	// 0x3275ac5d
- (BOOL)removeWithSpan:(int)span error:(id *)error;	// 0x32763f55
- (BOOL)requiresDetach;	// 0x3275d0a9
// converted property getter: - (id)responseComment;	// 0x32793c91
- (BOOL)responseMustApplyToAll;	// 0x32794085
- (void)revert;	// 0x32794385
- (void)rollback;	// 0x3275a62d
// declared property setter: - (void)setAllDay:(BOOL)day;	// 0x32759d89
// declared property setter: - (void)setAvailability:(int)availability;	// 0x32793c2d
// declared property setter: - (void)setEndDate:(id)date;	// 0x3275a2f5
// converted property setter: - (void)setModifiedProperties:(unsigned)properties;	// 0x3279388d
// converted property setter: - (void)setNeedsOccurrenceCacheUpdate:(BOOL)update;	// 0x327938f5
// declared property setter: - (void)setOccurrenceEndDate:(id)date;	// 0x327503e5
// declared property setter: - (void)setOccurrenceIsAllDay:(BOOL)day;	// 0x3274f735
// declared property setter: - (void)setOccurrenceStartDate:(id)date;	// 0x3274f6c1
// declared property setter: - (void)setOriginalOccurrenceEndDate:(id)date;	// 0x3275a229
// declared property setter: - (void)setOriginalOccurrenceIsAllDay:(id)day;	// 0x32758cd5
// declared property setter: - (void)setOriginalOccurrenceStartDate:(id)date;	// 0x3275a205
// converted property setter: - (void)setParticipationStatus:(int)status;	// 0x32793939
// converted property setter: - (void)setReadState:(unsigned)state;	// 0x32793cc9
// declared property setter: - (void)setRecurrenceRule:(id)rule;	// 0x32793b75
// converted property setter: - (void)setResponseComment:(id)comment;	// 0x32793cad
// declared property setter: - (void)setStartDate:(id)date;	// 0x3275a049
- (void)setTimeZone:(id)zone;	// 0x32758cf9
- (id)startCalendarDate;	// 0x3274fc71
// declared property getter: - (id)startDate;	// 0x32750625
- (XXStruct_lQVxyC)startDateGr;	// 0x32753241
- (XXStruct_lQVxyC)startDatePinnedForAllDay;	// 0x3279377d
// declared property getter: - (int)status;	// 0x32751f11
- (id)uniqueId;	// 0x32794145
- (BOOL)validateWithSpan:(int)span error:(id *)error;	// 0x3275d50d
@end

