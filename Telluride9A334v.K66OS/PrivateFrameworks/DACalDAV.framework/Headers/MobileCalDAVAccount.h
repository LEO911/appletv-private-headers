/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/DataAccess.framework/Frameworks/DACalDAV.framework/DACalDAV
 */

#import <DAAccount.h> // Unknown library
#import "DACalDAV-Structs.h"

@class NSSet, NSURL, NSDictionary, DACoreDAVTaskManager, NSTimeZone, NSMutableDictionary, NSMutableSet, CalDAVPrincipalSearchPropertySet, CoreDAVDiscoveryTaskGroup, DACoreDAVLogger, CalDAVServerVersion, NSDate, MobileCalDAVPrincipal, MobileCalDAVAccountRefreshActor, CalDAVRefreshContext, NSString;

@interface MobileCalDAVAccount : DAAccount {
	DACoreDAVTaskManager *_taskManager;	// 64 = 0x40
	NSMutableDictionary *_principals;	// 68 = 0x44
	MobileCalDAVPrincipal *_mainPrincipal;	// 72 = 0x48
	int _preferredEventDaysToSync;	// 76 = 0x4c
	int _preferredToDoDaysToSync;	// 80 = 0x50
	NSMutableSet *_calendars;	// 84 = 0x54
	BOOL _subscribedCalendarsChanged;	// 88 = 0x58
	NSString *_collectionSetName;	// 92 = 0x5c
	CalDAVPrincipalSearchPropertySet *_searchPropertySet;	// 96 = 0x60
	CoreDAVDiscoveryTaskGroup *_checkValidityTaskGroup;	// 100 = 0x64
	MobileCalDAVAccountRefreshActor *_actor;	// 104 = 0x68
	BOOL _isRefreshing;	// 108 = 0x6c
	BOOL _isSpinning;	// 109 = 0x6d
	BOOL _needsAccountPropertyRefresh;	// 110 = 0x6e
	CalDAVRefreshContext *_refreshContext;	// 112 = 0x70
	NSMutableSet *_searchTaskSet;	// 116 = 0x74
	DACoreDAVLogger *_curLogger;	// 120 = 0x78
	CalDAVServerVersion *_serverVersion;	// 124 = 0x7c
	NSMutableDictionary *_itemIDsToMoveActions;	// 128 = 0x80
	NSMutableSet *_movedItemURLStrings;	// 132 = 0x84
@private
	BOOL _searchQueriesShouldCancel;	// 136 = 0x88
}
@property(assign) int calDAVAccountVersion;	// G=0x35b43e75; S=0x35b43ea9; 
@property(readonly, assign) NSSet *calendars;	// G=0x35b4498d; 
@property(retain) NSURL *collectionSetURL;	// G=0x35b445c9; S=0x35b4460d; 
@property(retain) id host;	// G=0x35b4411d; S=0x35b44159; converted property
@property(assign) BOOL isRefreshing;	// G=0x35b48391; S=0x35b483a1; @synthesize=_isRefreshing
@property(assign) BOOL isWritable;	// G=0x35b4469d; S=0x35b44709; 
@property(readonly, assign) NSMutableDictionary *itemIDsToMoveActions;	// G=0x35b48409; @synthesize=_itemIDsToMoveActions
@property(retain) MobileCalDAVPrincipal *mainPrincipal;	// G=0x35b48429; S=0x35b4843d; @synthesize=_mainPrincipal
@property(readonly, assign) NSSet *movedItemURLStrings;	// G=0x35b48419; @synthesize=_movedItemURLStrings
@property(assign) BOOL needsAccountPropertyRefresh;	// G=0x35b483e9; S=0x35b483f9; @synthesize=_needsAccountPropertyRefresh
@property(readonly, assign) NSDate *ocurrenceCacheEndDate;	// G=0x35b45371; 
@property(readonly, assign) NSDate *ocurrenceCacheStartDate;	// G=0x35b45339; 
@property(assign) int overriddenPort;	// G=0x35b44071; S=0x35b44011; 
@property(retain) NSString *overriddenScheme;	// G=0x35b44101; S=0x35b440a5; 
@property(retain) NSString *overriddenServer;	// G=0x35b43ff5; S=0x35b43f99; 
@property(assign) int port;	// G=0x35b442e9; S=0x35b442a5; converted property
@property(assign) int preferredEventDaysToSync;	// G=0x35b48471; S=0x35b48481; @synthesize=_preferredEventDaysToSync
@property(assign) int preferredToDoDaysToSync;	// G=0x35b48491; S=0x35b484a1; @synthesize=_preferredToDoDaysToSync
@property(retain) id principalURL;	// G=0x35b44399; S=0x35b443b9; converted property
@property(readonly, assign) NSDictionary *principals;	// G=0x35b48461; @synthesize=_principals
@property(retain) CalDAVRefreshContext *refreshContext;	// G=0x35b483b1; S=0x35b483c5; @synthesize=_refreshContext
@property(retain) id scheme;	// G=0x35b441e1; S=0x35b4421d; converted property
@property(retain) id searchPropertySet;	// G=0x35b44649; S=0x35b44659; 
@property(assign) BOOL searchQueriesShouldCancel;	// G=0x35b484b1; S=0x35b484c1; @synthesize=_searchQueriesShouldCancel
@property(assign) CalDAVServerVersion *serverVersion;	// G=0x35b45169; S=0x35b451d9; 
@property(readonly, assign) BOOL shouldFilterEventSyncTimeRange;	// G=0x35b453a9; 
@property(readonly, assign) BOOL shouldFilterSyncTimeRangeForInbox;	// G=0x35b45441; 
@property(readonly, assign) BOOL shouldFilterTodoSyncTimeRange;	// G=0x35b453f5; 
@property(retain, nonatomic) NSDictionary *subscribedCalendars;	// G=0x35b43e55; S=0x35b43db9; 
@property(readonly, assign) BOOL supportsEvents;	// G=0x35b45529; 
@property(readonly, assign) BOOL supportsReminders;	// G=0x35b454ad; 
@property(readonly, retain) DACoreDAVTaskManager *taskManager;	// G=0x35b45531; converted property
@property(assign) BOOL useSSL;	// G=0x35b44369; S=0x35b44335; converted property
@property(retain) id username;	// G=0x35b43eed; S=0x35b43f0d; converted property
@property(readonly, assign) NSTimeZone *viewedTimeZone;	// G=0x35b4531d; 
@property(assign) BOOL wasMigrated;	// G=0x35b4474d; S=0x35b44801; 
+ (Class)accountClass;	// 0x35b43041
+ (Class)clientClass;	// 0x35b4305d
+ (id)defaultProperties;	// 0x35b42791
+ (id)supportedDataclasses;	// 0x35b43079
- (id)init;	// 0x35b428d1
- (id)initWithProperties:(id)properties;	// 0x35b42289
- (id)_calendarConstraintsPath;	// 0x35b45689
- (id)_calendarConstraintsResource;	// 0x35b45585
- (id)_collectActionsFromMoveDictionary:(CFDictionaryRef)moveDictionary forDataclass:(id)dataclass outShouldSave:(BOOL *)anOut;	// 0x35b4647d
- (void)_collectMoveActions;	// 0x35b46929
- (BOOL)_needsNewAccountIDForOldVersion:(int)oldVersion;	// 0x35b43875
- (id)_oldURLsForKeychain;	// 0x35b43609
- (id)_powerAssertionContext;	// 0x35b47de9
- (id)_powerAssertionGroupIdentifier;	// 0x35b47ded
- (void)_setSpinning:(BOOL)spinning;	// 0x35b45d45
- (void)_updateCalendarStore:(BOOL)store;	// 0x35b45a35
- (BOOL)_updateCalendarStoreProperties:(void *)properties;	// 0x35b45755
- (void)_upgradeAccountToTelluride;	// 0x35b43111
- (BOOL)_upgradeSelfFromVersion:(int)version superClassUpgraded:(BOOL)upgraded;	// 0x35b43881
- (BOOL)accountNeedsUpgrade;	// 0x35b43cc1
- (void)addCalendar:(id)calendar;	// 0x35b448c9
- (void)addPrincipal:(id)principal;	// 0x35b450d5
// declared property getter: - (int)calDAVAccountVersion;	// 0x35b43e75
// declared property getter: - (id)calendars;	// 0x35b4498d
- (void)cancelAllSearchQueries;	// 0x35b476bd
- (void)cancelRefresh;	// 0x35b45da9
- (void)cancelSearchQuery:(id)query;	// 0x35b47575
- (void)checkValidityWithConsumer:(id)consumer;	// 0x35b47ba9
// declared property getter: - (id)collectionSetURL;	// 0x35b445c9
- (void *)copyCalStore;	// 0x35b45701
- (void)coreDAVLogDiagnosticMessage:(id)message atLevel:(int)level;	// 0x35b4831d
- (int)coreDAVLogLevel;	// 0x35b482fd
- (void)coreDAVLogTransmittedDataPartial:(id)partial;	// 0x35b4836d
- (int)coreDAVOutputLevel;	// 0x35b48315
- (void)coreDAVTransmittedDataFinished;	// 0x35b4838d
- (void)dealloc;	// 0x35b42911
- (void)discoveryTask:(id)task gotAccountInfo:(id)info error:(id)error;	// 0x35b477fd
- (void)dropPowerAssertions;	// 0x35b47f01
// converted property getter: - (id)host;	// 0x35b4411d
- (BOOL)isCalDAVAccount;	// 0x35b47fa1
- (BOOL)isEqualToAccount:(id)account;	// 0x35b47fa5
// declared property getter: - (BOOL)isRefreshing;	// 0x35b48391
// declared property getter: - (BOOL)isWritable;	// 0x35b4469d
// declared property getter: - (id)itemIDsToMoveActions;	// 0x35b48409
- (id)localizedIdenticalAccountFailureMessage;	// 0x35b481d5
- (id)localizedInvalidPasswordMessage;	// 0x35b4824d
// declared property getter: - (id)mainPrincipal;	// 0x35b48429
// declared property getter: - (id)movedItemURLStrings;	// 0x35b48419
// declared property getter: - (BOOL)needsAccountPropertyRefresh;	// 0x35b483e9
// declared property getter: - (id)ocurrenceCacheEndDate;	// 0x35b45371
// declared property getter: - (id)ocurrenceCacheStartDate;	// 0x35b45339
// declared property getter: - (int)overriddenPort;	// 0x35b44071
// declared property getter: - (id)overriddenScheme;	// 0x35b44101
// declared property getter: - (id)overriddenServer;	// 0x35b43ff5
- (void)performSearchQuery:(id)query;	// 0x35b471e1
// converted property getter: - (int)port;	// 0x35b442e9
// declared property getter: - (int)preferredEventDaysToSync;	// 0x35b48471
// declared property getter: - (int)preferredToDoDaysToSync;	// 0x35b48491
// converted property getter: - (id)principalURL;	// 0x35b44399
// declared property getter: - (id)principals;	// 0x35b48461
- (id)properties;	// 0x35b42b91
- (void)reattainPowerAssertions;	// 0x35b47f51
- (void)refreshActor:(id)actor didCompleteWithError:(id)error;	// 0x35b45e81
// declared property getter: - (id)refreshContext;	// 0x35b483b1
- (void)refreshWithContext:(id)context;	// 0x35b46c2d
- (void)releasePowerAssertion;	// 0x35b47e61
- (void)reloadCalendars;	// 0x35b4500d
- (void)removeCalendar:(id)calendar;	// 0x35b44921
- (void)removePrincipal:(id)principal;	// 0x35b4512d
- (void)retainPowerAssertion;	// 0x35b47dfd
// converted property getter: - (id)scheme;	// 0x35b441e1
// declared property getter: - (id)searchPropertySet;	// 0x35b44649
- (BOOL)searchQueriesRunning;	// 0x35b477c9
// declared property getter: - (BOOL)searchQueriesShouldCancel;	// 0x35b484b1
- (id)serverBaseURL;	// 0x35b444e1
// declared property getter: - (id)serverVersion;	// 0x35b45169
- (void)setAccountDescription:(id)description;	// 0x35b44585
// declared property setter: - (void)setCalDAVAccountVersion:(int)version;	// 0x35b43ea9
// declared property setter: - (void)setCollectionSetURL:(id)url;	// 0x35b4460d
// converted property setter: - (void)setHost:(id)host;	// 0x35b44159
// declared property setter: - (void)setIsRefreshing:(BOOL)refreshing;	// 0x35b483a1
// declared property setter: - (void)setIsWritable:(BOOL)writable;	// 0x35b44709
// declared property setter: - (void)setMainPrincipal:(id)principal;	// 0x35b4843d
// declared property setter: - (void)setNeedsAccountPropertyRefresh:(BOOL)refresh;	// 0x35b483f9
// declared property setter: - (void)setOverriddenPort:(int)port;	// 0x35b44011
// declared property setter: - (void)setOverriddenScheme:(id)scheme;	// 0x35b440a5
// declared property setter: - (void)setOverriddenServer:(id)server;	// 0x35b43f99
// converted property setter: - (void)setPort:(int)port;	// 0x35b442a5
// declared property setter: - (void)setPreferredEventDaysToSync:(int)sync;	// 0x35b48481
// declared property setter: - (void)setPreferredToDoDaysToSync:(int)sync;	// 0x35b484a1
// converted property setter: - (void)setPrincipalURL:(id)url;	// 0x35b443b9
// declared property setter: - (void)setRefreshContext:(id)context;	// 0x35b483c5
// converted property setter: - (void)setScheme:(id)scheme;	// 0x35b4421d
// declared property setter: - (void)setSearchPropertySet:(id)set;	// 0x35b44659
// declared property setter: - (void)setSearchQueriesShouldCancel:(BOOL)cancel;	// 0x35b484c1
// declared property setter: - (void)setServerVersion:(id)version;	// 0x35b451d9
// declared property setter: - (void)setSubscribedCalendars:(id)calendars;	// 0x35b43db9
// converted property setter: - (void)setUseSSL:(BOOL)ssl;	// 0x35b44335
// converted property setter: - (void)setUsername:(id)username;	// 0x35b43f0d
// declared property setter: - (void)setWasMigrated:(BOOL)migrated;	// 0x35b44801
// declared property getter: - (BOOL)shouldFilterEventSyncTimeRange;	// 0x35b453a9
// declared property getter: - (BOOL)shouldFilterSyncTimeRangeForInbox;	// 0x35b45441
// declared property getter: - (BOOL)shouldFilterTodoSyncTimeRange;	// 0x35b453f5
- (BOOL)shouldLogTransmittedData;	// 0x35b48361
- (void)shutdown;	// 0x35b477f9
- (id)spinnerIdentifiers;	// 0x35b45ce5
- (id)stateString;	// 0x35b430a9
// declared property getter: - (id)subscribedCalendars;	// 0x35b43e55
- (BOOL)supportsDADataclass:(int)dataclass;	// 0x35b43099
// declared property getter: - (BOOL)supportsEvents;	// 0x35b45529
// declared property getter: - (BOOL)supportsReminders;	// 0x35b454ad
- (void)task:(id)task didFinishWithError:(id)error;	// 0x35b46ec9
// converted property getter: - (id)taskManager;	// 0x35b45531
- (BOOL)upgradeAccount;	// 0x35b43c39
// converted property getter: - (BOOL)useSSL;	// 0x35b44369
// converted property getter: - (id)username;	// 0x35b43eed
- (BOOL)usesTokenAuth;	// 0x35b4552d
// declared property getter: - (id)viewedTimeZone;	// 0x35b4531d
// declared property getter: - (BOOL)wasMigrated;	// 0x35b4474d
- (id)wellKnownPaths;	// 0x35b47a11
@end

