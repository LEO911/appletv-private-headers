/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/DataAccess.framework/DataAccess
 */

#import <NSObject.h> // Unknown library

@class NSMutableArray, NSArray, NSTimer, NSMutableSet, DAAccount;
@protocol DATask;

@interface DATaskManager : NSObject {
	DAAccount *_account;	// 4 = 0x4
	NSMutableArray *_queuedExclusiveTasks;	// 8 = 0x8
	id<DATask> _activeExclusiveTask;	// 12 = 0xc
	NSMutableSet *_independentTasks;	// 16 = 0x10
	NSMutableSet *_heldIndependentTasks;	// 20 = 0x14
	NSMutableSet *_modalHeldIndependentTasks;	// 24 = 0x18
	NSMutableArray *_queuedTasks;	// 28 = 0x1c
	id<DATask> _activeQueuedTask;	// 32 = 0x20
	id<DATask> _modalHeldActiveQueuedTask;	// 36 = 0x24
	NSMutableArray *_queuedModalTasks;	// 40 = 0x28
	id<DATask> _activeModalTask;	// 44 = 0x2c
	int _state;	// 48 = 0x30
	NSTimer *_managerIdleTimer;	// 52 = 0x34
}
@property(assign) DAAccount *account;	// G=0x3396053d; S=0x33960619; @synthesize=_account
@property(readonly, assign) id<DATask> activeModalTask;	// G=0x3395fd2d; @synthesize=_activeModalTask
@property(readonly, assign) id<DATask> activeQueuedTask;	// G=0x3396485d; @synthesize=_activeQueuedTask
@property(readonly, assign) NSArray *allTasks;	// G=0x3395f951; 
@property(readonly, assign) NSArray *queuedTasks;	// G=0x33964871; @synthesize=_queuedTasks
- (id)init;	// 0x3394aded
- (id)initWithAccount:(id)account;	// 0x3395fd3d
- (void)_cancelTasksWithReason:(int)reason;	// 0x339642c1
- (id)_getHeldIndependentTasks;	// 0x33964715
- (id)_getIndependentTasks;	// 0x339646c5
- (id)_getModalHeldIndependentTasks;	// 0x33964765
- (id)_getQueuedExclusiveTasks;	// 0x33964675
- (id)_getQueuedModalTasks;	// 0x33964805
- (id)_getQueuedTasks;	// 0x339647b5
- (BOOL)_hasTasksForcingNetworkConnection;	// 0x33961589
- (void)_makeStateTransition;	// 0x33963521
- (void)_performTask:(id)task;	// 0x33962f99
- (void)_populateVersionDescriptions;	// 0x33960459
- (void)_reactivateHeldTasks;	// 0x339632b5
- (void)_releasePowerAssertionForTask:(id)task;	// 0x3396457d
- (void)_requestCancelTasksWithReason:(int)reason;	// 0x33963091
- (void)_retainPowerAssertionForTask:(id)task;	// 0x339644e5
- (void)_schedulePerformTask:(id)task;	// 0x33964239
- (void)_scheduleSelector:(SEL)selector withArgument:(id)argument;	// 0x33964195
- (void)_scheduleStartModal:(id)modal;	// 0x33964259
- (void)_startModal:(id)modal;	// 0x339631d1
- (BOOL)_taskForcesNetworking:(id)networking;	// 0x33961485
- (BOOL)_taskInQueueForcesNetworkConnection:(id)queueForcesNetworkConnection;	// 0x339614c5
- (BOOL)_useFakeDescriptions;	// 0x339604e5
- (void)_useOpportunisticSocketsAgain;	// 0x33961409
- (id)_version;	// 0x339604bd
// declared property getter: - (id)account;	// 0x3396053d
- (id)accountID;	// 0x33960721
- (id)accountPersistentUUID;	// 0x33960741
// declared property getter: - (id)activeModalTask;	// 0x3395fd2d
// declared property getter: - (id)activeQueuedTask;	// 0x3396485d
// declared property getter: - (id)allTasks;	// 0x3395f951
- (void)cancelAllTasks;	// 0x33961005
- (void)cancelTask:(id)task;	// 0x33960ff1
- (void)cancelTask:(id)task withUnderlyingError:(id)underlyingError;	// 0x33960f91
- (void)dealloc;	// 0x3395fe21
- (id)deviceType;	// 0x339604e9
- (id)identityPersist;	// 0x339606e1
- (id)password;	// 0x3396069d
- (int)port;	// 0x3396065d
// declared property getter: - (id)queuedTasks;	// 0x33964871
- (id)scheme;	// 0x33960701
- (id)server;	// 0x3396067d
// declared property setter: - (void)setAccount:(id)account;	// 0x33960619
- (void)shutdown;	// 0x339610d1
- (id)stateString;	// 0x33961239
- (void)submitExclusiveTask:(id)task;	// 0x33960761
- (void)submitExclusiveTask:(id)task toFrontOfQueue:(BOOL)queue;	// 0x33960775
- (void)submitIndependentTask:(id)task;	// 0x33960a8d
- (void)submitQueuedTask:(id)task;	// 0x33960cf5
- (void)taskDidFinish:(id)task;	// 0x33961709
- (void)taskEndModal:(id)modal;	// 0x33962b5d
- (BOOL)taskIsModal:(id)modal;	// 0x33962e95
- (void)taskManagerDidAddTask:(id)taskManager;	// 0x33964855
- (void)taskManagerWillRemoveTask:(id)taskManager;	// 0x33964859
- (void)taskRequestModal:(id)modal;	// 0x339625c9
- (BOOL)useSSL;	// 0x339606bd
- (id)user;	// 0x3396063d
- (id)userAgent;	// 0x339604ed
@end

