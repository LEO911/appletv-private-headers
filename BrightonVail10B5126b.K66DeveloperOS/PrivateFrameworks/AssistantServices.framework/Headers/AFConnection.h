/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices
 */

#import <NSObject.h> // Unknown library
#import "AFManagedStore.h"

@class NSMutableDictionary, DKConnection, NSString;
@protocol AFAssistantUIService, AFSpeechDelegate;

@interface AFConnection : NSObject <AFManagedStore> {
	DKConnection *_connection;	// 4 = 0x4
	id<AFAssistantUIService> _delegate;	// 8 = 0x8
	id<AFSpeechDelegate> _speechDelegate;	// 12 = 0xc
	float _averagePower;	// 16 = 0x10
	float _peakPower;	// 20 = 0x14
	NSString *_outstandingRequestClass;	// 24 = 0x18
	unsigned _stateInSync : 1;	// 28 = 0x1c
	unsigned _shouldSpeak : 1;	// 28 = 0x1c
	unsigned _isCapturingSpeech : 1;	// 28 = 0x1c
	unsigned _hasOutstandingRequest : 1;	// 28 = 0x1c
	unsigned _replyContextMayInitiateCall : 1;	// 28 = 0x1c
	BOOL _hasActiveRequest;	// 29 = 0x1d
	NSMutableDictionary *_replies;	// 32 = 0x20
}
@property(readonly, assign) float averagePower;	// G=0x334e8a0d; converted property
@property(assign, nonatomic) __weak id<AFAssistantUIService> delegate;	// G=0x334e9499; S=0x334e6109; @synthesize=_delegate
@property(readonly, assign, nonatomic) BOOL isRecording;	// G=0x334e89e5; 
@property(readonly, assign) float peakPower;	// G=0x334e8a1d; converted property
@property(assign, nonatomic) __weak id<AFSpeechDelegate> speechDelegate;	// G=0x334e94b9; S=0x334e94d9; @synthesize=_speechDelegate
+ (void)_reachabilityDidChange:(id)_reachability;	// 0x334e7cb1
+ (BOOL)assistantIsEnabled;	// 0x334e7b05
+ (BOOL)assistantIsSupported;	// 0x334e7ca5
+ (BOOL)assistantIsSupportedForLanguageCode:(id)languageCode error:(id *)error;	// 0x334e7b5d
+ (void)beginMonitoringAvailability;	// 0x334e7d3d
+ (void)defrost;	// 0x334e7f35
+ (void)initialize;	// 0x334e6061
+ (BOOL)isAvailable;	// 0x334e7da9
+ (void)stopMonitoringAvailability;	// 0x334e7e39
+ (BOOL)userDataSyncNeeded;	// 0x334e7e95
- (id)init;	// 0x334e6065
- (void).cxx_destruct;	// 0x334e94ed
- (void)_asyncBarrierWithBlock:(id)block;	// 0x334e9779
- (void)_barrier;	// 0x334e9741
- (void)_cancelRequestTimeout;	// 0x334e7821
- (void)_checkAndSetIsCapturingSpeech:(BOOL)speech;	// 0x334e6149
- (void)_clearAssistantInfoForAccountWithIdentifier:(id)identifier;	// 0x334e97c9
- (void)_clearConnection;	// 0x334e7551
- (id)_connection;	// 0x334e72dd
- (void)_handleMessage:(id)message;	// 0x334e71dd
- (void)_invokeRequestTimeout;	// 0x334e7779
- (void)_msgDismissAssistant:(id)assistant;	// 0x334e6ca1
- (void)_msgDoCommand:(id)command;	// 0x334e68c9
- (void)_msgOpenURL:(id)url;	// 0x334e6a69
- (void)_msgReplyMayInitiateCall:(id)call;	// 0x334e6e9d
- (void)_msgRequestCompleted:(id)completed;	// 0x334e6a39
- (void)_msgRequestError:(id)error;	// 0x334e6d65
- (void)_msgSpeechLevelUpdate:(id)update;	// 0x334e6ee9
- (void)_msgSpeechRecognitionDidFail:(id)_msgSpeechRecognition;	// 0x334e712d
- (void)_msgSpeechRecognized:(id)recognized;	// 0x334e706d
- (void)_msgSpeechRecordingDidBegin:(id)_msgSpeechRecording;	// 0x334e6ed9
- (void)_msgSpeechRecordingDidCancel:(id)_msgSpeechRecording;	// 0x334e6fcd
- (void)_msgSpeechRecordingDidEnd:(id)_msgSpeechRecording;	// 0x334e6f9d
- (void)_msgSpeechRecordingDidFail:(id)_msgSpeechRecording;	// 0x334e6ffd
- (void)_msgSpeechRecordingWillBegin:(id)_msgSpeechRecording;	// 0x334e6ec9
- (void)_msgStateUpdate:(id)update;	// 0x334e6e01
- (void)_requestDidEnd;	// 0x334e6269
- (void)_requestStateUpdate;	// 0x334e785d
- (void)_requestWillBeginWithRequestClass:(id)_request logAggregateData:(BOOL)data;	// 0x334e6215
- (void)_scheduleRequestTimeout:(double)timeout;	// 0x334e77e5
- (void)_sendMessage:(id)message withReply:(id)reply;	// 0x334e9661
- (void)_sendMessage:(id)message withReplySync:(id)replySync;	// 0x334e96d9
- (void)_tellDelegateRequestFailed:(id)failed requestClass:(id)aClass;	// 0x334e630d
- (void)_tellDelegateRequestFinished;	// 0x334e62a9
- (void)_tellDelegateShouldSpeakChanged:(BOOL)_tellDelegate;	// 0x334e63a1
- (void)_tellSpeechDelegateDidRecognizeSpeechPhrases:(id)_tellSpeechDelegate correctionIdentifier:(id)identifier;	// 0x334e65c1
- (void)_tellSpeechDelegateRecognitionDidFail:(id)_tellSpeechDelegateRecognition;	// 0x334e685d
- (void)_tellSpeechDelegateRecordingDidBegin;	// 0x334e6459
- (void)_tellSpeechDelegateRecordingDidCancel;	// 0x334e6501
- (void)_tellSpeechDelegateRecordingDidEnd;	// 0x334e64ad
- (void)_tellSpeechDelegateRecordingDidFail:(id)_tellSpeechDelegateRecording;	// 0x334e6555
- (void)_tellSpeechDelegateRecordingWillBegin;	// 0x334e6405
- (void)_unhandledMessage:(id)message;	// 0x334e716d
- (void)_willCancelRequest;	// 0x334e7a5d
- (void)_willCompleteRequest;	// 0x334e7acd
- (void)_willFailRequest;	// 0x334e7a95
- (void)_willStartRequest;	// 0x334e7a15
// converted property getter: - (float)averagePower;	// 0x334e8a0d
- (void)cancelRequest;	// 0x334e87c5
- (void)cancelSpeech;	// 0x334e8529
- (void)clearAndSetApplicationContext;	// 0x334e8f35
- (void)clearAndSetApplicationContextWithBulletins:(id)bulletins;	// 0x334e8f49
- (void)clearContext;	// 0x334e8eb5
- (void)clearUndoStack;	// 0x334e90fd
- (void)dealloc;	// 0x334e60c9
// declared property getter: - (id)delegate;	// 0x334e9499
- (id)domainObjectForKey:(id)key;	// 0x334e917d
- (void)endSession;	// 0x334e7ea1
// declared property getter: - (BOOL)isRecording;	// 0x334e89e5
// converted property getter: - (float)peakPower;	// 0x334e8a1d
- (void)preheat;	// 0x334e7ffd
- (void)redoRequest;	// 0x334e907d
- (BOOL)replyContextMayInitiateCall;	// 0x334e8a2d
- (void)rollbackRequest;	// 0x334e8869
- (void)sendGenericAceCommand:(id)command;	// 0x334e8a41
- (void)sendGenericAceCommand:(id)command conflictHandler:(id)handler;	// 0x334e8a55
- (void)sendReplyCommand:(id)command;	// 0x334e8df5
// declared property setter: - (void)setDelegate:(id)delegate;	// 0x334e6109
- (void)setDomainObject:(id)object forKey:(id)key;	// 0x334e93a9
- (BOOL)setLanguageCode:(id)code error:(id *)error;	// 0x334e807d
- (void)setLockState:(BOOL)state screenLocked:(BOOL)locked;	// 0x334e81cd
// declared property setter: - (void)setSpeechDelegate:(id)delegate;	// 0x334e94d9
- (BOOL)shouldSpeak;	// 0x334e89f9
// declared property getter: - (id)speechDelegate;	// 0x334e94b9
- (void)startRequestWithCorrectedText:(id)correctedText forSpeechIdentifier:(id)speechIdentifier;	// 0x334e88e9
- (void)startRequestWithText:(id)text;	// 0x334e83f1
- (void)startRequestWithText:(id)text timeout:(double)timeout;	// 0x334e8301
- (void)startSpeechRequestWithOptions:(id)options;	// 0x334e8421
- (void)startSpeechRequestWithSpeechFileAtURL:(id)url;	// 0x334e9559
- (void)stopSpeech;	// 0x334e87b1
- (void)stopSpeechWithOptions:(id)options;	// 0x334e86c1
- (void)undoRequest;	// 0x334e8ffd
- (void)updateSpeechOptions:(id)options;	// 0x334e85e1
@end

