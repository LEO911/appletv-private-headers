/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/TextInput.framework/TextInput
 */

#import "TextInput-Structs.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSMutableString, NSMutableArray, CPLRUDictionary, UIKeyboardCandidate, TIWordTokenizer, TIKeyboardInputManagerConfig;

@interface TIKeyboardInputManagerZephyr : XXUnknownSuperclass {
	TIInputManagerZephyr *m_impl;	// 4 = 0x4
	NSMutableString *m_composedText;	// 8 = 0x8
	unsigned m_defaultCandidateIndex;	// 12 = 0xc
	TIWordTokenizer *m_wordTokenizer;	// 16 = 0x10
	RefPtr<TIAutoshiftRegularExpression> m_autoshift_regex;	// 20 = 0x14
	TIKeyboardInputManagerConfig *_config;	// 24 = 0x18
	NSMutableArray *_inputHistory;	// 28 = 0x1c
	CPLRUDictionary *_autocorrectionHistory;	// 32 = 0x20
	int _autocapitalizationType;	// 36 = 0x24
	UIKeyboardCandidate *_revisitedCandidate;	// 40 = 0x28
}
@property(assign, nonatomic) int autocapitalizationType;	// G=0x35642d0d; S=0x35642d1d; @synthesize=_autocapitalizationType
@property(retain, nonatomic) CPLRUDictionary *autocorrectionHistory;	// G=0x35642ced; S=0x35642cfd; @synthesize=_autocorrectionHistory
@property(readonly, assign, nonatomic) TIKeyboardInputManagerConfig *config;	// G=0x35642ccd; @synthesize=_config
@property(readonly, assign) unsigned defaultCandidateIndex;	// G=0x35642a85; converted property
@property(assign) BOOL inHardwareKeyboardMode;	// G=0x356403a5; S=0x35640381; converted property
@property(readonly, assign, nonatomic) NSMutableArray *inputHistory;	// G=0x35642cdd; @synthesize=_inputHistory
@property(assign) unsigned inputIndex;	// G=0x35640bcd; S=0x35640b71; converted property
@property(retain, nonatomic) UIKeyboardCandidate *revisitedCandidate;	// G=0x35642d2d; S=0x35642d3d; @synthesize=_revisitedCandidate
- (id)init;	// 0x3563fea1
- (TIInputManagerZephyr *)initImplementation;	// 0x356400c5
- (id)initWithConfig:(id)config;	// 0x3563fc19
- (id).cxx_construct;	// 0x35642d69
- (void).cxx_destruct;	// 0x35642d4d
- (void)acceptInput;	// 0x35640a29
- (BOOL)acceptsCharacter:(unsigned short)character;	// 0x35642bfd
- (id)addInput:(id)input flags:(unsigned)flags point:(CGPoint)point firstDelete:(unsigned *)aDelete fromVariantKey:(BOOL)variantKey;	// 0x356403e5
- (void)appendToInputContext:(id)inputContext;	// 0x35640ad1
// declared property getter: - (int)autocapitalizationType;	// 0x35642d0d
- (id)autocorrection;	// 0x35641ea1
- (id)autocorrectionCandidateForInput:(id)input withWord:(const Word *)word;	// 0x35642015
// declared property getter: - (id)autocorrectionHistory;	// 0x35642ced
- (BOOL)canHandleKeyHitTest;	// 0x35642ae5
- (BOOL)canStartSentenceAfterString:(id)string;	// 0x356419c9
- (void)candidateRejected:(id)rejected;	// 0x35640fd9
- (id)candidates;	// 0x356428ed
- (id)candidatesForString:(id)string;	// 0x356427f1
- (CFDictionaryRef)chargedKeyProbabilities;	// 0x35641c41
- (void)checkAutocorrectionDictionaries;	// 0x35641c45
- (void)clearAllCentroids;	// 0x35642ae1
- (void)clearDynamicDictionary;	// 0x356403cd
- (void)clearInput;	// 0x356409a5
- (void)clearInputContext;	// 0x35640b5d
- (void)clearKeyAreas;	// 0x35642ae9
// declared property getter: - (id)config;	// 0x35642ccd
- (void)configureInputModeSpecificFeatures:(id)features withLayout:(id)layout;	// 0x356403c5
- (void)dealloc;	// 0x3563fedd
- (void)decreaseUserFrequency:(id)frequency usageFlags:(unsigned)flags;	// 0x35640f89
- (id)defaultCandidate;	// 0x35640d09
// converted property getter: - (unsigned)defaultCandidateIndex;	// 0x35642a85
- (id)deleteFromInput:(unsigned *)input;	// 0x35640761
- (void)deleteFromStrokeHistory;	// 0x35642be5
- (unsigned)deleteLengthForString:(id)string;	// 0x3564074d
- (BOOL)doesComposeText;	// 0x3563ffb9
- (unsigned)externalIndexToInternal:(unsigned)internal;	// 0x35640041
- (id)externalStringToInternal:(id)internal;	// 0x3563ffbd
// converted property getter: - (BOOL)inHardwareKeyboardMode;	// 0x356403a5
- (void)increaseUserFrequency:(id)frequency usageFlags:(unsigned)flags;	// 0x35640f39
- (id)inputContext;	// 0x35640a99
- (unsigned)inputCount;	// 0x35640bf5
- (BOOL)inputEmpty;	// 0x35640c2d
// declared property getter: - (id)inputHistory;	// 0x35642cdd
// converted property getter: - (unsigned)inputIndex;	// 0x35640bcd
- (void)inputLocationChanged;	// 0x3564105d
- (id)inputString;	// 0x35640c4d
- (unsigned)internalIndexToExternal:(unsigned)external;	// 0x3563ffc5
- (id)internalStringToExternal:(id)external;	// 0x3563ffc1
- (int)keyHitTest:(CGPoint)test touchStage:(int)stage atTime:(double)time withTouch:(id)touch forceShift:(BOOL)shift forcingKey:(int)key;	// 0x35642b69
- (void)loadDictionaries;	// 0x356400ed
- (void)loadFavoniusLanguageModel;	// 0x35640221
- (unsigned)maximumShortcutLengthAllowed;	// 0x35642241
- (BOOL)nextInputWouldStartSentence;	// 0x35641999
- (id)phraseCandidateCompletedByWord:(const String *)word allowNoSuggest:(BOOL)suggest;	// 0x35641c75
- (void)registerCentroid:(CGPoint)centroid forKey:(id)key;	// 0x35642a95
- (void)registerKeyArea:(CGPoint)area withRadii:(CGPoint)radii forKeyCode:(unsigned short)keyCode forLowerKey:(id)lowerKey forUpperKey:(id)upperKey;	// 0x35642b05
- (BOOL)removeSuffixOfInputContext:(id)inputContext;	// 0x35640b15
- (void)reviseInputHistoryForRetroCorrectionCandidates:(id)retroCorrectionCandidates forInputs:(id)inputs;	// 0x35641241
// declared property getter: - (id)revisitedCandidate;	// 0x35642d2d
- (id)sentenceDelimitingCharacters;	// 0x35641981
- (id)sentencePrefixingCharacters;	// 0x35641975
- (id)sentenceTrailingCharacters;	// 0x3564198d
- (void)setAutoCorrects:(BOOL)corrects;	// 0x35640321
// declared property setter: - (void)setAutocapitalizationType:(int)type;	// 0x35642d1d
// declared property setter: - (void)setAutocorrectionHistory:(id)history;	// 0x35642cfd
- (void)setAutoshiftFromInputContext;	// 0x35641bd1
- (void)setCalculatesChargedKeyProbabilities:(BOOL)probabilities;	// 0x356403c9
- (void)setCollatorLocale;	// 0x35640311
// converted property setter: - (void)setInHardwareKeyboardMode:(BOOL)hardwareKeyboardMode;	// 0x35640381
- (void)setInput:(id)input;	// 0x35640699
// converted property setter: - (void)setInputIndex:(unsigned)index;	// 0x35640b71
- (void)setKeyboardEventsLagging:(BOOL)lagging;	// 0x35640365
- (void)setLearnsCorrection:(BOOL)correction;	// 0x35640341
- (void)setOriginalInput:(id)input;	// 0x35640d69
// declared property setter: - (void)setRevisitedCandidate:(id)candidate;	// 0x35642d3d
- (void)setTypologyRecorder:(id)recorder;	// 0x35642c71
- (id)shadowTyping;	// 0x35641895
- (id)shortcutConversionForInput:(id)input andExistingString:(id)string existingStringStartsInMiddleOfWord:(BOOL)word;	// 0x3564277d
- (id)shortcutConversionForString:(id)string stringStartsInMiddleOfWord:(BOOL)word;	// 0x3564225d
- (BOOL)shouldSuppressAutocorrectionWithTerminator:(id)terminator;	// 0x356421e5
- (BOOL)stringIsExemptFromChecker:(id)checker;	// 0x35640cb5
- (BOOL)supportsShortcutConversion;	// 0x3564223d
- (void)textAccepted:(id)accepted;	// 0x35640df5
- (id)textPrecedingNextInput;	// 0x356418e5
- (void)updateForRevisitedString:(id)revisitedString;	// 0x35641509
- (id)updateInputHistoryForAcceptedText:(id)acceptedText;	// 0x35641099
- (BOOL)usesCandidateSelection;	// 0x356427d9
- (unsigned)wordHistoryDepth;	// 0x35640bb1
@end

