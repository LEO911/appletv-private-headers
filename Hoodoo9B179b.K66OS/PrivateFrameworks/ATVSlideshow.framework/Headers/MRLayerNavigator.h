/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/ATVSlideshow.framework/ATVSlideshow
 */

#import "MRLayer.h"
#import "ATVSlideshow-Structs.h"

@class MCContainerNavigator, NSMutableDictionary, NSMutableArray, NSDictionary, NSArray, MRTransition;

@interface MRLayerNavigator : MRLayer {
	MCContainerNavigator *mContainer;	// 124 = 0x7c
	NSMutableArray *mSublayers;	// 128 = 0x80
	NSMutableDictionary *mSublayersForPlugs;	// 132 = 0x84
	MRLayer *mCurrentSublayer;	// 136 = 0x88
	MRLayer *mNextSublayer;	// 140 = 0x8c
	MRTransition *mCurrentTransition;	// 144 = 0x90
	BOOL mIsTransitioning;	// 148 = 0x94
	MRLayer *mSublayerToPrecompute;	// 152 = 0x98
	id mPrecomputingTarget;	// 156 = 0x9c
	unsigned mPrecomputingType;	// 160 = 0xa0
	double mTransitionStartTime;	// 164 = 0xa4
	double mTransitionDuration;	// 172 = 0xac
	BOOL mTransitionIsBackwards;	// 180 = 0xb4
	NSDictionary *mTransitionChanges;	// 184 = 0xb8
	NSMutableArray *mHistoryBack;	// 188 = 0xbc
	NSMutableArray *mHistoryForth;	// 192 = 0xc0
	BOOL mBackAndForthIsEnabled;	// 196 = 0xc4
	double mForcedTransitionTime;	// 200 = 0xc8
}
@property(assign) BOOL backAndForthIsEnabled;	// G=0x355441f5; S=0x35544205; @synthesize=mBackAndForthIsEnabled
@property(readonly, assign) MRLayer *currentSublayer;	// G=0x355441e5; @synthesize=mCurrentSublayer
@property(assign, nonatomic) double forcedTransitionTime;	// G=0x35544215; S=0x3554422d; @synthesize=mForcedTransitionTime
@property(readonly, assign) NSArray *sublayers;	// G=0x355441d5; @synthesize=mSublayers
- (id)initWithPlug:(id)plug andParameters:(id)parameters inSuperlayer:(id)superlayer;	// 0x35540fd5
- (id)_createSublayerForPlug:(id)plug;	// 0x35544555
- (id)_currentState;	// 0x35543f79
- (void)_deleteSublayer:(id)sublayer;	// 0x3554468d
- (id)_dumpLayerWithOptions:(unsigned)options;	// 0x35544065
- (void)_executeLayerCommandQueue;	// 0x35544241
- (BOOL)_isNative3D;	// 0x35542ad9
- (void)_observePlug;	// 0x35544901
- (void)_observePlugOnPreactivate;	// 0x355449b9
- (void)_observeSublayer:(id)sublayer;	// 0x3554480d
- (void)_precomputeAtTime:(double)time inContext:(id)context withArguments:(id)arguments;	// 0x35544b95
- (void)_preprecomputeAtTime:(double)time inContext:(id)context withArguments:(id)arguments;	// 0x355458b5
- (void)_prerenderSublayersAtTime:(double)time inContext:(id)context withArguments:(id)arguments;	// 0x355450cd
- (void)_renderAtTime:(double)time inContext:(id)context withArguments:(id)arguments;	// 0x35544dc5
- (id)_retainedByUserRenderedImageAtTime:(double)time inContext:(id)context withArguments:(id)arguments;	// 0x35544f19
- (void)_setNeedsToRequestRebuildAudio:(BOOL)requestRebuildAudio;	// 0x35544ad1
- (void)_unobservePlug;	// 0x35544961
- (void)_unobservePlugOnDepreactivate;	// 0x35544a51
- (void)_unobserveSublayer:(id)sublayer;	// 0x35544885
- (id)actionForKey:(id)key recursive:(BOOL)recursive;	// 0x35542f3d
- (id)actionHitAtPoint:(CGPoint)point layer:(id *)layer;	// 0x35542df1
// declared property getter: - (BOOL)backAndForthIsEnabled;	// 0x355441f5
- (void)beginMorphingToAspectRatio:(float)aspectRatio withDuration:(double)duration;	// 0x35541a51
- (void)cleanup;	// 0x355411ad
// declared property getter: - (id)currentSublayer;	// 0x355441e5
- (void)deactivate;	// 0x35541afd
- (void)depreactivate:(BOOL)depreactivate;	// 0x35541ce1
- (double)doTransition:(id)transition;	// 0x35543bc5
- (double)doTransition:(id)transition backwards:(BOOL)backwards;	// 0x35543085
- (double)doTransitionBackwards:(id)backwards;	// 0x35543bd9
- (void)endMorphing;	// 0x35541abd
- (void)endTransitionToSublayer;	// 0x35543ec5
// declared property getter: - (double)forcedTransitionTime;	// 0x35544215
- (double)goBack;	// 0x35543d59
- (double)goForth;	// 0x35543bed
- (BOOL)hasAudio;	// 0x355429e1
- (BOOL)hasSomethingToRender;	// 0x3554193d
- (BOOL)isAlphaFriendly;	// 0x35541fe5
- (BOOL)isLoadedForTime:(double)time;	// 0x35541dcd
- (BOOL)isOpaque;	// 0x35541f6d
- (void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void *)context;	// 0x3554147d
- (id)patchworkAtTime:(double)time inContext:(id)context withArguments:(id)arguments;	// 0x35542699
- (BOOL)prerenderForTime:(double)time inContext:(id)context withArguments:(id)arguments;	// 0x3554205d
// declared property setter: - (void)setBackAndForthIsEnabled:(BOOL)enabled;	// 0x35544205
// declared property setter: - (void)setForcedTransitionTime:(double)time;	// 0x3554422d
- (void)setPixelSize:(CGSize)size;	// 0x35541845
- (id)sublayerForID:(id)anId;	// 0x35542b31
- (id)sublayerForPlugObjectID:(id)plugObjectID recursive:(BOOL)recursive;	// 0x35542c3d
- (id)sublayerHitAtPoint:(CGPoint)point onlyIfHitElement:(BOOL)element localPoint:(CGPoint *)point3;	// 0x35542829
// declared property getter: - (id)sublayers;	// 0x355441d5
- (void)synchronizeTime;	// 0x355419c1
@end

