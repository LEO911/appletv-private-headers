/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/CoreData.framework/CoreData
 */

#import <NSObject.h> // Unknown library
#import "CoreData-Structs.h"

@class NSSQLAdapter, NSArray, NSSQLStatement;

__attribute__((visibility("hidden")))
@interface NSSQLConnection : NSObject {
@private
	NSSQLAdapter *_adapter;	// 4 = 0x4
	BOOL _transactionIsOpen;	// 8 = 0x8
	BOOL _useSyntaxColoredLogging;	// 9 = 0x9
	int _debug;	// 12 = 0xc
	NSSQLStatement *_sqlStatement;	// 16 = 0x10
	NSArray *_columnsToFetch;	// 20 = 0x14
	NSArray *_metadataColumns;	// 24 = 0x18
}
@property(readonly, retain) NSSQLAdapter *adapter;	// G=0x32ae1515; converted property
@property(retain) NSArray *columnsToFetch;	// G=0x32ae4461; S=0x32ae4481; converted property
@property(readonly, retain) NSArray *metadataColumns;	// G=0x32ae44c9; converted property
@property(readonly, retain) NSSQLStatement *sqlStatement;	// G=0x32ae3ddd; converted property
+ (void)initialize;	// 0x32b09789
- (id)initWithAdapter:(id)adapter;	// 0x32ae09d5
- (void)_forceDisconnectOnError;	// 0x32b86be9
- (void)_performPostSaveTasks;	// 0x32b86be5
- (void)_raiseOptimisticLockingExceptionWithReason:(id)reason;	// 0x32b88745
// converted property getter: - (id)adapter;	// 0x32ae1515
- (void)addPeerRangeForPeerID:(id)peerID entityName:(id)name rangeStart:(id)start rangeEnd:(id)end peerRangeStart:(id)start5 peerRangeEnd:(id)end6;	// 0x32b87175
- (id)allPeerRanges;	// 0x32b87141
- (void)awake;	// 0x32b86bad
- (void)beginTransaction;	// 0x32b886d1
- (BOOL)canConnect;	// 0x32b885cd
// converted property getter: - (id)columnsToFetch;	// 0x32ae4461
- (void)commitTransaction;	// 0x32b8869d
- (void)connect;	// 0x32b88635
- (void)createIndexesForEntity:(id)entity;	// 0x32b87b7d
- (void)createManyToManyTablesForEntity:(id)entity;	// 0x32b86de1
- (id)createMapOfEntityNameToPKMaxForEntities:(id)entities;	// 0x32b870a5
- (id)createMapOfEntityNameToPKMaxForEntitiesFromPKTable:(id)pktable;	// 0x32b870d9
- (id)createMapOfEntityNameToPKMaxForEntitiesFromUBRangeTable:(id)ubrangeTable;	// 0x32b8710d
- (void)createMetadata;	// 0x32b86f41
- (void)createPrimaryKeyTableForModel:(id)model knownEmpty:(BOOL)empty;	// 0x32b87245
- (void)createSchema;	// 0x32b87869
- (void)createTableForEntity:(id)entity;	// 0x32b86d71
- (void)createTablesForEntities:(id)entities;	// 0x32b86eb9
- (BOOL)databaseIsEmpty;	// 0x32b88599
- (void)dealloc;	// 0x32b01cb5
- (void)deleteCorrelation:(id)correlation;	// 0x32b88495
- (void)deleteRow:(id)row;	// 0x32b8842d
- (id)describeResults;	// 0x32b8835d
- (void)didCreateSchema;	// 0x32b86bd1
- (void)disconnect;	// 0x32b88601
- (void)endFetch;	// 0x32b882c1
- (void)endPrimaryKeyGeneration;	// 0x32b86be1
- (void)execute;	// 0x32b883c5
- (long long)fetchMaxPrimaryKeyForEntity:(id)entity;	// 0x32b87801
- (id)fetchMetadata;	// 0x32ae2815
- (int)fetchResultSet:(void *)set usingFetchPlan:(id)plan;	// 0x32b882f5
- (id)fetchTableCreationSQL;	// 0x32b87799
- (id)fetchTableNames;	// 0x32b877cd
- (id)fetchUbiqiutyKnowledgeVector;	// 0x32b87211
- (void)finalize;	// 0x32b88705
- (void)forceTransactionClosed;	// 0x32b86bb5
- (long long)generatePrimaryKeysForEntity:(id)entity batch:(unsigned)batch;	// 0x32b86bd5
- (BOOL)hasMetadataTable;	// 0x32b87765
- (BOOL)hasOpenTransaction;	// 0x32b016d5
- (BOOL)hasPrimaryKeyTable;	// 0x32b87365
- (void)insertCorrelation:(id)correlation;	// 0x32b884fd
- (void)insertRow:(id)row;	// 0x32b88531
- (BOOL)isFetchInProgress;	// 0x32b88391
- (BOOL)isOpen;	// 0x32b88565
// converted property getter: - (id)metadataColumns;	// 0x32ae44c9
- (id)newFetchedArray;	// 0x32b88329
- (void)performAdapterOperation:(id)operation;	// 0x32b881b9
- (void)performAdapterOperations:(id)operations;	// 0x32b88111
- (void)prepareAndExecuteSQLStatement:(id)statement;	// 0x32b86d2d
- (void)prepareForPrimaryKeyGeneration;	// 0x32b86bdd
- (void)prepareSQLStatement:(id)statement;	// 0x32ae336d
- (CFArrayRef)rawIntegerRowsForSQL:(id)sql;	// 0x32b87835
- (void)releaseSQLStatement;	// 0x32ae5335
- (void)resetSQLStatement;	// 0x32b86d01
- (void)rollbackTransaction;	// 0x32b88669
- (void)saveMetadata:(id)metadata;	// 0x32b87399
- (void)selectAttributes:(id)attributes fetchRequest:(id)request lock:(BOOL)lock entity:(id)entity;	// 0x32b883f9
// converted property setter: - (void)setColumnsToFetch:(id)fetch;	// 0x32ae4481
- (void)setExclusiveLockingMode:(BOOL)mode;	// 0x32b86bc9
- (void)setUbiquityTableValue:(id)value forKey:(id)key;	// 0x32b87071
- (void)sleep;	// 0x32b86bb1
// converted property getter: - (id)sqlStatement;	// 0x32ae3ddd
- (void)transactionDidBegin;	// 0x32b86bf9
- (void)transactionDidCommit;	// 0x32b86c51
- (void)transactionDidRollback;	// 0x32b86ca9
- (id)ubiquityTableKeysAndValues;	// 0x32b8703d
- (id)ubiquityTableValueForKey:(id)key;	// 0x32b87009
- (void)updateCorrelation:(id)correlation;	// 0x32b884c9
- (void)updateRow:(id)row;	// 0x32b88461
- (void)updateUbiquityKnowledgeForPeerWithID:(id)anId andTransactionNumber:(id)number;	// 0x32b871a9
- (void)updateUbiquityKnowledgeVector:(id)vector;	// 0x32b871dd
- (void)willCreateSchema;	// 0x32b86bcd
@end

