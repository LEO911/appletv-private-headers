/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/EventKit.framework/EventKit
 */

#import "NSCopying.h"
#import "NSMutableCopying.h"
#import "EventKit-Structs.h"
#import <NSObject.h> // Unknown library

@class EKTimeZone;

@interface EKCalendarDate : NSObject <NSCopying, NSMutableCopying> {
	XXStruct_lQVxyC _dateGr;	// 4 = 0x4
	double _dateAbs;	// 20 = 0x14
	EKTimeZone *_timeZone;	// 28 = 0x1c
	unsigned _flags;	// 32 = 0x20
}
@property(readonly, retain) EKTimeZone *timeZone;	// G=0x30c07021; converted property
+ (id)calendarDateWithAbsoluteTime:(double)absoluteTime timeZone:(id)zone;	// 0x30bf992d
+ (id)calendarDateWithDate:(id)date timeZone:(id)zone;	// 0x30bfc605
+ (id)calendarDateWithDateComponents:(id)dateComponents timeZone:(id)zone;	// 0x30bfafa5
+ (id)calendarDateWithGregorianDate:(XXStruct_lQVxyC)gregorianDate timeZone:(id)zone;	// 0x30c08891
- (id)initWithAbsoluteTime:(double)absoluteTime internalTimeZone:(id)zone;	// 0x30c54819
- (id)initWithAbsoluteTime:(double)absoluteTime timeZone:(id)zone;	// 0x30bf9975
- (id)initWithDate:(id)date timeZone:(id)zone;	// 0x30bfc645
- (id)initWithDateComponents:(id)dateComponents timeZone:(id)zone;	// 0x30bfafe5
- (id)initWithGregorianDate:(XXStruct_lQVxyC)gregorianDate internalTimeZone:(id)zone;	// 0x30bfaf11
- (id)initWithGregorianDate:(XXStruct_lQVxyC)gregorianDate timeZone:(id)zone;	// 0x30c088e5
- (double)absoluteTime;	// 0x30bfa335
- (id)calendarDateByAddingDays:(int)days;	// 0x30bfb30d
- (id)calendarDateByAddingGregorianUnits:(XXStruct_mY3THC)units;	// 0x30bfb339
- (id)calendarDateByAddingWeeks:(int)weeks;	// 0x30c549d5
- (id)calendarDateForDay;	// 0x30bfb19d
- (id)calendarDateForEndOfDay;	// 0x30bfb429
- (id)calendarDateForEndOfMonth;	// 0x30c000e9
- (id)calendarDateForEndOfWeekWithWeekStart:(unsigned)weekStart;	// 0x30bfff19
- (id)calendarDateForMonth;	// 0x30bffff5
- (id)calendarDateForWeekWithWeekStart:(unsigned)weekStart;	// 0x30bfa281
- (id)calendarDateForWeekWithWeekStart:(unsigned)weekStart daysSinceWeekStart:(int *)start;	// 0x30bfa295
- (id)calendarDateForYear;	// 0x30c54bd1
- (id)calendarDateInTimeZone:(id)timeZone;	// 0x30c121f9
- (id)calendarDateWithDate:(id)date;	// 0x30c54a05
- (int)compare:(id)compare;	// 0x30bfd5d1
- (id)components;	// 0x30c122fd
- (id)copyWithZone:(NSZone *)zone;	// 0x30bfa271
- (id)date;	// 0x30bfb52d
- (unsigned)day;	// 0x30c16d4d
- (unsigned)dayOfWeek;	// 0x30c15ff1
- (unsigned)dayOfYear;	// 0x30c54add
- (unsigned)daysInMonth;	// 0x30c001f5
- (unsigned)daysInYear;	// 0x30c54b3d
- (void)dealloc;	// 0x30bfc851
- (id)description;	// 0x30c54895
- (XXStruct_mY3THC)differenceAsGregorianUnits:(id)units flags:(unsigned long)flags;	// 0x30bfcfcd
- (int)differenceInDays:(id)days;	// 0x30bffee1
- (int)differenceInMonths:(id)months;	// 0x30c16cf5
- (int)differenceInYears:(id)years;	// 0x30c54a41
- (id)earlierDate:(id)date;	// 0x30c17261
- (XXStruct_lQVxyC)gregorianDate;	// 0x30bfb281
- (unsigned)hour;	// 0x30c15729
- (BOOL)isEqual:(id)equal;	// 0x30c07c61
- (id)laterDate:(id)date;	// 0x30c54cd1
- (unsigned)minute;	// 0x30c1575d
- (unsigned)month;	// 0x30c54aa9
- (id)mutableCopyWithZone:(NSZone *)zone;	// 0x30c15f4d
- (double)second;	// 0x30c15791
- (int)secondsFromGMT;	// 0x30c54999
// converted property getter: - (id)timeZone;	// 0x30c07021
- (unsigned)weekOfYear;	// 0x30c54b0d
- (unsigned)weeksInYear;	// 0x30c54b85
- (unsigned)year;	// 0x30c54a79
@end

