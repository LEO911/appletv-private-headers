/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/EventKit.framework/EventKit
 */

#import "EKCalendarItem.h"
#import "EventKit-Structs.h"

@class EKRecurrenceRule, NSString, EKParticipant, NSNumber, NSDate, EKCalendarDate;

@interface EKEvent : EKCalendarItem {
@private
	EKCalendarDate *_occurrenceStartDate;	// 4 = 0x4
	EKCalendarDate *_occurrenceEndDate;	// 8 = 0x8
	BOOL _occurrenceIsAllDay;	// 12 = 0xc
	EKCalendarDate *_originalOccurrenceStartDate;	// 16 = 0x10
	EKCalendarDate *_originalOccurrenceEndDate;	// 20 = 0x14
	NSNumber *_originalOccurrenceIsAllDay;	// 24 = 0x18
}
@property(assign, nonatomic, getter=isAllDay) BOOL allDay;	// G=0x30bfd405; S=0x30c06e11; 
@property(assign, nonatomic) int availability;	// G=0x30c412e1; S=0x30c41335; 
@property(readonly, assign, nonatomic) int birthdayPersonID;	// G=0x30c411b9; 
@property(copy, nonatomic) NSDate *endDate;	// G=0x30bfd641; S=0x30c0737d; 
@property(readonly, assign, nonatomic) NSString *eventIdentifier;	// G=0x30c04c41; 
@property(readonly, assign, nonatomic) BOOL isDetached;	// G=0x30c06c39; 
@property(assign) unsigned modifiedProperties;	// G=0x30c40f61; S=0x30c40f95; converted property
@property(assign) BOOL needsOccurrenceCacheUpdate;	// G=0x30c40fd9; S=0x30c40ffd; converted property
@property(copy, nonatomic) EKCalendarDate *occurrenceEndDate;	// G=0x30bfcc65; S=0x30bfd3e1; @synthesize=_occurrenceEndDate
@property(assign, nonatomic) BOOL occurrenceIsAllDay;	// G=0x30c43981; S=0x30bfc709; @synthesize=_occurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *occurrenceStartDate;	// G=0x30bfd3d1; S=0x30bfc695; @synthesize=_occurrenceStartDate
@property(readonly, assign, nonatomic) EKParticipant *organizer;	// G=0x30c04e01; 
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate;	// G=0x30c07c25; S=0x30c072b1; @synthesize=_originalOccurrenceEndDate
@property(copy, nonatomic) NSNumber *originalOccurrenceIsAllDay;	// G=0x30c07c51; S=0x30c05d5d; @synthesize=_originalOccurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate;	// G=0x30c07c01; S=0x30c0728d; @synthesize=_originalOccurrenceStartDate
@property(assign) int participationStatus;	// G=0x30c05551; S=0x30c41041; converted property
@property(assign) unsigned readState;	// G=0x30c056b1; S=0x30c413d1; converted property
@property(retain, nonatomic) EKRecurrenceRule *recurrenceRule;	// G=0x30c41231; S=0x30c4127d; 
@property(retain) id responseComment;	// G=0x30c41399; S=0x30c413b5; converted property
@property(copy, nonatomic) NSDate *startDate;	// G=0x30bfd621; S=0x30c070d1; 
@property(readonly, assign, nonatomic) int status;	// G=0x30bfef0d; 
+ (id)eventWithEventStore:(id)eventStore;	// 0x30c08471
- (id)init;	// 0x30c40b11
- (id)initWithEventStore:(id)eventStore;	// 0x30c05701
- (id)initWithPersistentObject:(id)persistentObject;	// 0x30c40b4d
- (id)initWithPersistentObject:(id)persistentObject occurrenceDate:(id)date;	// 0x30bfc1a9
- (BOOL)_cancelWithSpan:(int)span error:(id *)error;	// 0x30c42c85
- (BOOL)_checkStartDateConstraintAgainstDate:(XXStruct_lQVxyC)date timeZone:(id)zone error:(id *)error;	// 0x30c0b41d
- (BOOL)_deleteWithSpan:(int)span error:(id *)error;	// 0x30c1170d
- (void)_detachWithStartDate:(id)startDate newStartDate:(id)date future:(BOOL)future;	// 0x30c42e09
- (id)_effectiveTimeZone;	// 0x30c072d5
- (BOOL)_isAllDay;	// 0x30bfc6b9
- (BOOL)_isInitialOccurrenceDate:(id)date;	// 0x30c11529
- (BOOL)_occurrenceExistsOnDate:(double)date timeZone:(id)zone;	// 0x30c42a49
- (int)_parentParticipationStatus;	// 0x30c41179
- (id)_persistentEvent;	// 0x30bfcd3d
- (void)_sendModifiedNote;	// 0x30c083dd
- (BOOL)_shouldCancelInsteadOfDeleteWithSpan:(int)span;	// 0x30c1160d
- (BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(int)recurrenceInterval;	// 0x30c41d55
- (BOOL)_validateDatesAndRecurrencesGivenSpan:(int)span error:(id *)error;	// 0x30c0b019
- (BOOL)_validateDurationConstrainedToRecurrenceInterval;	// 0x30c41b95
- (int)alarmCount;	// 0x30c41209
- (BOOL)allowsAlarmModifications;	// 0x30c0b519
- (BOOL)allowsCalendarModifications;	// 0x30c41719
- (BOOL)allowsRecurrenceModifications;	// 0x30c06bb5
- (id)attachments;	// 0x30c04d0d
- (int)attendeeCount;	// 0x30c411e1
- (id)attendees;	// 0x30c04ea1
// declared property getter: - (int)availability;	// 0x30c412e1
// declared property getter: - (int)birthdayPersonID;	// 0x30c411b9
- (id)birthdayTitleWithAddressBook:(void *)addressBook;	// 0x30c40da9
- (BOOL)canBeRespondedTo;	// 0x30c052cd
- (BOOL)canDetachSingleOccurrence;	// 0x30c417b5
- (BOOL)canMoveToCalendar:(id)calendar fromCalendar:(id)calendar2 error:(id *)error;	// 0x30c414ed
- (BOOL)canSetAvailability;	// 0x30c41875
- (void)clearReadState;	// 0x30c41415
- (BOOL)commitWithSpan:(int)span error:(id *)error;	// 0x30c0b649
- (id)committedValueForKey:(id)key;	// 0x30c06329
- (int)compareStartDateWithEvent:(id)event;	// 0x30bfd599
- (void)dealloc;	// 0x30c05f01
- (id)description;	// 0x30c418f1
- (void)didCommit;	// 0x30c0fbb9
- (id)dirtyPropertiesToSkip;	// 0x30c41a31
- (double)duration;	// 0x30c0035d
- (id)endCalendarDate;	// 0x30bfcc55
// declared property getter: - (id)endDate;	// 0x30bfd641
- (XXStruct_lQVxyC)endDateGr;	// 0x30c002cd
- (XXStruct_lQVxyC)endDatePinnedForAllDay;	// 0x30c40eed
// declared property getter: - (id)eventIdentifier;	// 0x30c04c41
- (id)eventStore;	// 0x30bff16d
- (id)exportToICS;	// 0x30c40c81
- (id)externalId;	// 0x30c41825
- (id)externalURL;	// 0x30c40b61
- (BOOL)hasSelfAttendee;	// 0x30c418c1
- (unsigned)hash;	// 0x30bfd415
- (id)initialEndDate;	// 0x30c40e0d
- (id)initialStartDate;	// 0x30c40db9
// declared property getter: - (BOOL)isAllDay;	// 0x30bfd405
// declared property getter: - (BOOL)isDetached;	// 0x30c06c39
- (BOOL)isDirtyIgnoringCalendar;	// 0x30c40d09
- (BOOL)isEndDateDirty;	// 0x30c40ce9
- (BOOL)isEqual:(id)equal;	// 0x30bfd4c1
- (BOOL)isStartDateDirty;	// 0x30c40cc9
- (BOOL)isStatusDirty;	// 0x30c40ca9
- (BOOL)isTentative;	// 0x30c41449
// converted property getter: - (unsigned)modifiedProperties;	// 0x30c40f61
// converted property getter: - (BOOL)needsOccurrenceCacheUpdate;	// 0x30c40fd9
- (id)occurrenceDate;	// 0x30c06a79
// declared property getter: - (id)occurrenceEndDate;	// 0x30bfcc65
// declared property getter: - (BOOL)occurrenceIsAllDay;	// 0x30c43981
// declared property getter: - (id)occurrenceStartDate;	// 0x30bfd3d1
// declared property getter: - (id)organizer;	// 0x30c04e01
// declared property getter: - (id)originalOccurrenceEndDate;	// 0x30c07c25
// declared property getter: - (id)originalOccurrenceIsAllDay;	// 0x30c07c51
// declared property getter: - (id)originalOccurrenceStartDate;	// 0x30c07c01
// converted property getter: - (int)participationStatus;	// 0x30c05551
- (int)pendingParticipationStatus;	// 0x30c417fd
// converted property getter: - (unsigned)readState;	// 0x30c056b1
// declared property getter: - (id)recurrenceRule;	// 0x30c41231
- (BOOL)refresh;	// 0x30c07ce5
- (BOOL)removeWithSpan:(int)span error:(id *)error;	// 0x30c11459
- (BOOL)requiresDetach;	// 0x30c0a1d5
// converted property getter: - (id)responseComment;	// 0x30c41399
- (BOOL)responseMustApplyToAll;	// 0x30c4178d
- (void)revert;	// 0x30c41a8d
- (void)rollback;	// 0x30c076b5
// declared property setter: - (void)setAllDay:(BOOL)day;	// 0x30c06e11
// declared property setter: - (void)setAvailability:(int)availability;	// 0x30c41335
// declared property setter: - (void)setEndDate:(id)date;	// 0x30c0737d
// converted property setter: - (void)setModifiedProperties:(unsigned)properties;	// 0x30c40f95
// converted property setter: - (void)setNeedsOccurrenceCacheUpdate:(BOOL)update;	// 0x30c40ffd
// declared property setter: - (void)setOccurrenceEndDate:(id)date;	// 0x30bfd3e1
// declared property setter: - (void)setOccurrenceIsAllDay:(BOOL)day;	// 0x30bfc709
// declared property setter: - (void)setOccurrenceStartDate:(id)date;	// 0x30bfc695
// declared property setter: - (void)setOriginalOccurrenceEndDate:(id)date;	// 0x30c072b1
// declared property setter: - (void)setOriginalOccurrenceIsAllDay:(id)day;	// 0x30c05d5d
// declared property setter: - (void)setOriginalOccurrenceStartDate:(id)date;	// 0x30c0728d
// converted property setter: - (void)setParticipationStatus:(int)status;	// 0x30c41041
// converted property setter: - (void)setReadState:(unsigned)state;	// 0x30c413d1
// declared property setter: - (void)setRecurrenceRule:(id)rule;	// 0x30c4127d
// converted property setter: - (void)setResponseComment:(id)comment;	// 0x30c413b5
// declared property setter: - (void)setStartDate:(id)date;	// 0x30c070d1
- (void)setTimeZone:(id)zone;	// 0x30c05d81
- (id)startCalendarDate;	// 0x30bfcc45
// declared property getter: - (id)startDate;	// 0x30bfd621
- (XXStruct_lQVxyC)startDateGr;	// 0x30c0023d
- (XXStruct_lQVxyC)startDatePinnedForAllDay;	// 0x30c40e85
// declared property getter: - (int)status;	// 0x30bfef0d
- (id)uniqueId;	// 0x30c4184d
- (BOOL)validateWithSpan:(int)span error:(id *)error;	// 0x30c0a651
@end

