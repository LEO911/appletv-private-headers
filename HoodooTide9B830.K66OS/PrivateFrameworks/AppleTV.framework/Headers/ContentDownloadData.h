/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/AppleTV.framework/AppleTV
 */

#import "AppleTV-Structs.h"
#import <NSObject.h> // Unknown library

@class NSError, NSMutableData, NSLock, CDNDownloadData, NSString, NSMutableString;

__attribute__((visibility("hidden")))
@interface ContentDownloadData : NSObject {
@private
	BOOL ignore;	// 4 = 0x4
	NSLock *lock;	// 8 = 0x8
	CDNDownloadData *cdn;	// 12 = 0xc
	NSString *audioLanguageBCP47;	// 16 = 0x10
	NSString *audioLanguageDescription;	// 20 = 0x14
	NSString *downloadableId;	// 24 = 0x18
	unsigned bitRate;	// 28 = 0x1c
	NSString *trackId;	// 32 = 0x20
	int trackIndex;	// 36 = 0x24
	int streamIndex;	// 40 = 0x28
	unsigned sortedIndex;	// 44 = 0x2c
	int contentProfile;	// 48 = 0x30
	NSString *url;	// 52 = 0x34
	NSString *redirectedUrl;	// 56 = 0x38
	int state;	// 60 = 0x3c
	int error;	// 64 = 0x40
	NSError *nsError;	// 68 = 0x44
	BOOL failed;	// 72 = 0x48
	int httpStatusCode;	// 76 = 0x4c
	int mediaType;	// 80 = 0x50
	double downloadStartTime;	// 84 = 0x54
	double downloadEndTime;	// 92 = 0x5c
	double playlistGenerateStartTime;	// 100 = 0x64
	double playlistGenerateEndTime;	// 108 = 0x6c
	double parseKeyStartTime;	// 116 = 0x74
	double parseKeyEndTime;	// 124 = 0x7c
	NSMutableString *moviePlaylist;	// 132 = 0x84
	NSMutableString *iFramePlaylist;	// 136 = 0x88
	int movieDuration;	// 140 = 0x8c
	int moviePeakBandwidth;	// 144 = 0x90
	int movieAverageBandwidth;	// 148 = 0x94
	NSMutableData *contentHeaderData;	// 152 = 0x98
	int contentChunkStart;	// 156 = 0x9c
	float m3u8ChunkRatio;	// 160 = 0xa0
	NSMutableData *iFrameData;	// 164 = 0xa4
	BOOL isDefault;	// 168 = 0xa8
	int iFrameBandwidth;	// 172 = 0xac
}
@property(readonly, assign, nonatomic) NSString *audioLanguageBCP47;	// G=0x32c8e7a1; @synthesize
@property(readonly, assign, nonatomic) NSString *audioLanguageDescription;	// G=0x32c8e7b1; @synthesize
@property(readonly, assign, nonatomic) unsigned bitRate;	// G=0x32c8e7f1; @synthesize
@property(readonly, assign, nonatomic) CDNDownloadData *cdn;	// G=0x32c8e761; @synthesize
@property(readonly, assign, nonatomic) int contentChunkStart;	// G=0x32c8ea9d; @synthesize
@property(readonly, assign, nonatomic) NSMutableData *contentHeaderData;	// G=0x32c8eabd; @synthesize
@property(readonly, assign, nonatomic) int contentProfile;	// G=0x32c8e821; @synthesize
@property(assign, nonatomic) double downloadEndTime;	// G=0x32c8e931; S=0x32c8e949; @synthesize
@property(assign, nonatomic) double downloadStartTime;	// G=0x32c8e905; S=0x32c8e91d; @synthesize
@property(readonly, assign, nonatomic) NSString *downloadableId;	// G=0x32c8e791; @synthesize
@property(assign, nonatomic) int error;	// G=0x32c8e871; S=0x32c8e881; @synthesize
@property(assign, nonatomic) BOOL failed;	// G=0x32c8e8c5; S=0x32c8e8d5; @synthesize
@property(assign, nonatomic) int httpStatusCode;	// G=0x32c8e8e5; S=0x32c8e8f5; @synthesize
@property(assign, nonatomic) int iFrameBandwidth;	// G=0x32c8ea6d; S=0x32c8ea7d; @synthesize
@property(readonly, assign, nonatomic) NSMutableData *iFrameData;	// G=0x32c8eacd; @synthesize
@property(assign, nonatomic) BOOL ignore;	// G=0x32c8e741; S=0x32c8e751; @synthesize
@property(readonly, assign, nonatomic) BOOL isDefault;	// G=0x32c8e7c1; @synthesize
@property(assign, nonatomic) NSLock *lock;	// G=0x32c8e771; S=0x32c8e781; @synthesize
@property(assign, nonatomic) float m3u8ChunkRatio;	// G=0x32c8eadd; S=0x32c8eaed; @synthesize
@property(readonly, assign, nonatomic) int mediaType;	// G=0x32c8eafd; @synthesize
@property(assign, nonatomic) int movieAverageBandwidth;	// G=0x32c8ea4d; S=0x32c8ea5d; @synthesize
@property(assign, nonatomic) int movieDuration;	// G=0x32c8ea0d; S=0x32c8ea1d; @synthesize
@property(assign, nonatomic) int moviePeakBandwidth;	// G=0x32c8ea2d; S=0x32c8ea3d; @synthesize
@property(readonly, assign, nonatomic) NSMutableString *moviePlaylist;	// G=0x32c8ea8d; @synthesize
@property(retain, nonatomic) NSError *nsError;	// G=0x32c8e891; S=0x32c8e8a1; @synthesize
@property(assign, nonatomic) double parseKeyEndTime;	// G=0x32c8e9e1; S=0x32c8e9f9; @synthesize
@property(assign, nonatomic) double parseKeyStartTime;	// G=0x32c8e9b5; S=0x32c8e9cd; @synthesize
@property(assign, nonatomic) double playlistGenerateEndTime;	// G=0x32c8e989; S=0x32c8e9a1; @synthesize
@property(assign, nonatomic) double playlistGenerateStartTime;	// G=0x32c8e95d; S=0x32c8e975; @synthesize
@property(readonly, assign, nonatomic) NSString *redirectedUrl;	// G=0x32c8e841; @synthesize
@property(assign, nonatomic) unsigned sortedIndex;	// G=0x32c8e801; S=0x32c8e811; @synthesize
@property(assign, nonatomic) int state;	// G=0x32c8e851; S=0x32c8e861; @synthesize
@property(readonly, assign, nonatomic) int streamIndex;	// G=0x32c8e7e1; @synthesize
@property(readonly, assign, nonatomic) NSString *trackId;	// G=0x32c8eaad; @synthesize
@property(readonly, assign, nonatomic) int trackIndex;	// G=0x32c8e7d1; @synthesize
@property(readonly, assign, nonatomic) NSString *url;	// G=0x32c8e831; @synthesize
- (id)initWithAudioStreamDictionary:(id)audioStreamDictionary cdnData:(id)data;	// 0x32c8dbb5
- (id)initWithManifestStream:(const shared_ptr<netflix::ase::ManifestStream> *)manifestStream streamIndex:(int)index trackId:(basic_string<char, std::char_traits<char>, std::allocator<char> >)anId trackIndex:(int)index4 audioBCP47:(id)a47 audioDescription:(id)description isDefault:(BOOL)aDefault cdnData:(id)data;	// 0x32c8d615
- (id)initWithVideoStreamDictionary:(id)videoStreamDictionary cdnData:(id)data;	// 0x32c8e09d
// declared property getter: - (id)audioLanguageBCP47;	// 0x32c8e7a1
// declared property getter: - (id)audioLanguageDescription;	// 0x32c8e7b1
// declared property getter: - (unsigned)bitRate;	// 0x32c8e7f1
// declared property getter: - (id)cdn;	// 0x32c8e761
- (int)compareByDescendingBitRate:(id)rate;	// 0x32c8e6e5
// declared property getter: - (int)contentChunkStart;	// 0x32c8ea9d
// declared property getter: - (id)contentHeaderData;	// 0x32c8eabd
// declared property getter: - (int)contentProfile;	// 0x32c8e821
- (void)dealloc;	// 0x32c8e421
// declared property getter: - (double)downloadEndTime;	// 0x32c8e931
// declared property getter: - (double)downloadStartTime;	// 0x32c8e905
// declared property getter: - (id)downloadableId;	// 0x32c8e791
// declared property getter: - (int)error;	// 0x32c8e871
// declared property getter: - (BOOL)failed;	// 0x32c8e8c5
// declared property getter: - (int)httpStatusCode;	// 0x32c8e8e5
// declared property getter: - (int)iFrameBandwidth;	// 0x32c8ea6d
// declared property getter: - (id)iFrameData;	// 0x32c8eacd
// declared property getter: - (BOOL)ignore;	// 0x32c8e741
// declared property getter: - (BOOL)isDefault;	// 0x32c8e7c1
// declared property getter: - (id)lock;	// 0x32c8e771
// declared property getter: - (float)m3u8ChunkRatio;	// 0x32c8eadd
// declared property getter: - (int)mediaType;	// 0x32c8eafd
// declared property getter: - (int)movieAverageBandwidth;	// 0x32c8ea4d
// declared property getter: - (int)movieDuration;	// 0x32c8ea0d
// declared property getter: - (int)moviePeakBandwidth;	// 0x32c8ea2d
// declared property getter: - (id)moviePlaylist;	// 0x32c8ea8d
// declared property getter: - (id)nsError;	// 0x32c8e891
// declared property getter: - (double)parseKeyEndTime;	// 0x32c8e9e1
// declared property getter: - (double)parseKeyStartTime;	// 0x32c8e9b5
// declared property getter: - (double)playlistGenerateEndTime;	// 0x32c8e989
// declared property getter: - (double)playlistGenerateStartTime;	// 0x32c8e95d
// declared property getter: - (id)redirectedUrl;	// 0x32c8e841
- (void)setContentHeaderData:(id)data withChunkStart:(int)chunkStart;	// 0x32c8e59d
// declared property setter: - (void)setDownloadEndTime:(double)time;	// 0x32c8e949
// declared property setter: - (void)setDownloadStartTime:(double)time;	// 0x32c8e91d
// declared property setter: - (void)setError:(int)error;	// 0x32c8e881
// declared property setter: - (void)setFailed:(BOOL)failed;	// 0x32c8e8d5
// declared property setter: - (void)setHttpStatusCode:(int)code;	// 0x32c8e8f5
// declared property setter: - (void)setIFrameBandwidth:(int)bandwidth;	// 0x32c8ea7d
- (void)setIFrameData:(id)data;	// 0x32c8e559
- (void)setIFramePlaylist:(id)playlist;	// 0x32c8e63d
// declared property setter: - (void)setIgnore:(BOOL)ignore;	// 0x32c8e751
// declared property setter: - (void)setLock:(id)lock;	// 0x32c8e781
// declared property setter: - (void)setM3u8ChunkRatio:(float)ratio;	// 0x32c8eaed
// declared property setter: - (void)setMovieAverageBandwidth:(int)bandwidth;	// 0x32c8ea5d
// declared property setter: - (void)setMovieDuration:(int)duration;	// 0x32c8ea1d
// declared property setter: - (void)setMoviePeakBandwidth:(int)bandwidth;	// 0x32c8ea3d
- (void)setMoviePlaylist:(id)playlist;	// 0x32c8e5f9
// declared property setter: - (void)setNsError:(id)error;	// 0x32c8e8a1
// declared property setter: - (void)setParseKeyEndTime:(double)time;	// 0x32c8e9f9
// declared property setter: - (void)setParseKeyStartTime:(double)time;	// 0x32c8e9cd
// declared property setter: - (void)setPlaylistGenerateEndTime:(double)time;	// 0x32c8e9a1
// declared property setter: - (void)setPlaylistGenerateStartTime:(double)time;	// 0x32c8e975
- (void)setRedirectedUrl:(id)url;	// 0x32c8e681
// declared property setter: - (void)setSortedIndex:(unsigned)index;	// 0x32c8e811
// declared property setter: - (void)setState:(int)state;	// 0x32c8e861
// declared property getter: - (unsigned)sortedIndex;	// 0x32c8e801
// declared property getter: - (int)state;	// 0x32c8e851
// declared property getter: - (int)streamIndex;	// 0x32c8e7e1
// declared property getter: - (id)trackId;	// 0x32c8eaad
// declared property getter: - (int)trackIndex;	// 0x32c8e7d1
// declared property getter: - (id)url;	// 0x32c8e831
@end

