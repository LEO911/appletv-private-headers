/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/DataAccess.framework/Frameworks/DACalDAV.framework/DACalDAV
 */

#import <DAAccount.h> // Unknown library
#import "DACalDAV-Structs.h"

@class NSSet, NSURL, NSDictionary, DACoreDAVTaskManager, NSTimeZone, NSMutableDictionary, NSMutableSet, CalDAVPrincipalSearchPropertySet, CoreDAVDiscoveryTaskGroup, DACoreDAVLogger, CalDAVServerVersion, NSDate, MobileCalDAVPrincipal, MobileCalDAVAccountRefreshActor, CalDAVRefreshContext, NSString;

@interface MobileCalDAVAccount : DAAccount {
	DACoreDAVTaskManager *_taskManager;	// 64 = 0x40
	NSMutableDictionary *_principals;	// 68 = 0x44
	MobileCalDAVPrincipal *_mainPrincipal;	// 72 = 0x48
	int _preferredEventDaysToSync;	// 76 = 0x4c
	int _preferredToDoDaysToSync;	// 80 = 0x50
	NSMutableSet *_calendars;	// 84 = 0x54
	BOOL _subscribedCalendarsChanged;	// 88 = 0x58
	NSString *_collectionSetName;	// 92 = 0x5c
	CalDAVPrincipalSearchPropertySet *_searchPropertySet;	// 96 = 0x60
	CoreDAVDiscoveryTaskGroup *_checkValidityTaskGroup;	// 100 = 0x64
	MobileCalDAVAccountRefreshActor *_actor;	// 104 = 0x68
	BOOL _isRefreshing;	// 108 = 0x6c
	BOOL _isSpinning;	// 109 = 0x6d
	BOOL _needsAccountPropertyRefresh;	// 110 = 0x6e
	CalDAVRefreshContext *_refreshContext;	// 112 = 0x70
	NSMutableSet *_searchTaskSet;	// 116 = 0x74
	DACoreDAVLogger *_curLogger;	// 120 = 0x78
	CalDAVServerVersion *_serverVersion;	// 124 = 0x7c
	NSMutableDictionary *_itemIDsToMoveActions;	// 128 = 0x80
	NSMutableSet *_movedItemURLStrings;	// 132 = 0x84
@private
	BOOL _searchQueriesShouldCancel;	// 136 = 0x88
}
@property(assign) int calDAVAccountVersion;	// G=0x33058149; S=0x3305817d; 
@property(readonly, assign) NSSet *calendars;	// G=0x33058c61; 
@property(retain) NSURL *collectionSetURL;	// G=0x3305889d; S=0x330588e1; 
@property(retain) id host;	// G=0x330583f1; S=0x3305842d; converted property
@property(assign) BOOL isRefreshing;	// G=0x3305c6e5; S=0x3305c6f5; @synthesize=_isRefreshing
@property(assign) BOOL isWritable;	// G=0x33058971; S=0x330589dd; 
@property(readonly, assign) NSMutableDictionary *itemIDsToMoveActions;	// G=0x3305c75d; @synthesize=_itemIDsToMoveActions
@property(retain) MobileCalDAVPrincipal *mainPrincipal;	// G=0x3305c77d; S=0x3305c791; @synthesize=_mainPrincipal
@property(readonly, assign) NSSet *movedItemURLStrings;	// G=0x3305c76d; @synthesize=_movedItemURLStrings
@property(assign) BOOL needsAccountPropertyRefresh;	// G=0x3305c73d; S=0x3305c74d; @synthesize=_needsAccountPropertyRefresh
@property(readonly, assign) NSDate *ocurrenceCacheEndDate;	// G=0x33059645; 
@property(readonly, assign) NSDate *ocurrenceCacheStartDate;	// G=0x3305960d; 
@property(assign) int overriddenPort;	// G=0x33058345; S=0x330582e5; 
@property(retain) NSString *overriddenScheme;	// G=0x330583d5; S=0x33058379; 
@property(retain) NSString *overriddenServer;	// G=0x330582c9; S=0x3305826d; 
@property(assign) int port;	// G=0x330585bd; S=0x33058579; converted property
@property(assign) int preferredEventDaysToSync;	// G=0x3305c7c5; S=0x3305c7d5; @synthesize=_preferredEventDaysToSync
@property(assign) int preferredToDoDaysToSync;	// G=0x3305c7e5; S=0x3305c7f5; @synthesize=_preferredToDoDaysToSync
@property(retain) id principalURL;	// G=0x3305866d; S=0x3305868d; converted property
@property(readonly, assign) NSDictionary *principals;	// G=0x3305c7b5; @synthesize=_principals
@property(retain) CalDAVRefreshContext *refreshContext;	// G=0x3305c705; S=0x3305c719; @synthesize=_refreshContext
@property(retain) id scheme;	// G=0x330584b5; S=0x330584f1; converted property
@property(retain) id searchPropertySet;	// G=0x3305891d; S=0x3305892d; 
@property(assign) BOOL searchQueriesShouldCancel;	// G=0x3305c805; S=0x3305c815; @synthesize=_searchQueriesShouldCancel
@property(assign) CalDAVServerVersion *serverVersion;	// G=0x3305943d; S=0x330594ad; 
@property(readonly, assign) BOOL shouldFilterEventSyncTimeRange;	// G=0x3305967d; 
@property(readonly, assign) BOOL shouldFilterSyncTimeRangeForInbox;	// G=0x33059715; 
@property(readonly, assign) BOOL shouldFilterTodoSyncTimeRange;	// G=0x330596c9; 
@property(retain, nonatomic) NSDictionary *subscribedCalendars;	// G=0x33058129; S=0x3305808d; 
@property(readonly, assign) BOOL supportsEvents;	// G=0x330597fd; 
@property(readonly, assign) BOOL supportsReminders;	// G=0x33059781; 
@property(readonly, retain) DACoreDAVTaskManager *taskManager;	// G=0x33059805; converted property
@property(assign) BOOL useSSL;	// G=0x3305863d; S=0x33058609; converted property
@property(retain) id username;	// G=0x330581c1; S=0x330581e1; converted property
@property(readonly, assign) NSTimeZone *viewedTimeZone;	// G=0x330595f1; 
@property(assign) BOOL wasMigrated;	// G=0x33058a21; S=0x33058ad5; 
+ (Class)accountClass;	// 0x33057301
+ (Class)clientClass;	// 0x3305731d
+ (id)defaultProperties;	// 0x33056a51
+ (id)supportedDataclasses;	// 0x33057339
- (id)init;	// 0x33056b91
- (id)initWithProperties:(id)properties;	// 0x33056569
- (id)_calendarConstraintsPath;	// 0x3305995d
- (id)_calendarConstraintsResource;	// 0x33059859
- (id)_collectActionsFromMoveDictionary:(CFDictionaryRef)moveDictionary forDataclass:(id)dataclass outShouldSave:(BOOL *)anOut;	// 0x3305a7b9
- (void)_collectMoveActions;	// 0x3305ac65
- (BOOL)_needsNewAccountIDForOldVersion:(int)oldVersion;	// 0x33057b49
- (id)_oldURLsForKeychain;	// 0x330578dd
- (id)_powerAssertionContext;	// 0x3305c125
- (id)_powerAssertionGroupIdentifier;	// 0x3305c129
- (void)_setSpinning:(BOOL)spinning;	// 0x3305a019
- (void)_updateCalendarStore:(BOOL)store;	// 0x33059d09
- (BOOL)_updateCalendarStoreProperties:(void *)properties;	// 0x33059a29
- (void)_upgradeAccountToTelluride;	// 0x330573d1
- (BOOL)_upgradeSelfFromVersion:(int)version superClassUpgraded:(BOOL)upgraded;	// 0x33057b55
- (BOOL)accountNeedsUpgrade;	// 0x33057f95
- (void)addCalendar:(id)calendar;	// 0x33058b9d
- (void)addPrincipal:(id)principal;	// 0x330593a9
// declared property getter: - (int)calDAVAccountVersion;	// 0x33058149
// declared property getter: - (id)calendars;	// 0x33058c61
- (void)cancelAllSearchQueries;	// 0x3305b9f9
- (void)cancelRefresh;	// 0x3305a07d
- (void)cancelSearchQuery:(id)query;	// 0x3305b8b1
- (void)checkValidityWithConsumer:(id)consumer;	// 0x3305bee5
// declared property getter: - (id)collectionSetURL;	// 0x3305889d
- (void *)copyCalStore;	// 0x330599d5
- (void)coreDAVLogDiagnosticMessage:(id)message atLevel:(int)level;	// 0x3305c659
- (int)coreDAVLogLevel;	// 0x3305c639
- (void)coreDAVLogTransmittedDataPartial:(id)partial;	// 0x3305c6c1
- (int)coreDAVOutputLevel;	// 0x3305c651
- (void)coreDAVTransmittedDataFinished;	// 0x3305c6e1
- (void)dealloc;	// 0x33056bd1
- (void)discoveryTask:(id)task gotAccountInfo:(id)info error:(id)error;	// 0x3305bb39
- (void)dropPowerAssertions;	// 0x3305c23d
// converted property getter: - (id)host;	// 0x330583f1
- (BOOL)isCalDAVAccount;	// 0x3305c2dd
- (BOOL)isEqualToAccount:(id)account;	// 0x3305c2e1
// declared property getter: - (BOOL)isRefreshing;	// 0x3305c6e5
// declared property getter: - (BOOL)isWritable;	// 0x33058971
// declared property getter: - (id)itemIDsToMoveActions;	// 0x3305c75d
- (id)localizedIdenticalAccountFailureMessage;	// 0x3305c511
- (id)localizedInvalidPasswordMessage;	// 0x3305c589
// declared property getter: - (id)mainPrincipal;	// 0x3305c77d
// declared property getter: - (id)movedItemURLStrings;	// 0x3305c76d
// declared property getter: - (BOOL)needsAccountPropertyRefresh;	// 0x3305c73d
// declared property getter: - (id)ocurrenceCacheEndDate;	// 0x33059645
// declared property getter: - (id)ocurrenceCacheStartDate;	// 0x3305960d
// declared property getter: - (int)overriddenPort;	// 0x33058345
// declared property getter: - (id)overriddenScheme;	// 0x330583d5
// declared property getter: - (id)overriddenServer;	// 0x330582c9
- (void)performSearchQuery:(id)query;	// 0x3305b51d
// converted property getter: - (int)port;	// 0x330585bd
// declared property getter: - (int)preferredEventDaysToSync;	// 0x3305c7c5
// declared property getter: - (int)preferredToDoDaysToSync;	// 0x3305c7e5
// converted property getter: - (id)principalURL;	// 0x3305866d
// declared property getter: - (id)principals;	// 0x3305c7b5
- (id)properties;	// 0x33056e51
- (void)reattainPowerAssertions;	// 0x3305c28d
- (void)refreshActor:(id)actor didCompleteWithError:(id)error;	// 0x3305a155
// declared property getter: - (id)refreshContext;	// 0x3305c705
- (void)refreshWithContext:(id)context;	// 0x3305af69
- (void)releasePowerAssertion;	// 0x3305c19d
- (void)reloadCalendars;	// 0x330592e1
- (void)removeCalendar:(id)calendar;	// 0x33058bf5
- (void)removePrincipal:(id)principal;	// 0x33059401
- (void)retainPowerAssertion;	// 0x3305c139
// converted property getter: - (id)scheme;	// 0x330584b5
// declared property getter: - (id)searchPropertySet;	// 0x3305891d
- (BOOL)searchQueriesRunning;	// 0x3305bb05
// declared property getter: - (BOOL)searchQueriesShouldCancel;	// 0x3305c805
- (id)serverBaseURL;	// 0x330587b5
// declared property getter: - (id)serverVersion;	// 0x3305943d
- (void)setAccountDescription:(id)description;	// 0x33058859
// declared property setter: - (void)setCalDAVAccountVersion:(int)version;	// 0x3305817d
// declared property setter: - (void)setCollectionSetURL:(id)url;	// 0x330588e1
// converted property setter: - (void)setHost:(id)host;	// 0x3305842d
// declared property setter: - (void)setIsRefreshing:(BOOL)refreshing;	// 0x3305c6f5
// declared property setter: - (void)setIsWritable:(BOOL)writable;	// 0x330589dd
// declared property setter: - (void)setMainPrincipal:(id)principal;	// 0x3305c791
// declared property setter: - (void)setNeedsAccountPropertyRefresh:(BOOL)refresh;	// 0x3305c74d
// declared property setter: - (void)setOverriddenPort:(int)port;	// 0x330582e5
// declared property setter: - (void)setOverriddenScheme:(id)scheme;	// 0x33058379
// declared property setter: - (void)setOverriddenServer:(id)server;	// 0x3305826d
// converted property setter: - (void)setPort:(int)port;	// 0x33058579
// declared property setter: - (void)setPreferredEventDaysToSync:(int)sync;	// 0x3305c7d5
// declared property setter: - (void)setPreferredToDoDaysToSync:(int)sync;	// 0x3305c7f5
// converted property setter: - (void)setPrincipalURL:(id)url;	// 0x3305868d
// declared property setter: - (void)setRefreshContext:(id)context;	// 0x3305c719
// converted property setter: - (void)setScheme:(id)scheme;	// 0x330584f1
// declared property setter: - (void)setSearchPropertySet:(id)set;	// 0x3305892d
// declared property setter: - (void)setSearchQueriesShouldCancel:(BOOL)cancel;	// 0x3305c815
// declared property setter: - (void)setServerVersion:(id)version;	// 0x330594ad
// declared property setter: - (void)setSubscribedCalendars:(id)calendars;	// 0x3305808d
// converted property setter: - (void)setUseSSL:(BOOL)ssl;	// 0x33058609
// converted property setter: - (void)setUsername:(id)username;	// 0x330581e1
// declared property setter: - (void)setWasMigrated:(BOOL)migrated;	// 0x33058ad5
// declared property getter: - (BOOL)shouldFilterEventSyncTimeRange;	// 0x3305967d
// declared property getter: - (BOOL)shouldFilterSyncTimeRangeForInbox;	// 0x33059715
// declared property getter: - (BOOL)shouldFilterTodoSyncTimeRange;	// 0x330596c9
- (BOOL)shouldLogTransmittedData;	// 0x3305c69d
- (void)shutdown;	// 0x3305bb35
- (id)spinnerIdentifiers;	// 0x33059fb9
- (id)stateString;	// 0x33057369
// declared property getter: - (id)subscribedCalendars;	// 0x33058129
- (BOOL)supportsDADataclass:(int)dataclass;	// 0x33057359
// declared property getter: - (BOOL)supportsEvents;	// 0x330597fd
// declared property getter: - (BOOL)supportsReminders;	// 0x33059781
- (void)task:(id)task didFinishWithError:(id)error;	// 0x3305b205
// converted property getter: - (id)taskManager;	// 0x33059805
- (BOOL)upgradeAccount;	// 0x33057f0d
// converted property getter: - (BOOL)useSSL;	// 0x3305863d
// converted property getter: - (id)username;	// 0x330581c1
- (BOOL)usesTokenAuth;	// 0x33059801
// declared property getter: - (id)viewedTimeZone;	// 0x330595f1
// declared property getter: - (BOOL)wasMigrated;	// 0x33058a21
- (id)wellKnownPaths;	// 0x3305bd4d
@end

