/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

#import "ML3Entity.h"
#import "MusicLibrary-Structs.h"

@class NSString, NSArray, ML3Predicate;

@interface ML3Container : ML3Entity {
}
@property(readonly, assign) ML3Predicate *dynamicPredicate;	// G=0x34fb3991; 
@property(readonly, assign, getter=isLimitOrderingDescending) BOOL limitOrderingDescending;	// G=0x34fb3a21; 
@property(readonly, assign) NSArray *limitOrderingDirectionality;	// G=0x34fb3b95; 
@property(readonly, assign) NSArray *limitOrderingProperties;	// G=0x34fb3b45; 
@property(readonly, assign) long long limitValue;	// G=0x34fb3be9; 
@property(readonly, assign, getter=isLimitedByCount) BOOL limitedByCount;	// G=0x34fb39e5; 
@property(readonly, assign) NSString *limitingProperty;	// G=0x34fb3ad9; 
@property(readonly, assign) ML3Predicate *staticPredicate;	// G=0x34fb393d; 
+ (void)_insertNewSmartPlaylist:(id)playlist criteriaBlob:(id)blob limited:(BOOL)limited trackOrder:(unsigned long)order distinguishedKind:(int)kind inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x34fb2aa5
+ (id)autoCreatedBuiltInSmartPlaylistsPIDs:(id)smartPlaylistsPIDs;	// 0x34fb3445
+ (BOOL)createMissingBuiltInSmartPlaylists:(id)smartPlaylists;	// 0x34fb2dc5
+ (id)databaseTable;	// 0x34f85d01
+ (id)defaultOrderingProperties;	// 0x34f8e9d9
+ (void)deleteAutoCreatedBuiltInSmartPlaylistsPIDs:(id)smartPlaylistsPIDs inLibrary:(id)library;	// 0x34fb36e9
+ (id)extraTablesToDelete;	// 0x34fb212d
+ (id)foreignColumnForProperty:(id)property;	// 0x34fb2111
+ (id)foreignDatabaseTableForProperty:(id)property;	// 0x34fb20f5
+ (BOOL)hasCriterionInCriteriaList:(OpaqueSearchCriteriaList *)criteriaList forITDBTrackField:(int)itdbtrackField;	// 0x34fb2769
+ (void)initialize;	// 0x34f84bc9
+ (id)joinClauseForProperty:(id)property;	// 0x34f85c11
+ (id)nextFilepathForPlaylistType:(int)playlistType withPersistentID:(unsigned long long)persistentID inLibrary:(id)library;	// 0x34f906d9
+ (id)persistentIDColumnForTable:(id)table;	// 0x34f928d9
+ (void)populateDynamicContainersInLibrary:(id)library;	// 0x34fb44fd
+ (void)populateDynamicContainersInLibrary:(id)library createBuiltinSmartPlaylists:(BOOL)playlists;	// 0x34fb4521
+ (void)populateDynamicContainersWithTrackPersistentID:(id)trackPersistentID inLibrary:(id)library;	// 0x34fb4545
+ (void)populateDynamicContainersWithTrackPersistentID:(id)trackPersistentID inLibrary:(id)library createBuiltinSmartPlaylists:(BOOL)playlists;	// 0x34fb4569
+ (void)populateSortOrdersOfPropertyValues:(id)propertyValues inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x34f90d35
+ (void)populateStaticItemsOfDynamicContainersOnHandle:(sqlite3 *)dynamicContainersOnHandle;	// 0x34fb4031
+ (id)predicateForCriteriaList:(OpaqueSearchCriteriaList *)criteriaList dynamicCriteria:(BOOL)criteria;	// 0x34fb2815
+ (int)revisionTrackingCode;	// 0x34f92941
+ (id)sectionPropertyForProperty:(id)property;	// 0x34fb20d9
+ (BOOL)smartCriteriaCanBeEvaluated:(id)evaluated;	// 0x34fb213d
- (id)initWithDictionary:(id)dictionary inLibrary:(id)library cachedNameOrders:(id)orders;	// 0x34f90199
- (void)_accessCurrentSwappedPersisentIDsUsingBlock:(id)block;	// 0x34fb4e5d
- (BOOL)_setSwappedItemPersistentIDs:(const long long *)ids size:(int)size;	// 0x34fb4e15
- (BOOL)_setSwappedItemPersistentIDs:(const long long *)ids size:(int)size notify:(BOOL)notify;	// 0x34fb4b81
- (BOOL)addTrackWithPersistentID:(long long)persistentID;	// 0x34fb58b9
- (BOOL)addTracksWithPersistentIDs:(long long *)persistentIDs count:(unsigned)count;	// 0x34fb58e5
- (BOOL)addTracksWithPersistentIDs:(long long *)persistentIDs count:(unsigned)count notify:(BOOL)notify;	// 0x34fb5909
- (void)bindPopulateStatement:(sqlite3_stmt *)statement withStaticTrackPersistentID:(id)staticTrackPersistentID;	// 0x34fb3fd1
// declared property getter: - (id)dynamicPredicate;	// 0x34fb3991
- (void)getDisplayOrderingProperties:(id *)properties isDescending:(BOOL *)descending;	// 0x34fb3c7d
- (OpaqueSearchCriteriaList *)importedCriteriaList;	// 0x34fb38c5
- (BOOL)isCustomContainerOrderingDescending;	// 0x34fb3a9d
// declared property getter: - (BOOL)isLimitOrderingDescending;	// 0x34fb3a21
// declared property getter: - (BOOL)isLimitedByCount;	// 0x34fb39e5
// declared property getter: - (id)limitOrderingDirectionality;	// 0x34fb3b95
// declared property getter: - (id)limitOrderingProperties;	// 0x34fb3b45
// declared property getter: - (long long)limitValue;	// 0x34fb3be9
// declared property getter: - (id)limitingProperty;	// 0x34fb3ad9
- (BOOL)moveTrackFromIndex:(unsigned)index toIndex:(unsigned)index2;	// 0x34fb5ca5
- (id)populateSQLWithStaticTrackPersistentID:(id)staticTrackPersistentID;	// 0x34fb3e19
- (BOOL)removeAllTracks;	// 0x34fb4e39
- (BOOL)removeTracksAtIndexes:(id)indexes;	// 0x34fb5759
- (BOOL)removeTracksAtIndexes:(id)indexes notify:(BOOL)notify;	// 0x34fb5735
- (BOOL)removeTracksAtIndexes:(id)indexes notify:(BOOL)notify indexesTransformBlock:(id)block;	// 0x34fb4ff9
- (BOOL)removeTracksWithPersistentIDs:(const long long *)persistentIDs atFilteredIndexes:(id)filteredIndexes;	// 0x34fb5779
- (BOOL)setContainsTrack:(BOOL)track forPersistentID:(long long)persistentID notify:(BOOL)notify;	// 0x34fb5465
- (BOOL)setTracksWithPersistentIDs:(const long long *)persistentIDs count:(unsigned)count;	// 0x34fb60b1
- (BOOL)setTracksWithPersistentIDs:(const long long *)persistentIDs count:(unsigned)count notify:(BOOL)notify;	// 0x34fb60d5
- (BOOL)setTracksWithSwappedPersistentIDData:(id)swappedPersistentIDData;	// 0x34fb6419
- (BOOL)setValue:(id)value forProperty:(id)property;	// 0x34fb2345
// declared property getter: - (id)staticPredicate;	// 0x34fb393d
@end

