/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

#import "MusicLibrary-Structs.h"
#import <NSObject.h> // Unknown library

@class ML3DatabaseMetadata, ML3NondurableWriteSet, ML3UbiquitousDatabase, NSString, NSMutableArray, ML3Container, NSArray, ML3MusicLibrary_SQLiteDatabaseContext;

@interface ML3MusicLibrary : NSObject {
@private
	ML3MusicLibrary_SQLiteDatabaseContext *_mainDatabaseContext;	// 4 = 0x4
	ML3MusicLibrary_SQLiteDatabaseContext *_backgroundDatabaseContext;	// 8 = 0x8
	ML3UbiquitousDatabase *_ubiquitousDatabase;	// 12 = 0xc
	dispatch_queue_s *_backgroundQueue;	// 16 = 0x10
	opaque_pthread_t *_backgroundQueueOwner;	// 20 = 0x14
	NSString *_path;	// 24 = 0x18
	NSMutableArray *_pendingNotifyPostNames;	// 28 = 0x1c
	NSString *_notifyName;	// 32 = 0x20
	int _notifyToken;	// 36 = 0x24
	NSString *_nonContentsNotifyName;	// 40 = 0x28
	int _nonContentsNotifyToken;	// 44 = 0x2c
	NSString *_displayValuesNotifyName;	// 48 = 0x30
	int _displayValuesNotifyToken;	// 52 = 0x34
	NSString *_syncGenerationNotifyName;	// 56 = 0x38
	int _syncGenerationNotifyToken;	// 60 = 0x3c
	BOOL _enableWrites;	// 64 = 0x40
	BOOL _requiresProcessAssertion;	// 65 = 0x41
	int _backupDisabledCount;	// 68 = 0x44
	BOOL _backupNeeded;	// 72 = 0x48
	BOOL _hasEverConnectedToDatabase;	// 73 = 0x49
	id _mcSettingsObserver;	// 76 = 0x4c
	dispatch_queue_s *_nondurableConcurrentQueue;	// 80 = 0x50
	ML3NondurableWriteSet *_nondurableWriteSet;	// 84 = 0x54
	NSString *_artworkDirectory;	// 88 = 0x58
	BOOL _artworkDirectoryFilesystemRepresentation[1024];	// 92 = 0x5c
}
@property(readonly, assign) long long autoFilledTracksTotalSize;	// G=0x34fa4cc1; 
@property(readonly, assign) long long currentRevision;	// G=0x34fa4939; 
@property(readonly, assign) ML3DatabaseMetadata *databaseInfo;	// G=0x34f92e61; 
@property(readonly, assign, nonatomic) BOOL hasEverConnectedToDatabase;	// G=0x34f8dc59; @synthesize=_hasEverConnectedToDatabase
@property(readonly, assign) NSArray *localizedSectionIndexTitles;	// G=0x34f8bb6d; 
@property(readonly, retain) ML3MusicLibrary_SQLiteDatabaseContext *mainDatabaseContext;	// G=0x34f86951; converted property
@property(readonly, assign) BOOL mediaRestrictionEnabled;	// G=0x34f8b5e1; 
@property(readonly, assign, nonatomic, getter=isNondurableWritingActive) BOOL nondurableWritingActive;	// G=0x34f90ee1; 
@property(readonly, assign) NSString *path;	// G=0x34f8548d; @synthesize=_path
@property(readonly, assign) long long persistentID;	// G=0x34fa47cd; 
@property(readonly, assign) NSArray *preferredAudioTracks;	// G=0x34f92e05; 
@property(readonly, assign) NSArray *preferredSubtitleTracks;	// G=0x34f92f7d; 
@property(readonly, assign) ML3Container *purchasedTracksPlaylist;	// G=0x34fa29c9; 
@property(readonly, assign) BOOL requiresPostProcessing;	// G=0x34f854a1; 
@property(assign) long long syncGenerationID;	// G=0x34f8d7f5; S=0x34fa4aa5; 
@property(readonly, retain) ML3UbiquitousDatabase *ubiquitousDatabase;	// G=0x34f88469; converted property
@property(readonly, assign, nonatomic) BOOL writable;	// G=0x34f84745; 
+ (id)_autoFillTrackPredicate;	// 0x34fa4c29
+ (sqlite3 *)_openedDatabaseHandleForPath:(id)path enableWrites:(BOOL)writes forLibrary:(id)library;	// 0x34f86a01
+ (void)_stepStatement:(sqlite3_stmt *)statement hasRow:(BOOL *)row didFinish:(BOOL *)finish;	// 0x34f87e61
+ (id)allSchemaSQL;	// 0x34fc1add
+ (MLArtworkFormatSpec)artworkFormatSpecForArtworkFormatID:(unsigned)artworkFormatID;	// 0x34f8f0dd
+ (BOOL)buildDatabaseTablesUsingHandle:(sqlite3 *)handle usingTransaction:(BOOL)transaction;	// 0x34fc1e51
+ (void)closeDatabaseHandle:(sqlite3 *)handle;	// 0x34fa1795
+ (BOOL)createIndexesUsingHandle:(sqlite3 *)handle;	// 0x34fc3805
+ (int)currentUserVersion;	// 0x34f88299
+ (BOOL)dropIndexesUsingHandle:(sqlite3 *)handle;	// 0x34fc37e5
+ (BOOL)dropIndexesUsingHandle:(sqlite3 *)handle tableNames:(const char *)names;	// 0x34fc35e5
+ (void)enumerateSortMapTablesUsingBlock:(id)block;	// 0x34fa4269
+ (BOOL)executeSQL:(id)sql usingHandle:(sqlite3 *)handle;	// 0x34f8ba7d
+ (BOOL)executeSQL:(id)sql usingHandle:(sqlite3 *)handle waitIfBusy:(BOOL)busy;	// 0x34f8baa1
+ (BOOL)importationEnabled;	// 0x34fa0ab5
+ (id)indexSchemaSQL;	// 0x34fc1d2d
+ (void)initialize;	// 0x34f840c5
+ (id)itemIndexSchemaSQL;	// 0x34fc1cb5
+ (id)itemSchemaSQL;	// 0x34fc1ad1
+ (id)localizedSectionHeaderForSectionHeader:(id)sectionHeader;	// 0x34f8d6ed
+ (id)localizedSectionIndexTitleForSectionHeader:(id)sectionHeader;	// 0x34f8cc5d
+ (id)mainDatabasePath;	// 0x34f846b1
+ (BOOL)migrateToCurrentUserVersionUsingHandle:(sqlite3 *)currentUserVersionUsingHandle;	// 0x34fc25b1
+ (sqlite3 *)openedDatabaseHandleForPath:(id)path enableWrites:(BOOL)writes;	// 0x34fa1201
+ (BOOL)orderingLanguageMatchesSystemUsingHandle:(sqlite3 *)handle;	// 0x34f882a5
+ (unsigned)readableArtworkFormatIDForArtworkFormatID:(unsigned)artworkFormatID;	// 0x34fa55a1
+ (BOOL)schemaExactlyMatchesSystemUsingHandle:(sqlite3 *)handle;	// 0x34fc2271
+ (id)sectionIndexTitleForSectionHeader:(id)sectionHeader;	// 0x34f8c8d9
+ (id)sectionIndexTitles;	// 0x34f8c865
+ (void)setImportationEnabled:(BOOL)enabled;	// 0x34f841a1
+ (id)sharedLibrary;	// 0x34f8429d
+ (id)sortMapSchemaSQL;	// 0x34fc1ac5
+ (BOOL)statementDidFinishAfterStepping:(sqlite3_stmt *)statement;	// 0x34f92181
+ (BOOL)statementHasRowAfterStepping:(sqlite3_stmt *)stepping;	// 0x34f87e39
+ (id)storeLinkSchemaSQL;	// 0x34fc1ab9
+ (id)systemCurrentLanguage;	// 0x34f883cd
+ (BOOL)updateSortMapOnHandle:(sqlite3 *)handle usingTransaction:(BOOL)transaction;	// 0x34fc56d1
+ (BOOL)userVersionMatchesSystemUsingHandle:(sqlite3 *)handle;	// 0x34f88115
+ (int)userVersionUsingHandle:(sqlite3 *)handle;	// 0x34f88175
- (id)initWithPath:(id)path enableWrites:(BOOL)writes;	// 0x34f842c9
- (void)_accessAccountCacheDBForSQL:(id)sql usingBlock:(id)block;	// 0x34fa71d9
- (void)_accessDatabaseContextUsingBlock:(id)block;	// 0x34f868d5
- (BOOL)_commitNondurableWrites;	// 0x34f9197d
- (void)_delayableNotifyPost:(id)post;	// 0x34f92aa1
- (void)_dispatchBackgroundAsynchronouslyUsingBlock:(id)block;	// 0x34fa1b89
- (void)_dispatchBackgroundSynchronouslyUsingBlock:(id)block;	// 0x34f88005
- (BOOL)_insertImageBytes:(const void *)bytes length:(unsigned long)length forCacheID:(id)cacheID formatID:(unsigned)anId imageSubRect:(CGRect)rect;	// 0x34fa58ed
- (id)_insertStringsIntoSortMapOrFail:(id)fail;	// 0x34fc4011
- (BOOL)_mustProcessLanguageChange;	// 0x34fa43b1
- (void)_onBackgroundQueuePerformBlock:(id)block;	// 0x34f88079
- (void)_postChangeNotificationAndScheduleFlushLocalOnly:(BOOL)only;	// 0x34f9299d
- (void)_postDisplayValuesChangeNotificationLocalOnly:(BOOL)only;	// 0x34fa4201
- (void)_postNonContentsChangeNotificationAndScheduleFlushLocalOnly:(BOOL)only;	// 0x34f93a0d
- (void)_scheduleCommitNondurableWritesAfterTimeInterval:(double)interval;	// 0x34fa8345
- (BOOL)_writeImageBytes:(const void *)bytes length:(unsigned long)length formatID:(unsigned)anId cacheID:(id)anId4;	// 0x34fa57f9
- (void)accessDatabaseUsingBlock:(id)block;	// 0x34f87fb1
- (void)accessSortKeyBuilder:(id)builder;	// 0x34f8c1c9
- (long long)addStringToSortMap:(id)sortMap;	// 0x34fa4431
- (id)albumArtistForEffectiveAlbumArtistName:(id)effectiveAlbumArtistName;	// 0x34fb8bb9
- (id)albumForAlbumArtistPersistentID:(long long)albumArtistPersistentID albumName:(id)name feedURL:(id)url seasonNumber:(id)number compilation:(BOOL)compilation;	// 0x34faded1
- (id)appleIDForDSID:(unsigned long long)dsid;	// 0x34fa745d
- (void)applyUbiquitousBookmarksToTrack:(id)track;	// 0x34fa80cd
- (id)artistForArtistName:(id)artistName seriesName:(id)name;	// 0x34fad751
- (id)artworkDataForCacheID:(id)cacheID formatID:(unsigned)anId;	// 0x34fa52c1
// declared property getter: - (long long)autoFilledTracksTotalSize;	// 0x34fa4cc1
- (id)backgroundQueue_backgroundDatabaseContext;	// 0x34f880b1
- (BOOL)buildDatabaseTables;	// 0x34fc20f9
- (BOOL)coerceValidDatabase;	// 0x34fc3bdd
- (BOOL)compactArtwork;	// 0x34fa695d
- (id)composerForComposerName:(id)composerName;	// 0x34fb8369
- (BOOL)createIndexes;	// 0x34fc3a41
// declared property getter: - (long long)currentRevision;	// 0x34fa4939
// declared property getter: - (id)databaseInfo;	// 0x34f92e61
- (void)dealloc;	// 0x34fa1059
- (BOOL)deleteAllArtwork;	// 0x34fa6411
- (BOOL)deleteAndRecreateDatabaseUsingHandle:(sqlite3 **)handle;	// 0x34fc32e9
- (BOOL)deleteArtworkForCacheID:(id)cacheID;	// 0x34fa6609
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)leastTotalSize;	// 0x34fa4e89
- (BOOL)dropItemIndexes;	// 0x34fc38c1
- (void)enumeratePersistentIDsAfterRevision:(long long)revision usingBlock:(id)block;	// 0x34fa4b09
- (BOOL)executeSQL:(id)sql;	// 0x34fa17d9
- (id)genreForGenre:(id)genre;	// 0x34fb179d
- (id)groupingKeyForString:(id)string;	// 0x34fa1e55
- (BOOL)hasArtworkForCacheID:(id)cacheID;	// 0x34fa55ed
- (BOOL)hasArtworkForCacheID:(id)cacheID ensureArtworkFileExists:(BOOL)exists;	// 0x34fa5605
// declared property getter: - (BOOL)hasEverConnectedToDatabase;	// 0x34f8dc59
- (BOOL)insertArtworkWithImageData:(id)imageData forCacheID:(id)cacheID;	// 0x34fa5b55
- (long long)insertStringIntoSortMapNoTransaction:(id)transaction;	// 0x34f91d09
- (id)insertStringsIntoSortMap:(id)map;	// 0x34fc50c5
// declared property getter: - (BOOL)isNondurableWritingActive;	// 0x34f90ee1
- (BOOL)isReadable;	// 0x34fa442d
- (void)loadArtworkForCacheID:(id)cacheID formatID:(unsigned)anId completionHandler:(id)handler;	// 0x34f92bfd
- (id)localizedSectionHeaderForSectionIndex:(unsigned)sectionIndex;	// 0x34f8c031
// declared property getter: - (id)localizedSectionIndexTitles;	// 0x34f8bb6d
- (id)locationKindForKind:(id)kind;	// 0x34fc7d15
// converted property getter: - (id)mainDatabaseContext;	// 0x34f86951
// declared property getter: - (BOOL)mediaRestrictionEnabled;	// 0x34f8b5e1
- (BOOL)migrateLegacyArtworkFromArtworkBlobFilePath:(id)artworkBlobFilePath;	// 0x34fa6e85
- (void)migratePresignedValidity;	// 0x34fa0e15
- (XXStruct_Cy4r_A)nameOrderForString:(id)string;	// 0x34f90d99
- (id)nondurableWriteSetForReading;	// 0x34f87d0d
- (id)nondurableWriteSetForWriting;	// 0x34f91341
- (void)notifyContentsDidChange;	// 0x34f92949
- (void)notifyDisplayValuesPropertyDidChange;	// 0x34fa291d
- (void)notifyNonContentsPropertyDidChange;	// 0x34f939b9
- (sqlite3 *)openedDatabaseHandle;	// 0x34f869b5
// declared property getter: - (id)path;	// 0x34f8548d
- (void)performTransactionAllowingWrites:(BOOL)writes withBlock:(id)block;	// 0x34f8b791
- (void)performTransactionKind:(int)kind waitIfBusy:(BOOL)busy withBlock:(id)block;	// 0x34f8b7bd
- (void)performTransactionKind:(int)kind withBlock:(id)block;	// 0x34fa2205
- (void)performTransactionWithBlock:(id)block;	// 0x34f92541
// declared property getter: - (long long)persistentID;	// 0x34fa47cd
- (BOOL)populateArtworkCacheWithArtworkData:(id)artworkData trackValues:(id)values;	// 0x34fbe85d
- (BOOL)populateStaticItemsOfDynamicContainers;	// 0x34fa193d
// declared property getter: - (id)preferredAudioTracks;	// 0x34f92e05
// declared property getter: - (id)preferredSubtitleTracks;	// 0x34f92f7d
- (void)prepareStatementForSQL:(id)sql cache:(BOOL)cache usingBlock:(id)block;	// 0x34f86825
- (void)prepareStatementForSQL:(id)sql usingBlock:(id)block;	// 0x34f867e1
- (void)prepareStatementForSQLPrefix:(id)sqlprefix inPersistentIDs:(const long long *)persistentIDs count:(unsigned)count usingBlock:(id)block;	// 0x34fa0675
// declared property getter: - (id)purchasedTracksPlaylist;	// 0x34fa29c9
- (void)reconnectBackgroundDatabaseContext;	// 0x34fa1ae1
- (void)reconnectMainDatabaseContext;	// 0x34fa1a91
- (void)reconnectToDatabase;	// 0x34fa1c39
- (void)removeOrphanedTracks;	// 0x34fa848d
// declared property getter: - (BOOL)requiresPostProcessing;	// 0x34f854a1
- (BOOL)resetAllContents;	// 0x34fc609d
- (void)savePlaylists;	// 0x34fa3641
- (void)savePlaylistsSinceRevision:(long long)revision withGrappaID:(unsigned)grappaID;	// 0x34fa3665
- (void)saveTrackMetadata;	// 0x34fa2e41
- (void)saveTrackMetadataSinceRevision:(long long)revision withGrappaID:(unsigned)grappaID;	// 0x34fa2e65
- (unsigned)sectionIndexTitleIndexForSectionIndex:(unsigned)sectionIndex;	// 0x34f8c295
- (BOOL)setAppleID:(id)anId forDSID:(unsigned long long)dsid;	// 0x34fa72cd
// declared property setter: - (void)setSyncGenerationID:(long long)anId;	// 0x34fa4aa5
- (BOOL)setValue:(id)value forDatabaseProperty:(id)databaseProperty;	// 0x34fa767d
// declared property getter: - (long long)syncGenerationID;	// 0x34f8d7f5
- (double)timestampForAppliedUbiquitousBookmarkKey:(id)appliedUbiquitousBookmarkKey;	// 0x34fa781d
// converted property getter: - (id)ubiquitousDatabase;	// 0x34f88469
- (BOOL)updateActivePlaylistNamesForCurrentLanguage;	// 0x34fb912d
- (void)updateOrderingLanguagesForCurrentLanguage;	// 0x34fb9275
- (BOOL)updateSortMap;	// 0x34fa4615
- (void)updateTrackIntegrity;	// 0x34fa103d
- (void)updateUbiquitousBookmarksFromTrack:(id)track;	// 0x34fa7f81
- (void)updateUbiquitousBookmarksWithKey:(id)key bookmarkTime:(id)time timestamp:(double)timestamp;	// 0x34fa7a51
- (id)valueForDatabaseProperty:(id)databaseProperty;	// 0x34f8d829
// declared property getter: - (BOOL)writable;	// 0x34f84745
@end

