/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/CoreData.framework/CoreData
 */

#import <NSObject.h> // Unknown library
#import "CoreData-Structs.h"

@class NSSQLAdapter, NSArray, NSSQLStatement;

__attribute__((visibility("hidden")))
@interface NSSQLConnection : NSObject {
@private
	NSSQLAdapter *_adapter;	// 4 = 0x4
	BOOL _transactionIsOpen;	// 8 = 0x8
	BOOL _useSyntaxColoredLogging;	// 9 = 0x9
	int _debug;	// 12 = 0xc
	NSSQLStatement *_sqlStatement;	// 16 = 0x10
	NSArray *_columnsToFetch;	// 20 = 0x14
	NSArray *_metadataColumns;	// 24 = 0x18
}
@property(readonly, retain) NSSQLAdapter *adapter;	// G=0x3225e515; converted property
@property(retain) NSArray *columnsToFetch;	// G=0x32261461; S=0x32261481; converted property
@property(readonly, retain) NSArray *metadataColumns;	// G=0x322614c9; converted property
@property(readonly, retain) NSSQLStatement *sqlStatement;	// G=0x32260ddd; converted property
+ (void)initialize;	// 0x32286789
- (id)initWithAdapter:(id)adapter;	// 0x3225d9d5
- (void)_forceDisconnectOnError;	// 0x32303be9
- (void)_performPostSaveTasks;	// 0x32303be5
- (void)_raiseOptimisticLockingExceptionWithReason:(id)reason;	// 0x32305745
// converted property getter: - (id)adapter;	// 0x3225e515
- (void)addPeerRangeForPeerID:(id)peerID entityName:(id)name rangeStart:(id)start rangeEnd:(id)end peerRangeStart:(id)start5 peerRangeEnd:(id)end6;	// 0x32304175
- (id)allPeerRanges;	// 0x32304141
- (void)awake;	// 0x32303bad
- (void)beginTransaction;	// 0x323056d1
- (BOOL)canConnect;	// 0x323055cd
// converted property getter: - (id)columnsToFetch;	// 0x32261461
- (void)commitTransaction;	// 0x3230569d
- (void)connect;	// 0x32305635
- (void)createIndexesForEntity:(id)entity;	// 0x32304b7d
- (void)createManyToManyTablesForEntity:(id)entity;	// 0x32303de1
- (id)createMapOfEntityNameToPKMaxForEntities:(id)entities;	// 0x323040a5
- (id)createMapOfEntityNameToPKMaxForEntitiesFromPKTable:(id)pktable;	// 0x323040d9
- (id)createMapOfEntityNameToPKMaxForEntitiesFromUBRangeTable:(id)ubrangeTable;	// 0x3230410d
- (void)createMetadata;	// 0x32303f41
- (void)createPrimaryKeyTableForModel:(id)model knownEmpty:(BOOL)empty;	// 0x32304245
- (void)createSchema;	// 0x32304869
- (void)createTableForEntity:(id)entity;	// 0x32303d71
- (void)createTablesForEntities:(id)entities;	// 0x32303eb9
- (BOOL)databaseIsEmpty;	// 0x32305599
- (void)dealloc;	// 0x3227ecb5
- (void)deleteCorrelation:(id)correlation;	// 0x32305495
- (void)deleteRow:(id)row;	// 0x3230542d
- (id)describeResults;	// 0x3230535d
- (void)didCreateSchema;	// 0x32303bd1
- (void)disconnect;	// 0x32305601
- (void)endFetch;	// 0x323052c1
- (void)endPrimaryKeyGeneration;	// 0x32303be1
- (void)execute;	// 0x323053c5
- (long long)fetchMaxPrimaryKeyForEntity:(id)entity;	// 0x32304801
- (id)fetchMetadata;	// 0x3225f815
- (int)fetchResultSet:(void *)set usingFetchPlan:(id)plan;	// 0x323052f5
- (id)fetchTableCreationSQL;	// 0x32304799
- (id)fetchTableNames;	// 0x323047cd
- (id)fetchUbiqiutyKnowledgeVector;	// 0x32304211
- (void)finalize;	// 0x32305705
- (void)forceTransactionClosed;	// 0x32303bb5
- (long long)generatePrimaryKeysForEntity:(id)entity batch:(unsigned)batch;	// 0x32303bd5
- (BOOL)hasMetadataTable;	// 0x32304765
- (BOOL)hasOpenTransaction;	// 0x3227e6d5
- (BOOL)hasPrimaryKeyTable;	// 0x32304365
- (void)insertCorrelation:(id)correlation;	// 0x323054fd
- (void)insertRow:(id)row;	// 0x32305531
- (BOOL)isFetchInProgress;	// 0x32305391
- (BOOL)isOpen;	// 0x32305565
// converted property getter: - (id)metadataColumns;	// 0x322614c9
- (id)newFetchedArray;	// 0x32305329
- (void)performAdapterOperation:(id)operation;	// 0x323051b9
- (void)performAdapterOperations:(id)operations;	// 0x32305111
- (void)prepareAndExecuteSQLStatement:(id)statement;	// 0x32303d2d
- (void)prepareForPrimaryKeyGeneration;	// 0x32303bdd
- (void)prepareSQLStatement:(id)statement;	// 0x3226036d
- (CFArrayRef)rawIntegerRowsForSQL:(id)sql;	// 0x32304835
- (void)releaseSQLStatement;	// 0x32262335
- (void)resetSQLStatement;	// 0x32303d01
- (void)rollbackTransaction;	// 0x32305669
- (void)saveMetadata:(id)metadata;	// 0x32304399
- (void)selectAttributes:(id)attributes fetchRequest:(id)request lock:(BOOL)lock entity:(id)entity;	// 0x323053f9
// converted property setter: - (void)setColumnsToFetch:(id)fetch;	// 0x32261481
- (void)setExclusiveLockingMode:(BOOL)mode;	// 0x32303bc9
- (void)setUbiquityTableValue:(id)value forKey:(id)key;	// 0x32304071
- (void)sleep;	// 0x32303bb1
// converted property getter: - (id)sqlStatement;	// 0x32260ddd
- (void)transactionDidBegin;	// 0x32303bf9
- (void)transactionDidCommit;	// 0x32303c51
- (void)transactionDidRollback;	// 0x32303ca9
- (id)ubiquityTableKeysAndValues;	// 0x3230403d
- (id)ubiquityTableValueForKey:(id)key;	// 0x32304009
- (void)updateCorrelation:(id)correlation;	// 0x323054c9
- (void)updateRow:(id)row;	// 0x32305461
- (void)updateUbiquityKnowledgeForPeerWithID:(id)anId andTransactionNumber:(id)number;	// 0x323041a9
- (void)updateUbiquityKnowledgeVector:(id)vector;	// 0x323041dd
- (void)willCreateSchema;	// 0x32303bcd
@end

