/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/UIKit.framework/UIKit
 */

#import "UIKit-Structs.h"
#import "UIKeyboardLayout.h"

@class UISwipeGestureRecognizer, UIKBKeyplaneView, UIDelayedAction, UIKBBackgroundView, NSMutableDictionary, NSMutableSet, NSTimer, UIKBTree, CADisplayLink, NSString;
@protocol UIKeyboardRivenTransitionView;

__attribute__((visibility("hidden")))
@interface UIKeyboardLayoutStar : UIKeyboardLayout {
@private
	UIKBTree *_keyboard;	// 76 = 0x4c
	UIKBTree *_keyplane;	// 80 = 0x50
	NSString *_keyboardName;	// 84 = 0x54
	NSString *_keyplaneName;	// 88 = 0x58
	int _appearance;	// 92 = 0x5c
	UIKBTree *_activeKey;	// 96 = 0x60
	UIKBKeyplaneView *_keyplaneView;	// 100 = 0x64
	UIKBBackgroundView *_backgroundView;	// 104 = 0x68
	int _keyboardType;	// 108 = 0x6c
	CGPoint _initialDragPoint;	// 112 = 0x70
	CGPoint _dragPrevPoint;	// 120 = 0x78
	float _dragValues[4];	// 128 = 0x80
	float _dragVelocity;	// 144 = 0x90
	double _prevTouchUpTime;	// 148 = 0x94
	double _prevTouchDownTime;	// 156 = 0x9c
	int _prevUpActions;	// 164 = 0xa4
	NSMutableDictionary *_keyboards;	// 168 = 0xa8
	NSMutableDictionary *_allKeyplaneViews;	// 172 = 0xac
	NSMutableSet *_allKeyplaneKeycaps;	// 176 = 0xb0
	NSMutableSet *_validInputStrings;	// 180 = 0xb4
	NSString *_localizedInputKey;	// 184 = 0xb8
	CFDictionaryRef _extendedTouchInfoMap;	// 188 = 0xbc
	int _preferredTrackingChangeCount;	// 192 = 0xc0
	int _shiftTrackingChangeCount;	// 196 = 0xc4
	NSMutableSet *_accentInfo;	// 200 = 0xc8
	NSMutableSet *_hasAccents;	// 204 = 0xcc
	NSMutableDictionary *_delegatesForKeyplaneKeys;	// 208 = 0xd0
	id _spaceTarget;	// 212 = 0xd4
	SEL _spaceAction;	// 216 = 0xd8
	SEL _spaceLongAction;	// 220 = 0xdc
	id _returnTarget;	// 224 = 0xe0
	SEL _returnAction;	// 228 = 0xe4
	SEL _returnLongAction;	// 232 = 0xe8
	id _deleteTarget;	// 236 = 0xec
	SEL _deleteAction;	// 240 = 0xf0
	SEL _deleteLongAction;	// 244 = 0xf4
	BOOL _secureTextEntry;	// 248 = 0xf8
	BOOL _shift;	// 249 = 0xf9
	BOOL _autoshift;	// 250 = 0xfa
	BOOL _settingShift;	// 251 = 0xfb
	BOOL _didLongPress;	// 252 = 0xfc
	BOOL _dragged;	// 253 = 0xfd
	BOOL _dragChangedKey;	// 254 = 0xfe
	BOOL _touchDownInMoreKey;	// 255 = 0xff
	BOOL _touchDownInShiftKey;	// 256 = 0x100
	BOOL _wasShifted;	// 257 = 0x101
	BOOL _dragDismissStarted;	// 258 = 0x102
	BOOL _swipeDetected;	// 259 = 0x103
	BOOL _previousTouchInMore;	// 260 = 0x104
	BOOL _showIntlKey;	// 261 = 0x105
	BOOL _showDictationKey;	// 262 = 0x106
	BOOL _shiftLockReady;	// 263 = 0x107
	double _shiftLockFirstTapTime;	// 264 = 0x108
	UISwipeGestureRecognizer *_rightSwipeRecognizer;	// 272 = 0x110
	UISwipeGestureRecognizer *_leftSwipeRecognizer;	// 276 = 0x114
	UISwipeGestureRecognizer *_upSwipeRecognizer;	// 280 = 0x118
	UIView<UIKeyboardRivenTransitionView> *_transitionView;	// 284 = 0x11c
	float _initialSplitProgress;	// 288 = 0x120
	float _finalSplitProgress;	// 292 = 0x124
	float _initialPinchSeparation;	// 296 = 0x128
	float _pinchSeparationValues[4];	// 300 = 0x12c
	BOOL _pinchDetected;	// 316 = 0x13c
	double _autoSplitLastUpdate;	// 320 = 0x140
	float _autoSplitElapsedTime;	// 328 = 0x148
	CADisplayLink *_displayLink;	// 332 = 0x14c
	BOOL _ghostKeysEnabled;	// 336 = 0x150
	UIDelayedAction *_delayedCentroidUpdate;	// 340 = 0x154
	BOOL _isRebuilding;	// 344 = 0x158
	BOOL _preRotateShift;	// 345 = 0x159
	NSString *_preRotateKeyplaneName;	// 348 = 0x15c
	CGPoint _keyPeripheralInset;	// 352 = 0x160
	int _lastFlickDirection;	// 360 = 0x168
	UIView *_flickPopupView;	// 364 = 0x16c
	NSMutableDictionary *_compositeImages;	// 368 = 0x170
	NSTimer *_flickPopuptimer;	// 372 = 0x174
	id _touchInfo;	// 376 = 0x178
	BOOL _popupViewIsShown;	// 380 = 0x17c
	UIView *_dimKeyboardImageView;	// 384 = 0x180
	BOOL _keyboardImageViewIsDim;	// 388 = 0x184
	BOOL _isOutOfBounds;	// 389 = 0x185
}
@property(retain, nonatomic) UIKBTree *activeKey;	// G=0x3017ad85; S=0x30128e9d; @synthesize=_activeKey
@property(assign, nonatomic) BOOL autoShift;	// G=0x302d049d; S=0x302d04ad; @synthesize=_autoshift
@property(assign, nonatomic) BOOL didLongPress;	// G=0x302d04bd; S=0x302d04cd; @synthesize=_didLongPress
@property(readonly, assign, nonatomic) UIKBTree *keyboard;	// G=0x301b8e41; @synthesize=_keyboard
@property(copy, nonatomic) NSString *keyboardName;	// G=0x302d0459; S=0x302d0469; @synthesize=_keyboardName
@property(readonly, assign, nonatomic) UIKBTree *keyplane;	// G=0x30107e75; @synthesize=_keyplane
@property(copy, nonatomic) NSString *keyplaneName;	// G=0x30107e85; S=0x30107e95; @synthesize=_keyplaneName
@property(copy, nonatomic) NSString *localizedInputKey;	// G=0x302d04fd; S=0x30107e51; @synthesize=_localizedInputKey
@property(readonly, assign, nonatomic) NSString *localizedInputMode;	// G=0x30107e09; 
@property(readonly, assign) BOOL pinchDetected;	// G=0x30111585; converted property
@property(readonly, assign, nonatomic, getter=isRotating) BOOL rotating;	// G=0x3010f9ad; 
@property(assign, nonatomic) BOOL shift;	// G=0x302d048d; S=0x30110f7d; @synthesize=_shift
@property(readonly, assign, nonatomic) BOOL showDictationKey;	// G=0x302d04ed; @synthesize=_showDictationKey
@property(assign, nonatomic) BOOL showIntlKey;	// G=0x3010da35; S=0x302d04dd; @synthesize=_showIntlKey
- (id)initWithFrame:(CGRect)frame;	// 0x30106931
- (void)_autoSplit:(id)split;	// 0x302cf6a9
- (void)activateCompositeKey:(id)key direction:(int)direction flickString:(id)string popupInfo:(id)info;	// 0x302d1ce5
- (id)activationIndicatorView;	// 0x302cdf59
// declared property getter: - (id)activeKey;	// 0x3017ad85
- (id)activeTouchForKey:(id)key;	// 0x301b4501
- (CGPoint)applyError:(CGPoint)error toKey:(id)key;	// 0x301b94a5
// declared property getter: - (BOOL)autoShift;	// 0x302d049d
- (BOOL)backgroundNeedsRedraw;	// 0x302cbd75
- (id)baseKeyForString:(id)string;	// 0x301b8ae5
- (id)cacheIdentifierForKeyplaneNamed:(id)keyplaneNamed withVisualStyle:(int)visualStyle;	// 0x3010d975
- (id)cachedKeyplaneNameForKeyplane:(id)keyplane;	// 0x3010d7cd
- (BOOL)canProduceString:(id)string;	// 0x301b88c5
- (BOOL)canReuseKeyplaneView;	// 0x3013a7c9
- (void)cancelTouchIfNecessaryForInfo:(id)info;	// 0x30134e41
- (id)candidateList;	// 0x30108ef5
- (void)changeToKeyplane:(id)keyplane;	// 0x301b93b5
- (void)clearAllKeyDelegates;	// 0x30109071
- (void)clearAllTouchInfo;	// 0x30109489
- (void)clearHandwritingStrokesIfNeeded;	// 0x30126331
- (void)clearInfoForTouch:(id)touch;	// 0x30134df9
- (void)clearUnusedObjects;	// 0x302cb02d
- (id)compositeImageForKey:(id)key;	// 0x302d0f11
- (void)confirmAction;	// 0x302cccc1
- (void)deactivateActiveKeys;	// 0x30135ced
- (void)deactivateActiveKeysClearingTouchInfo:(BOOL)info clearingDimming:(BOOL)dimming;	// 0x302cc4d9
- (void)dealloc;	// 0x302cade5
- (id)defaultNameForKeyplaneName:(id)keyplaneName;	// 0x30109049
- (void)deleteAction;	// 0x301b45f5
- (void)didClearInput;	// 0x301262f1
// declared property getter: - (BOOL)didLongPress;	// 0x302d04bd
- (void)didRotate;	// 0x302d0259
- (int)displayTypeHintForMoreKey;	// 0x3010d0ad
- (int)displayTypeHintForShiftKey;	// 0x3010cef5
- (BOOL)doesKeyCharging;	// 0x301112f5
- (unsigned)downActionFlagsForKey:(id)key;	// 0x301295c1
- (void)downActionShiftWithKey:(id)key;	// 0x301c436d
- (id)findLeftMoreKey;	// 0x3010a971
- (void)finishSplit;	// 0x302cef65
- (void)finishSplitTransition;	// 0x302cf175
- (void)finishSplitTransitionWithProgress:(float)progress;	// 0x302cf295
- (void)flushKeyCache:(id)cache;	// 0x302cb1a1
- (CGRect)frameForKeyWithRepresentedString:(id)representedString;	// 0x302d05e5
- (CGRect)frameForKeylayoutName:(id)keylayoutName;	// 0x302cb439
- (CGRect)frameForKeylayoutName:(id)keylayoutName onKeyplaneName:(id)name;	// 0x302cb3cd
- (CGRect)frameForLastKeyWithRepresentedString:(id)representedString;	// 0x302d0839
- (id)generateInfoForTouch:(id)touch;	// 0x301281c1
- (BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;	// 0x302cfdb1
- (BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;	// 0x302cfca9
- (id)getFlickCompositeImageForKey:(id)key direction:(int)direction rect:(CGRect)rect;	// 0x302d10a9
- (id)getPopupBackgroundImageForKey:(id)key direction:(int)direction popupInfo:(id)info rect:(CGRect)rect;	// 0x302d0f31
- (void)handleDismissFlickView:(id)view;	// 0x302d18a1
- (void)handleFlick:(id)flick;	// 0x302d0afd
- (void)handlePopupView:(id)view;	// 0x302d17fd
- (SEL)handlerForNotification:(id)notification;	// 0x302cb2c9
- (BOOL)handwritingPlane;	// 0x301263bd
- (BOOL)hasCandidateKeys;	// 0x302cc8b5
- (float)hitBuffer;	// 0x30116829
- (BOOL)ignoresShiftState;	// 0x301593ed
- (id)infoForTouch:(id)touch;	// 0x301318dd
- (void)installGestureRecognizers;	// 0x30106ccd
- (float)interpretPinchSeparationValues;	// 0x302cec35
- (void)interpretTouchesForSplit;	// 0x302cf2cd
- (BOOL)isLongPressedKey:(id)key;	// 0x30132149
// declared property getter: - (BOOL)isRotating;	// 0x3010f9ad
- (BOOL)isShiftKeyBeingHeld;	// 0x30110f1d
- (BOOL)isShiftKeyPlaneChooser;	// 0x30108f71
- (BOOL)keyHasAccentedVariants:(id)variants;	// 0x302d0065
- (id)keyHitTest:(CGPoint)test;	// 0x30128791
- (id)keyHitTestClosestToPoint:(CGPoint)point;	// 0x3017ab9d
- (id)keyHitTestContainingPoint:(CGPoint)point;	// 0x302cc5a5
- (id)keyHitTestContainingPoint:(CGPoint)point;	// 0x30127875
- (id)keyHitTestForTouchInfo:(id)touchInfo touchStage:(int)stage;	// 0x301282b9
- (id)keyHitTestWithoutCharging:(CGPoint)charging;	// 0x30127695
- (id)keyWithRepresentedString:(id)representedString;	// 0x302d050d
// declared property getter: - (id)keyboard;	// 0x301b8e41
// declared property getter: - (id)keyboardName;	// 0x302d0459
- (id)keyboardWithName:(id)name;	// 0x30107a29
- (int)keycodeForKey:(id)key;	// 0x30128dc9
// declared property getter: - (id)keyplane;	// 0x30107e75
- (id)keyplaneForKey:(id)key;	// 0x301b8e99
// declared property getter: - (id)keyplaneName;	// 0x30107e85
- (id)keyplaneNamed:(id)named;	// 0x302d02f9
- (double)lastTouchUpTimestamp;	// 0x302cb765
// declared property getter: - (id)localizedInputKey;	// 0x302d04fd
// declared property getter: - (id)localizedInputMode;	// 0x30107e09
- (void)longPressAction;	// 0x302cccf5
- (id)mergableKeyplaneSwitchKeyForRendering:(int)rendering;	// 0x302cc33d
- (void)nextCandidatesAction;	// 0x302ccc8d
- (id)overlayCharacterImageForKey:(id)key direction:(int)direction rect:(CGRect)rect flickString:(id)string popupInfo:(id)info;	// 0x302d1129
- (BOOL)performReturnAction;	// 0x302cf9b9
// converted property getter: - (BOOL)pinchDetected;	// 0x30111585
- (BOOL)pinchSplitGestureEnabled;	// 0x302cf2b5
- (BOOL)pointInside:(CGPoint)inside forEvent:(GSEventRef)event;	// 0x30127fc9
- (id)popupKeyViews;	// 0x302d0965
- (void)prepareForSplitTransition;	// 0x302ced49
- (void)rebuildSplitTransitionView;	// 0x302cba8d
- (void)rebuildSplitTransitionViewFromKeyplane:(id)keyplane toKeyplane:(id)keyplane2;	// 0x302cb77d
- (void)refreshForDictationAvailablityDidChange;	// 0x302cc45d
- (void)refreshForRivenPreferences;	// 0x302cb535
- (void)refreshGhostKeyState;	// 0x301318f1
- (void)removeFromSuperview;	// 0x302cb0e1
- (CGImageRef)renderedImageWithStateFallbacksForToken:(id)token;	// 0x302cbaa1
- (CGImageRef)renderedImageWithToken:(id)token;	// 0x302cbb5d
- (CGImageRef)renderedKeyplaneWithToken:(id)token split:(BOOL)split;	// 0x302cbccd
- (void)resizeForKeyplaneSize:(CGSize)keyplaneSize;	// 0x30109c55
- (void)restoreDefaultsForAllKeys;	// 0x3010fa0d
- (void)restoreDefaultsForKey:(id)key;	// 0x3010fa65
- (id)scriptingInfoWithChildren;	// 0x301b8595
- (void)sendStringAction:(id)action forKey:(id)key isPopupVariant:(BOOL)variant;	// 0x302cc6bd
- (void)setAction:(SEL)action forKey:(id)key;	// 0x302cc94d
// declared property setter: - (void)setActiveKey:(id)key;	// 0x30128e9d
// declared property setter: - (void)setAutoShift:(BOOL)shift;	// 0x302d04ad
- (void)setAutoshift:(BOOL)autoshift;	// 0x301112ad
- (void)setCompositeImage:(id)image forKey:(id)key;	// 0x302d0ee1
- (void)setCurrencyKeysForCurrentLocaleOnKeyplane:(id)currentLocaleOnKeyplane;	// 0x3010d4bd
- (void)setDelegate:(id)delegate forKey:(id)key;	// 0x302cca0d
// declared property setter: - (void)setDidLongPress:(BOOL)longPress;	// 0x302d04cd
- (void)setKeyForTouchInfo:(id)touchInfo key:(id)key;	// 0x302d0a75
- (void)setKeyboardAppearance:(int)appearance;	// 0x3010912d
- (void)setKeyboardDim:(BOOL)dim;	// 0x302d1be1
- (void)setKeyboardDim:(BOOL)dim amount:(float)amount withDuration:(float)duration;	// 0x302d18f1
// declared property setter: - (void)setKeyboardName:(id)name;	// 0x302d0469
- (void)setKeyboardName:(id)name appearance:(int)appearance;	// 0x30107751
// declared property setter: - (void)setKeyplaneName:(id)name;	// 0x30107e95
- (void)setLabel:(id)label forKey:(id)key;	// 0x3010fb5d
// declared property setter: - (void)setLocalizedInputKey:(id)key;	// 0x30107e51
- (void)setLongPressAction:(SEL)action forKey:(id)key;	// 0x302cc9ad
- (void)setReturnKeyEnabled:(BOOL)enabled withDisplayName:(id)displayName withType:(int)type;	// 0x30110abd
// declared property setter: - (void)setShift:(BOOL)shift;	// 0x30110f7d
// declared property setter: - (void)setShowIntlKey:(BOOL)key;	// 0x302d04dd
- (void)setSplit:(BOOL)split animated:(BOOL)animated;	// 0x302cf829
- (void)setSplitProgress:(float)progress;	// 0x302cf651
- (void)setState:(int)state forKey:(id)key;	// 0x3010def9
- (void)setTarget:(id)target forKey:(id)key;	// 0x302cc8ed
- (id)shapesForControlKeyShapes:(id)controlKeyShapes split:(BOOL)split;	// 0x302cc0a1
- (id)shapesForControlKeyShapes:(id)controlKeyShapes split:(BOOL)split alternateCJMerge:(BOOL)merge;	// 0x3010ab29
// declared property getter: - (BOOL)shift;	// 0x302d048d
- (BOOL)shouldHitTestKey:(id)key;	// 0x301106e9
- (BOOL)shouldPreventInputManagerHitTestingForKey:(id)key;	// 0x30128d7d
- (BOOL)shouldRetestKey:(id)key withKeyplane:(id)keyplane;	// 0x301319f1
- (BOOL)shouldShowDictationKey;	// 0x302cbe91
- (BOOL)shouldShowIndicator;	// 0x302cdd89
// declared property getter: - (BOOL)showDictationKey;	// 0x302d04ed
- (void)showFlickView:(int)view withKey:(id)key flickString:(id)string;	// 0x302d0ea5
// declared property getter: - (BOOL)showIntlKey;	// 0x3010da35
- (void)showKeyboardType:(int)type appearance:(int)appearance orientation:(id)orientation withShift:(BOOL)shift;	// 0x301070a9
- (void)showPopupVariantsForKey:(id)key;	// 0x302cd319
- (void)showPopupView:(int)view withKey:(id)key popupInfo:(id)info force:(BOOL)force;	// 0x302d1c79
- (void)showSplitTransitionView:(BOOL)view;	// 0x302cee0d
- (id)simulateTouch:(CGPoint)touch;	// 0x302d0325
- (id)simulateTouchForCharacter:(id)character errorVector:(CGPoint)vector shouldTypeVariants:(BOOL)variants baseKeyForVariants:(BOOL)variants4;	// 0x301b9161
- (id)spaceKey;	// 0x3010aac9
- (id)splitNameForKeyplane:(id)keyplane;	// 0x302cb375
- (id)splitNameForKeyplaneName:(id)keyplaneName;	// 0x302cb325
- (int)stateForKey:(id)key;	// 0x302cc4b9
- (int)stateForKeyplaneSwitchKey:(id)keyplaneSwitchKey;	// 0x302cbf21
- (int)stateForShiftKey:(id)shiftKey;	// 0x3010e7bd
- (void)swipeDetected:(id)detected;	// 0x302cff49
- (void)touchCancelled:(id)cancelled;	// 0x302cfad5
- (void)touchDown:(id)down;	// 0x30127c59
- (void)touchDownWithKey:(id)key atPoint:(CGPoint)point;	// 0x30128ec1
- (void)touchDragged:(id)dragged;	// 0x30179a75
- (id)touchForKey:(id)key;	// 0x301c42a1
- (void)touchUp:(id)up;	// 0x30130151
- (void)uninstallGestureRecognizers;	// 0x302cfe45
- (unsigned)upActionFlagsForKey:(id)key;	// 0x30131add
- (void)upActionShift;	// 0x301c45c5
- (void)updateBackgroundIfNeeded;	// 0x3010dc0d
- (void)updateDictationKeyOnNumberPads;	// 0x302cc0c5
- (void)updateKeyCentroids;	// 0x301100c5
- (void)updateKeyboardForKeyplane:(id)keyplane;	// 0x301099d1
- (void)updateKeyplaneViewMask;	// 0x301132d5
- (BOOL)updateKeysWithDelegates;	// 0x3010fed5
- (void)updateLocalizedKeys:(BOOL)keys;	// 0x3010b4ed
- (void)updateLocalizedKeysOnKeyplane:(id)keyplane;	// 0x3010b6b5
- (void)updateMoreAndInternationalKeys;	// 0x3010a625
- (void)updateShiftKeyState;	// 0x30111065
- (void)updateTransitionWithFlags:(int)flags;	// 0x30110d39
- (BOOL)usesAutoShift;	// 0x30110f49
- (int)visualStyleForKeyboardIfSplit:(BOOL)keyboardIfSplit;	// 0x302cb6f5
- (void)willRotate;	// 0x302d0209
@end

