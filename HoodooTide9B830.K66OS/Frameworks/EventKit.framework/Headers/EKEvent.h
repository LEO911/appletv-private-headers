/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/EventKit.framework/EventKit
 */

#import "EKCalendarItem.h"
#import "EventKit-Structs.h"

@class EKRecurrenceRule, NSString, EKParticipant, NSNumber, NSDate, EKCalendarDate;

@interface EKEvent : EKCalendarItem {
@private
	EKCalendarDate *_occurrenceStartDate;	// 4 = 0x4
	EKCalendarDate *_occurrenceEndDate;	// 8 = 0x8
	BOOL _occurrenceIsAllDay;	// 12 = 0xc
	EKCalendarDate *_originalOccurrenceStartDate;	// 16 = 0x10
	EKCalendarDate *_originalOccurrenceEndDate;	// 20 = 0x14
	NSNumber *_originalOccurrenceIsAllDay;	// 24 = 0x18
}
@property(assign, nonatomic, getter=isAllDay) BOOL allDay;	// G=0x3245b405; S=0x32464e11; 
@property(assign, nonatomic) int availability;	// G=0x3249f2e1; S=0x3249f335; 
@property(readonly, assign, nonatomic) int birthdayPersonID;	// G=0x3249f1b9; 
@property(copy, nonatomic) NSDate *endDate;	// G=0x3245b641; S=0x3246537d; 
@property(readonly, assign, nonatomic) NSString *eventIdentifier;	// G=0x32462c41; 
@property(readonly, assign, nonatomic) BOOL isDetached;	// G=0x32464c39; 
@property(assign) unsigned modifiedProperties;	// G=0x3249ef61; S=0x3249ef95; converted property
@property(assign) BOOL needsOccurrenceCacheUpdate;	// G=0x3249efd9; S=0x3249effd; converted property
@property(copy, nonatomic) EKCalendarDate *occurrenceEndDate;	// G=0x3245ac65; S=0x3245b3e1; @synthesize=_occurrenceEndDate
@property(assign, nonatomic) BOOL occurrenceIsAllDay;	// G=0x324a1981; S=0x3245a709; @synthesize=_occurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *occurrenceStartDate;	// G=0x3245b3d1; S=0x3245a695; @synthesize=_occurrenceStartDate
@property(readonly, assign, nonatomic) EKParticipant *organizer;	// G=0x32462e01; 
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate;	// G=0x32465c25; S=0x324652b1; @synthesize=_originalOccurrenceEndDate
@property(copy, nonatomic) NSNumber *originalOccurrenceIsAllDay;	// G=0x32465c51; S=0x32463d5d; @synthesize=_originalOccurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate;	// G=0x32465c01; S=0x3246528d; @synthesize=_originalOccurrenceStartDate
@property(assign) int participationStatus;	// G=0x32463551; S=0x3249f041; converted property
@property(assign) unsigned readState;	// G=0x324636b1; S=0x3249f3d1; converted property
@property(retain, nonatomic) EKRecurrenceRule *recurrenceRule;	// G=0x3249f231; S=0x3249f27d; 
@property(retain) id responseComment;	// G=0x3249f399; S=0x3249f3b5; converted property
@property(copy, nonatomic) NSDate *startDate;	// G=0x3245b621; S=0x324650d1; 
@property(readonly, assign, nonatomic) int status;	// G=0x3245cf0d; 
+ (id)eventWithEventStore:(id)eventStore;	// 0x32466471
- (id)init;	// 0x3249eb11
- (id)initWithEventStore:(id)eventStore;	// 0x32463701
- (id)initWithPersistentObject:(id)persistentObject;	// 0x3249eb4d
- (id)initWithPersistentObject:(id)persistentObject occurrenceDate:(id)date;	// 0x3245a1a9
- (BOOL)_cancelWithSpan:(int)span error:(id *)error;	// 0x324a0c85
- (BOOL)_checkStartDateConstraintAgainstDate:(XXStruct_lQVxyC)date timeZone:(id)zone error:(id *)error;	// 0x3246941d
- (BOOL)_deleteWithSpan:(int)span error:(id *)error;	// 0x3246f70d
- (void)_detachWithStartDate:(id)startDate newStartDate:(id)date future:(BOOL)future;	// 0x324a0e09
- (id)_effectiveTimeZone;	// 0x324652d5
- (BOOL)_isAllDay;	// 0x3245a6b9
- (BOOL)_isInitialOccurrenceDate:(id)date;	// 0x3246f529
- (BOOL)_occurrenceExistsOnDate:(double)date timeZone:(id)zone;	// 0x324a0a49
- (int)_parentParticipationStatus;	// 0x3249f179
- (id)_persistentEvent;	// 0x3245ad3d
- (void)_sendModifiedNote;	// 0x324663dd
- (BOOL)_shouldCancelInsteadOfDeleteWithSpan:(int)span;	// 0x3246f60d
- (BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(int)recurrenceInterval;	// 0x3249fd55
- (BOOL)_validateDatesAndRecurrencesGivenSpan:(int)span error:(id *)error;	// 0x32469019
- (BOOL)_validateDurationConstrainedToRecurrenceInterval;	// 0x3249fb95
- (int)alarmCount;	// 0x3249f209
- (BOOL)allowsAlarmModifications;	// 0x32469519
- (BOOL)allowsCalendarModifications;	// 0x3249f719
- (BOOL)allowsRecurrenceModifications;	// 0x32464bb5
- (id)attachments;	// 0x32462d0d
- (int)attendeeCount;	// 0x3249f1e1
- (id)attendees;	// 0x32462ea1
// declared property getter: - (int)availability;	// 0x3249f2e1
// declared property getter: - (int)birthdayPersonID;	// 0x3249f1b9
- (id)birthdayTitleWithAddressBook:(void *)addressBook;	// 0x3249eda9
- (BOOL)canBeRespondedTo;	// 0x324632cd
- (BOOL)canDetachSingleOccurrence;	// 0x3249f7b5
- (BOOL)canMoveToCalendar:(id)calendar fromCalendar:(id)calendar2 error:(id *)error;	// 0x3249f4ed
- (BOOL)canSetAvailability;	// 0x3249f875
- (void)clearReadState;	// 0x3249f415
- (BOOL)commitWithSpan:(int)span error:(id *)error;	// 0x32469649
- (id)committedValueForKey:(id)key;	// 0x32464329
- (int)compareStartDateWithEvent:(id)event;	// 0x3245b599
- (void)dealloc;	// 0x32463f01
- (id)description;	// 0x3249f8f1
- (void)didCommit;	// 0x3246dbb9
- (id)dirtyPropertiesToSkip;	// 0x3249fa31
- (double)duration;	// 0x3245e35d
- (id)endCalendarDate;	// 0x3245ac55
// declared property getter: - (id)endDate;	// 0x3245b641
- (XXStruct_lQVxyC)endDateGr;	// 0x3245e2cd
- (XXStruct_lQVxyC)endDatePinnedForAllDay;	// 0x3249eeed
// declared property getter: - (id)eventIdentifier;	// 0x32462c41
- (id)eventStore;	// 0x3245d16d
- (id)exportToICS;	// 0x3249ec81
- (id)externalId;	// 0x3249f825
- (id)externalURL;	// 0x3249eb61
- (BOOL)hasSelfAttendee;	// 0x3249f8c1
- (unsigned)hash;	// 0x3245b415
- (id)initialEndDate;	// 0x3249ee0d
- (id)initialStartDate;	// 0x3249edb9
// declared property getter: - (BOOL)isAllDay;	// 0x3245b405
// declared property getter: - (BOOL)isDetached;	// 0x32464c39
- (BOOL)isDirtyIgnoringCalendar;	// 0x3249ed09
- (BOOL)isEndDateDirty;	// 0x3249ece9
- (BOOL)isEqual:(id)equal;	// 0x3245b4c1
- (BOOL)isStartDateDirty;	// 0x3249ecc9
- (BOOL)isStatusDirty;	// 0x3249eca9
- (BOOL)isTentative;	// 0x3249f449
// converted property getter: - (unsigned)modifiedProperties;	// 0x3249ef61
// converted property getter: - (BOOL)needsOccurrenceCacheUpdate;	// 0x3249efd9
- (id)occurrenceDate;	// 0x32464a79
// declared property getter: - (id)occurrenceEndDate;	// 0x3245ac65
// declared property getter: - (BOOL)occurrenceIsAllDay;	// 0x324a1981
// declared property getter: - (id)occurrenceStartDate;	// 0x3245b3d1
// declared property getter: - (id)organizer;	// 0x32462e01
// declared property getter: - (id)originalOccurrenceEndDate;	// 0x32465c25
// declared property getter: - (id)originalOccurrenceIsAllDay;	// 0x32465c51
// declared property getter: - (id)originalOccurrenceStartDate;	// 0x32465c01
// converted property getter: - (int)participationStatus;	// 0x32463551
- (int)pendingParticipationStatus;	// 0x3249f7fd
// converted property getter: - (unsigned)readState;	// 0x324636b1
// declared property getter: - (id)recurrenceRule;	// 0x3249f231
- (BOOL)refresh;	// 0x32465ce5
- (BOOL)removeWithSpan:(int)span error:(id *)error;	// 0x3246f459
- (BOOL)requiresDetach;	// 0x324681d5
// converted property getter: - (id)responseComment;	// 0x3249f399
- (BOOL)responseMustApplyToAll;	// 0x3249f78d
- (void)revert;	// 0x3249fa8d
- (void)rollback;	// 0x324656b5
// declared property setter: - (void)setAllDay:(BOOL)day;	// 0x32464e11
// declared property setter: - (void)setAvailability:(int)availability;	// 0x3249f335
// declared property setter: - (void)setEndDate:(id)date;	// 0x3246537d
// converted property setter: - (void)setModifiedProperties:(unsigned)properties;	// 0x3249ef95
// converted property setter: - (void)setNeedsOccurrenceCacheUpdate:(BOOL)update;	// 0x3249effd
// declared property setter: - (void)setOccurrenceEndDate:(id)date;	// 0x3245b3e1
// declared property setter: - (void)setOccurrenceIsAllDay:(BOOL)day;	// 0x3245a709
// declared property setter: - (void)setOccurrenceStartDate:(id)date;	// 0x3245a695
// declared property setter: - (void)setOriginalOccurrenceEndDate:(id)date;	// 0x324652b1
// declared property setter: - (void)setOriginalOccurrenceIsAllDay:(id)day;	// 0x32463d5d
// declared property setter: - (void)setOriginalOccurrenceStartDate:(id)date;	// 0x3246528d
// converted property setter: - (void)setParticipationStatus:(int)status;	// 0x3249f041
// converted property setter: - (void)setReadState:(unsigned)state;	// 0x3249f3d1
// declared property setter: - (void)setRecurrenceRule:(id)rule;	// 0x3249f27d
// converted property setter: - (void)setResponseComment:(id)comment;	// 0x3249f3b5
// declared property setter: - (void)setStartDate:(id)date;	// 0x324650d1
- (void)setTimeZone:(id)zone;	// 0x32463d81
- (id)startCalendarDate;	// 0x3245ac45
// declared property getter: - (id)startDate;	// 0x3245b621
- (XXStruct_lQVxyC)startDateGr;	// 0x3245e23d
- (XXStruct_lQVxyC)startDatePinnedForAllDay;	// 0x3249ee85
// declared property getter: - (int)status;	// 0x3245cf0d
- (id)uniqueId;	// 0x3249f84d
- (BOOL)validateWithSpan:(int)span error:(id *)error;	// 0x32468651
@end

